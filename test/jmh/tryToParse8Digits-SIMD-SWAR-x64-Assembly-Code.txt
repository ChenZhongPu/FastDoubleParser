/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/java -Dvisualvm.id=29915139182963 -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*FastDoubleParser*.tryToParseEightDigits* -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=50963:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-core-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jopt-simple-4.6.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/commons-math3-3.2.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-generator-annprocess-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-api-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/apiguardian-api-1.1.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/opentest4j-1.2.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-commons-1.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-params-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-engine-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-engine-1.7.1.jar -p /Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/production/FastDoubleParser:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/production/FastDoubleParserDemo -m ch.randelshofer.fastdoubleparserdemo/ch.randelshofer.fastdoubleparserdemo.Main
CompileCommand: print *FastDoubleParser*.tryToParseEightDigits* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz SIMD-256
x86_64, Mac OS X, 12.1, 12
OpenJDK 64-Bit Server VM, Oracle Corporation, 17+35-2724
-XX:+UnlockExperimentalVMOptions, -XX:+UnlockDiagnosticVMOptions, -XX:CompileCommand=print,*FastDoubleParser*.tryToParseEightDigits*

parsing random numbers in the range [0,1)

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     316  517       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits (6 bytes)
 total in heap  [0x00000001102b2190,0x00000001102b24b0] = 800
 relocation     [0x00000001102b22f0,0x00000001102b2328] = 56
 main code      [0x00000001102b2340,0x00000001102b2400] = 192
 stub code      [0x00000001102b2400,0x00000001102b2440] = 64
 oops           [0x00000001102b2440,0x00000001102b2448] = 8
 metadata       [0x00000001102b2448,0x00000001102b2450] = 8
 scopes data    [0x00000001102b2450,0x00000001102b2468] = 24
 scopes pcs     [0x00000001102b2468,0x00000001102b24a8] = 64
 dependencies   [0x00000001102b24a8,0x00000001102b24b0] = 8

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000106833688} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00000001102b2340:   mov    %eax,-0x14000(%rsp)
  0x00000001102b2347:   push   %rbp
  0x00000001102b2348:   sub    $0x30,%rsp
  0x00000001102b234c:   movabs $0x106833e68,%rdi            ;   {metadata(method data for {method} {0x0000000106833688} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b2356:   mov    0xac(%rdi),%ebx
  0x00000001102b235c:   add    $0x2,%ebx
  0x00000001102b235f:   mov    %ebx,0xac(%rdi)
  0x00000001102b2365:   and    $0x7fe,%ebx
  0x00000001102b236b:   cmp    $0x0,%ebx
  0x00000001102b236e:   je     0x00000001102b239f
  0x00000001102b2374:   movabs $0x106833e68,%rdi            ;   {metadata(method data for {method} {0x0000000106833688} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b237e:   addq   $0x1,0xf0(%rdi)
  0x00000001102b2386:   nop
  0x00000001102b2387:   callq  0x00000001102b2405           ; ImmutableOopMap {}
                                                            ;*invokestatic tryToParseEightDigitsSwarIndependentMultiplications {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@2 (line 608)
                                                            ;   {static_call}
  0x00000001102b238c:   add    $0x30,%rsp
  0x00000001102b2390:   pop    %rbp
  0x00000001102b2391:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x00000001102b2398:   ja     0x00000001102b23bd
  0x00000001102b239e:   retq
  0x00000001102b239f:   movabs $0x106833688,%r10            ;   {metadata({method} {0x0000000106833688} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b23a9:   mov    %r10,0x8(%rsp)
  0x00000001102b23ae:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b23b6:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@-1 (line 608)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b23bb:   jmp    0x00000001102b2374
  0x00000001102b23bd:   movabs $0x1102b2391,%r10            ;   {internal_word}
  0x00000001102b23c7:   mov    %r10,0x358(%r15)
  0x00000001102b23ce:   jmpq   0x000000010fca7100           ;   {runtime_call SafepointBlob}
  0x00000001102b23d3:   nop
  0x00000001102b23d4:   nop
  0x00000001102b23d5:   mov    0x3d0(%r15),%rax
  0x00000001102b23dc:   movq   $0x0,0x3d0(%r15)
  0x00000001102b23e7:   movq   $0x0,0x3d8(%r15)
  0x00000001102b23f2:   add    $0x30,%rsp
  0x00000001102b23f6:   pop    %rbp
  0x00000001102b23f7:   jmpq   0x000000010fd45580           ;   {runtime_call unwind_exception Runtime1 stub}
  0x00000001102b23fc:   hlt
  0x00000001102b23fd:   hlt
  0x00000001102b23fe:   hlt
  0x00000001102b23ff:   hlt
[Stub Code]
  0x00000001102b2400:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x00000001102b2405:   movabs $0x1068337c0,%rbx            ;   {static_stub}
  0x00000001102b240f:   jmpq   0x000000010fca5a5c           ;   {runtime_call I2C/C2I adapters}
[Exception Handler]
  0x00000001102b2414:   callq  0x000000010fd48280           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x00000001102b2419:   movabs $0x107a8ce43,%rdi            ;   {external_word}
  0x00000001102b2423:   and    $0xfffffffffffffff0,%rsp
  0x00000001102b2427:   callq  0x000000010772fc50           ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x00000001102b242c:   hlt
[Deopt Handler Code]
  0x00000001102b242d:   movabs $0x1102b242d,%r10            ;   {section_word}
  0x00000001102b2437:   push   %r10
  0x00000001102b2439:   jmpq   0x000000010fca63a0           ;   {runtime_call DeoptimizationBlob}
  0x00000001102b243e:   hlt
  0x00000001102b243f:   hlt
--------------------------------------------------------------------------------

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     324  518       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications (86 bytes)
 total in heap  [0x00000001102b7d90,0x00000001102b8be8] = 3672
 relocation     [0x00000001102b7ef0,0x00000001102b7fb8] = 200
 main code      [0x00000001102b7fc0,0x00000001102b88e0] = 2336
 stub code      [0x00000001102b88e0,0x00000001102b8930] = 80
 oops           [0x00000001102b8930,0x00000001102b8960] = 48
 metadata       [0x00000001102b8960,0x00000001102b89a8] = 72
 scopes data    [0x00000001102b89a8,0x00000001102b8ad8] = 304
 scopes pcs     [0x00000001102b8ad8,0x00000001102b8bc8] = 240
 dependencies   [0x00000001102b8bc8,0x00000001102b8bd0] = 8
 nul chk table  [0x00000001102b8bd0,0x00000001102b8be8] = 24

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001068337c0} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x100]  (sp of caller)
  0x00000001102b7fc0:   mov    %eax,-0x14000(%rsp)
  0x00000001102b7fc7:   push   %rbp
  0x00000001102b7fc8:   sub    $0xf0,%rsp
  0x00000001102b7fcf:   movabs $0x106833fb0,%rcx            ;   {metadata(method data for {method} {0x00000001068337c0} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b7fd9:   mov    0xac(%rcx),%r8d
  0x00000001102b7fe0:   add    $0x2,%r8d
  0x00000001102b7fe4:   mov    %r8d,0xac(%rcx)
  0x00000001102b7feb:   and    $0x7fe,%r8d
  0x00000001102b7ff2:   cmp    $0x0,%r8d
  0x00000001102b7ff6:   je     0x00000001102b873c
  0x00000001102b7ffc:   movabs $0x106833fb0,%rcx            ;   {metadata(method data for {method} {0x00000001068337c0} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b8006:   lea    0x128(%rcx),%rcx
  0x00000001102b800d:   mov    %rsi,%r8
  0x00000001102b8010:   test   %r8,%r8
  0x00000001102b8013:   jne    0x00000001102b801a
  0x00000001102b8015:   orq    $0x1,0x8(%rcx)
  0x00000001102b801a:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8024:   lea    0x3f0(%rcx),%rcx
  0x00000001102b802b:   movabs $0x61f0175b8,%r8             ;   {oop(a 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle'{0x000000061f0175b8})}
  0x00000001102b8035:   mov    %r8,%rdi
  0x00000001102b8038:   test   %rdi,%rdi
  0x00000001102b803b:   jne    0x00000001102b8043
  0x00000001102b803d:   orq    $0x1,(%rcx)
  0x00000001102b8041:   jmp    0x00000001102b8089
  0x00000001102b8043:   movabs $0x800c73670,%rdi            ;   {metadata('java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b804d:   xor    (%rcx),%rdi
  0x00000001102b8050:   test   $0xfffffffffffffffc,%rdi
  0x00000001102b8057:   je     0x00000001102b8089
  0x00000001102b8059:   test   $0x2,%rdi
  0x00000001102b8060:   jne    0x00000001102b8089
  0x00000001102b8062:   cmpq   $0x0,(%rcx)
  0x00000001102b8069:   je     0x00000001102b8086
  0x00000001102b806b:   cmpq   $0x1,(%rcx)
  0x00000001102b8072:   je     0x00000001102b8086
  0x00000001102b8074:   xor    (%rcx),%rdi
  0x00000001102b8077:   test   $0xfffffffffffffffc,%rdi
  0x00000001102b807e:   je     0x00000001102b8089
  0x00000001102b8080:   orq    $0x2,(%rcx)
  0x00000001102b8084:   jmp    0x00000001102b8089
  0x00000001102b8086:   mov    %rdi,(%rcx)
  0x00000001102b8089:   mov    %rsi,%rdi
  0x00000001102b808c:   test   %rdi,%rdi
  0x00000001102b808f:   jne    0x00000001102b8098
  0x00000001102b8091:   orq    $0x1,0x10(%rcx)
  0x00000001102b8096:   jmp    0x00000001102b80e4
  0x00000001102b8098:   movabs $0x800006328,%rdi            ;   {metadata({type array byte})}
  0x00000001102b80a2:   xor    0x10(%rcx),%rdi
  0x00000001102b80a6:   test   $0xfffffffffffffffc,%rdi
  0x00000001102b80ad:   je     0x00000001102b80e4
  0x00000001102b80af:   test   $0x2,%rdi
  0x00000001102b80b6:   jne    0x00000001102b80e4
  0x00000001102b80b8:   cmpq   $0x0,0x10(%rcx)
  0x00000001102b80c0:   je     0x00000001102b80e0
  0x00000001102b80c2:   cmpq   $0x1,0x10(%rcx)
  0x00000001102b80ca:   je     0x00000001102b80e0
  0x00000001102b80cc:   xor    0x10(%rcx),%rdi
  0x00000001102b80d0:   test   $0xfffffffffffffffc,%rdi
  0x00000001102b80d7:   je     0x00000001102b80e4
  0x00000001102b80d9:   orq    $0x2,0x10(%rcx)
  0x00000001102b80de:   jmp    0x00000001102b80e4
  0x00000001102b80e0:   mov    %rdi,0x10(%rcx)
  0x00000001102b80e4:   movabs $0x106833fb0,%rcx            ;   {metadata(method data for {method} {0x00000001068337c0} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b80ee:   addq   $0x1,0xf0(%rcx)
  0x00000001102b80f6:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8100:   mov    0xac(%rcx),%edi
  0x00000001102b8106:   add    $0x2,%edi
  0x00000001102b8109:   mov    %edi,0xac(%rcx)
  0x00000001102b810f:   and    $0x1ffffe,%edi
  0x00000001102b8115:   cmp    $0x0,%edi
  0x00000001102b8118:   je     0x00000001102b875d
  0x00000001102b811e:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8128:   lea    0x128(%rcx),%rcx
  0x00000001102b812f:   movabs $0x61f036ea8,%rdi            ;   {oop(a 'java/lang/invoke/VarHandle$AccessDescriptor'{0x000000061f036ea8})}
  0x00000001102b8139:   test   %rdi,%rdi
  0x00000001102b813c:   jne    0x00000001102b8143
  0x00000001102b813e:   orq    $0x1,0x8(%rcx)
  0x00000001102b8143:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b814d:   addq   $0x1,0xf0(%rcx)
  0x00000001102b8155:   movabs $0x10668a720,%rcx            ;   {metadata(method data for {method} {0x00000008000d0b00} 'checkExactAccessMode' '(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V' in 'java/lang/invoke/VarHandle')}
  0x00000001102b815f:   mov    0xac(%rcx),%r8d
  0x00000001102b8166:   add    $0x2,%r8d
  0x00000001102b816a:   mov    %r8d,0xac(%rcx)
  0x00000001102b8171:   and    $0x1ffffe,%r8d
  0x00000001102b8178:   cmp    $0x0,%r8d
  0x00000001102b817c:   je     0x00000001102b877e
  0x00000001102b8182:   movabs $0x10668a720,%rcx            ;   {metadata(method data for {method} {0x00000008000d0b00} 'checkExactAccessMode' '(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V' in 'java/lang/invoke/VarHandle')}
  0x00000001102b818c:   incl   0xf0(%rcx)
  0x00000001102b8192:   movabs $0x61f0175b8,%rcx            ;   {oop(a 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle'{0x000000061f0175b8})}
  0x00000001102b819c:   movabs $0x10668c688,%r8             ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b81a6:   mov    0x8(%rcx),%ecx
  0x00000001102b81a9:   movabs $0x800000000,%r10
  0x00000001102b81b3:   add    %r10,%rcx
  0x00000001102b81b6:   cmp    0x150(%r8),%rcx
  0x00000001102b81bd:   jne    0x00000001102b81cc
  0x00000001102b81bf:   addq   $0x1,0x158(%r8)
  0x00000001102b81c7:   jmpq   0x00000001102b8232
  0x00000001102b81cc:   cmp    0x160(%r8),%rcx
  0x00000001102b81d3:   jne    0x00000001102b81e2
  0x00000001102b81d5:   addq   $0x1,0x168(%r8)
  0x00000001102b81dd:   jmpq   0x00000001102b8232
  0x00000001102b81e2:   cmpq   $0x0,0x150(%r8)
  0x00000001102b81ed:   jne    0x00000001102b8206
  0x00000001102b81ef:   mov    %rcx,0x150(%r8)
  0x00000001102b81f6:   movq   $0x1,0x158(%r8)
  0x00000001102b8201:   jmpq   0x00000001102b8232
  0x00000001102b8206:   cmpq   $0x0,0x160(%r8)
  0x00000001102b8211:   jne    0x00000001102b822a
  0x00000001102b8213:   mov    %rcx,0x160(%r8)
  0x00000001102b821a:   movq   $0x1,0x168(%r8)
  0x00000001102b8225:   jmpq   0x00000001102b8232
  0x00000001102b822a:   addq   $0x1,0x140(%r8)
  0x00000001102b8232:   movabs $0x10668ca90,%rcx            ;   {metadata(method data for {method} {0x00000008000ca028} 'isDirect' '()Z' in 'java/lang/invoke/VarHandle')}
  0x00000001102b823c:   mov    0xac(%rcx),%r8d
  0x00000001102b8243:   add    $0x2,%r8d
  0x00000001102b8247:   mov    %r8d,0xac(%rcx)
  0x00000001102b824e:   and    $0x1ffffe,%r8d
  0x00000001102b8255:   cmp    $0x0,%r8d
  0x00000001102b8259:   je     0x00000001102b879f
  0x00000001102b825f:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8269:   incl   0x188(%rcx)
  0x00000001102b826f:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8279:   incl   0x1a8(%rcx)
  0x00000001102b827f:   movabs $0x61f016ef8,%rcx            ;   {oop(a 'java/lang/invoke/VarForm'{0x000000061f016ef8})}
  0x00000001102b8289:   mov    %rcx,%r8
  0x00000001102b828c:   movabs $0x10668c688,%rdi            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8296:   addq   $0x1,0x1b8(%rdi)
  0x00000001102b829e:   movabs $0x10668af80,%r8             ;   {metadata(method data for {method} {0x000000080009e760} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x00000001102b82a8:   mov    0xac(%r8),%edi
  0x00000001102b82af:   add    $0x2,%edi
  0x00000001102b82b2:   mov    %edi,0xac(%r8)
  0x00000001102b82b9:   and    $0x1ffffe,%edi
  0x00000001102b82bf:   cmp    $0x0,%edi
  0x00000001102b82c2:   je     0x00000001102b87c0
  0x00000001102b82c8:   movabs $0x10668af80,%r8             ;   {metadata(method data for {method} {0x000000080009e760} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x00000001102b82d2:   addq   $0x1,0xf0(%r8)
  0x00000001102b82da:   movabs $0x10668b120,%rcx            ;   {metadata(method data for {method} {0x000000080009e708} 'getMemberNameOrNull' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x00000001102b82e4:   mov    0xac(%rcx),%r8d
  0x00000001102b82eb:   add    $0x2,%r8d
  0x00000001102b82ef:   mov    %r8d,0xac(%rcx)
  0x00000001102b82f6:   and    $0x1ffffe,%r8d
  0x00000001102b82fd:   cmp    $0x0,%r8d
  0x00000001102b8301:   je     0x00000001102b87e1
  0x00000001102b8307:   movabs $0x10668b120,%rcx            ;   {metadata(method data for {method} {0x000000080009e708} 'getMemberNameOrNull' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x00000001102b8311:   incl   0xf0(%rcx)
  0x00000001102b8317:   movabs $0x10668af80,%rcx            ;   {metadata(method data for {method} {0x000000080009e760} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x00000001102b8321:   incl   0x128(%rcx)
  0x00000001102b8327:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8331:   lea    0x1f0(%rcx),%rcx
  0x00000001102b8338:   movabs $0x61f037410,%r8             ;   {oop(a 'java/lang/invoke/MemberName'{0x000000061f037410} = {method} {0x0000000106617140} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b8342:   test   %r8,%r8
  0x00000001102b8345:   jne    0x00000001102b834b
  0x00000001102b8347:   orq    $0x1,(%rcx)
  0x00000001102b834b:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8355:   lea    0x210(%rcx),%rcx
  0x00000001102b835c:   movabs $0x61f0175b8,%r8             ;   {oop(a 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle'{0x000000061f0175b8})}
  0x00000001102b8366:   test   %r8,%r8
  0x00000001102b8369:   jne    0x00000001102b8372
  0x00000001102b836b:   orq    $0x1,0x8(%rcx)
  0x00000001102b8370:   jmp    0x00000001102b83be
  0x00000001102b8372:   movabs $0x800c73670,%r8             ;   {metadata('java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b837c:   xor    0x8(%rcx),%r8
  0x00000001102b8380:   test   $0xfffffffffffffffc,%r8
  0x00000001102b8387:   je     0x00000001102b83be
  0x00000001102b8389:   test   $0x2,%r8
  0x00000001102b8390:   jne    0x00000001102b83be
  0x00000001102b8392:   cmpq   $0x0,0x8(%rcx)
  0x00000001102b839a:   je     0x00000001102b83ba
  0x00000001102b839c:   cmpq   $0x1,0x8(%rcx)
  0x00000001102b83a4:   je     0x00000001102b83ba
  0x00000001102b83a6:   xor    0x8(%rcx),%r8
  0x00000001102b83aa:   test   $0xfffffffffffffffc,%r8
  0x00000001102b83b1:   je     0x00000001102b83be
  0x00000001102b83b3:   orq    $0x2,0x8(%rcx)
  0x00000001102b83b8:   jmp    0x00000001102b83be
  0x00000001102b83ba:   mov    %r8,0x8(%rcx)
  0x00000001102b83be:   mov    %rsi,%r8
  0x00000001102b83c1:   test   %r8,%r8
  0x00000001102b83c4:   jne    0x00000001102b83cd
  0x00000001102b83c6:   orq    $0x1,0x18(%rcx)
  0x00000001102b83cb:   jmp    0x00000001102b8419
  0x00000001102b83cd:   movabs $0x800006328,%r8             ;   {metadata({type array byte})}
  0x00000001102b83d7:   xor    0x18(%rcx),%r8
  0x00000001102b83db:   test   $0xfffffffffffffffc,%r8
  0x00000001102b83e2:   je     0x00000001102b8419
  0x00000001102b83e4:   test   $0x2,%r8
  0x00000001102b83eb:   jne    0x00000001102b8419
  0x00000001102b83ed:   cmpq   $0x0,0x18(%rcx)
  0x00000001102b83f5:   je     0x00000001102b8415
  0x00000001102b83f7:   cmpq   $0x1,0x18(%rcx)
  0x00000001102b83ff:   je     0x00000001102b8415
  0x00000001102b8401:   xor    0x18(%rcx),%r8
  0x00000001102b8405:   test   $0xfffffffffffffffc,%r8
  0x00000001102b840c:   je     0x00000001102b8419
  0x00000001102b840e:   orq    $0x2,0x18(%rcx)
  0x00000001102b8413:   jmp    0x00000001102b8419
  0x00000001102b8415:   mov    %r8,0x18(%rcx)
  0x00000001102b8419:   movabs $0x10668c688,%rcx            ;   {metadata(method data for {method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8423:   addq   $0x1,0x200(%rcx)
  0x00000001102b842b:   movabs $0x10668cb98,%rcx            ;   {metadata(method data for {method} {0x0000000106617140} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b8435:   mov    0xac(%rcx),%r8d
  0x00000001102b843c:   add    $0x2,%r8d
  0x00000001102b8440:   mov    %r8d,0xac(%rcx)
  0x00000001102b8447:   and    $0x1ffffe,%r8d
  0x00000001102b844e:   cmp    $0x0,%r8d
  0x00000001102b8452:   je     0x00000001102b8802
  0x00000001102b8458:   movabs $0x10668cb98,%rcx            ;   {metadata(method data for {method} {0x0000000106617140} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b8462:   addq   $0x1,0x160(%rcx)
  0x00000001102b846a:   movabs $0x10668cda8,%rcx            ;   {metadata(method data for {method} {0x0000000106616f48} 'index' '([BI)I' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b8474:   mov    0xac(%rcx),%r8d
  0x00000001102b847b:   add    $0x2,%r8d
  0x00000001102b847f:   mov    %r8d,0xac(%rcx)
  0x00000001102b8486:   and    $0x1ffffe,%r8d
  0x00000001102b848d:   cmp    $0x0,%r8d
  0x00000001102b8491:   je     0x00000001102b8823
  0x00000001102b8497:   mov    0xc(%rsi),%ecx               ; implicit exception: dispatches to 0x00000001102b8844
  0x00000001102b849a:   sub    $0x7,%ecx
  0x00000001102b849d:   movabs $0x10668cda8,%r8             ;   {metadata(method data for {method} {0x0000000106616f48} 'index' '([BI)I' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b84a7:   addq   $0x1,0xf0(%r8)
  0x00000001102b84af:   movabs $0x106684c80,%r8             ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x00000001102b84b9:   mov    0xac(%r8),%edi
  0x00000001102b84c0:   add    $0x2,%edi
  0x00000001102b84c3:   mov    %edi,0xac(%r8)
  0x00000001102b84ca:   and    $0x1ffffe,%edi
  0x00000001102b84d0:   cmp    $0x0,%edi
  0x00000001102b84d3:   je     0x00000001102b8849
  0x00000001102b84d9:   cmp    $0x0,%edx
  0x00000001102b84dc:   movabs $0x106684c80,%r8             ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x00000001102b84e6:   movabs $0xf0,%rdi
  0x00000001102b84f0:   jl     0x00000001102b8500
  0x00000001102b84f6:   movabs $0x100,%rdi
  0x00000001102b8500:   mov    (%r8,%rdi,1),%rbx
  0x00000001102b8504:   lea    0x1(%rbx),%rbx
  0x00000001102b8508:   mov    %rbx,(%r8,%rdi,1)
  0x00000001102b850c:   jl     0x00000001102b8704
  0x00000001102b8512:   cmp    %ecx,%edx
  0x00000001102b8514:   movabs $0x106684c80,%r8             ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x00000001102b851e:   movabs $0x120,%rdi
  0x00000001102b8528:   jge    0x00000001102b8538
  0x00000001102b852e:   movabs $0x110,%rdi
  0x00000001102b8538:   mov    (%r8,%rdi,1),%rbx
  0x00000001102b853c:   lea    0x1(%rbx),%rbx
  0x00000001102b8540:   mov    %rbx,(%r8,%rdi,1)
  0x00000001102b8544:   jge    0x00000001102b8704
  0x00000001102b854a:   movabs $0x10668cb98,%rcx            ;   {metadata(method data for {method} {0x0000000106617140} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b8554:   lea    0x1a8(%rcx),%rcx
  0x00000001102b855b:   mov    %rsi,%r8
  0x00000001102b855e:   movabs $0x800006328,%r8             ;   {metadata({type array byte})}
  0x00000001102b8568:   xor    0x8(%rcx),%r8
  0x00000001102b856c:   test   $0xfffffffffffffffc,%r8
  0x00000001102b8573:   je     0x00000001102b85aa
  0x00000001102b8575:   test   $0x2,%r8
  0x00000001102b857c:   jne    0x00000001102b85aa
  0x00000001102b857e:   cmpq   $0x0,0x8(%rcx)
  0x00000001102b8586:   je     0x00000001102b85a6
  0x00000001102b8588:   cmpq   $0x1,0x8(%rcx)
  0x00000001102b8590:   je     0x00000001102b85a6
  0x00000001102b8592:   xor    0x8(%rcx),%r8
  0x00000001102b8596:   test   $0xfffffffffffffffc,%r8
  0x00000001102b859d:   je     0x00000001102b85aa
  0x00000001102b859f:   orq    $0x2,0x8(%rcx)
  0x00000001102b85a4:   jmp    0x00000001102b85aa
  0x00000001102b85a6:   mov    %r8,0x8(%rcx)
  0x00000001102b85aa:   movabs $0x61fc02ae8,%rdi            ;   {oop(a 'jdk/internal/misc/Unsafe'{0x000000061fc02ae8})}
  0x00000001102b85b4:   mov    %rdi,%rcx
  0x00000001102b85b7:   movabs $0x10668cb98,%r8             ;   {metadata(method data for {method} {0x0000000106617140} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b85c1:   addq   $0x1,0x170(%r8)
  0x00000001102b85c9:   movslq %edx,%rdx
  0x00000001102b85cc:   mov    %rdx,%rcx
  0x00000001102b85cf:   movabs $0x10,%r10
  0x00000001102b85d9:   add    %r10,%rcx
  0x00000001102b85dc:   mov    %rsi,%rdx
  0x00000001102b85df:   mov    $0x0,%r8d
  0x00000001102b85e5:   mov    %rdi,%rsi
  0x00000001102b85e8:   nopl   0x0(%rax)
  0x00000001102b85ef:   callq  0x00000001102b6fe0           ; ImmutableOopMap {}
                                                            ;*invokevirtual getLongUnaligned {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@32 (line 118)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {optimized virtual_call}
  0x00000001102b85f4:   mov    %rax,%rcx
  0x00000001102b85f7:   movabs $0x3030303030303030,%r10
  0x00000001102b8601:   sub    %r10,%rcx
  0x00000001102b8604:   movabs $0x4646464646464646,%r10
  0x00000001102b860e:   add    %r10,%rax
  0x00000001102b8611:   or     %rcx,%rax
  0x00000001102b8614:   movabs $0x8080808080808080,%r10
  0x00000001102b861e:   and    %r10,%rax
  0x00000001102b8621:   movabs $0x0,%rsi
  0x00000001102b862b:   cmp    %rsi,%rax
  0x00000001102b862e:   movabs $0x106833fb0,%rax            ;   {metadata(method data for {method} {0x00000001068337c0} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b8638:   movabs $0x150,%rsi
  0x00000001102b8642:   jne    0x00000001102b8652
  0x00000001102b8648:   movabs $0x140,%rsi
  0x00000001102b8652:   mov    (%rax,%rsi,1),%rdx
  0x00000001102b8656:   lea    0x1(%rdx),%rdx
  0x00000001102b865a:   mov    %rdx,(%rax,%rsi,1)
  0x00000001102b865e:   jne    0x00000001102b86e9
  0x00000001102b8664:   movabs $0xa01,%rax
  0x00000001102b866e:   mov    %rax,%rsi
  0x00000001102b8671:   mov    %rcx,%rax
  0x00000001102b8674:   imul   %rsi,%rax
  0x00000001102b8678:   mov    $0x8,%ecx
  0x00000001102b867d:   mov    %rax,%rsi
  0x00000001102b8680:   sar    %cl,%rsi
  0x00000001102b8683:   movabs $0xff000000ff,%rdx
  0x00000001102b868d:   mov    %rsi,%rax
  0x00000001102b8690:   and    %rdx,%rax
  0x00000001102b8693:   movabs $0xf424000000064,%rcx
  0x00000001102b869d:   imul   %rcx,%rax
  0x00000001102b86a1:   mov    %rax,%rdi
  0x00000001102b86a4:   mov    $0x10,%ecx
  0x00000001102b86a9:   shr    %cl,%rsi
  0x00000001102b86ac:   and    %rdx,%rsi
  0x00000001102b86af:   movabs $0x271000000001,%rax
  0x00000001102b86b9:   mov    %rax,%rcx
  0x00000001102b86bc:   mov    %rsi,%rax
  0x00000001102b86bf:   imul   %rcx,%rax
  0x00000001102b86c3:   add    %rax,%rdi
  0x00000001102b86c6:   mov    $0x20,%ecx
  0x00000001102b86cb:   shr    %cl,%rdi
  0x00000001102b86ce:   mov    %edi,%edi
  0x00000001102b86d0:   mov    %rdi,%rax
  0x00000001102b86d3:   add    $0xf0,%rsp
  0x00000001102b86da:   pop    %rbp
  0x00000001102b86db:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x00000001102b86e2:   ja     0x00000001102b886a
  0x00000001102b86e8:   retq
  0x00000001102b86e9:   mov    $0xffffffff,%eax
  0x00000001102b86ee:   add    $0xf0,%rsp
  0x00000001102b86f5:   pop    %rbp
  0x00000001102b86f6:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x00000001102b86fd:   ja     0x00000001102b8880
  0x00000001102b8703:   retq
  0x00000001102b8704:   mov    %rsi,0xe0(%rsp)
  0x00000001102b870c:   movabs $0x106684c80,%rdi            ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x00000001102b8716:   addq   $0x1,0x130(%rdi)
  0x00000001102b871e:   movabs $0x61f016ee8,%rdi            ;   {oop(a 'jdk/internal/util/Preconditions$1'{0x000000061f016ee8})}
  0x00000001102b8728:   mov    %rdi,%rsi
  0x00000001102b872b:   nopl   0x0(%rax)
  0x00000001102b872f:   callq  0x000000010fca1080           ; ImmutableOopMap {[224]=Oop }
                                                            ;*invokestatic outOfBoundsCheckIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.internal.util.Preconditions::checkIndex@12 (line 266)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {static_call}
  0x00000001102b8734:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x00000001102b8896
  0x00000001102b8737:   jmpq   0x00000001102b88ba
  0x00000001102b873c:   movabs $0x1068337c0,%r10            ;   {metadata({method} {0x00000001068337c0} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001102b8746:   mov    %r10,0x8(%rsp)
  0x00000001102b874b:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b8753:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@-1 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b8758:   jmpq   0x00000001102b7ffc
  0x00000001102b875d:   movabs $0x80038d660,%r10            ;   {metadata({method} {0x000000080038d660} 'guard_LI_J' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;ILjava/lang/invoke/VarHandle$AccessDescriptor;)J' in 'java/lang/invoke/VarHandleGuards')}
  0x00000001102b8767:   mov    %r10,0x8(%rsp)
  0x00000001102b876c:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b8774:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop r8=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@-1 (line 796)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b8779:   jmpq   0x00000001102b811e
  0x00000001102b877e:   movabs $0x8000d0b00,%r10            ;   {metadata({method} {0x00000008000d0b00} 'checkExactAccessMode' '(Ljava/lang/invoke/VarHandle$AccessDescriptor;)V' in 'java/lang/invoke/VarHandle')}
  0x00000001102b8788:   mov    %r10,0x8(%rsp)
  0x00000001102b878d:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b8795:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandle::checkExactAccessMode@-1 (line 2042)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@2 (line 796)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b879a:   jmpq   0x00000001102b8182
  0x00000001102b879f:   movabs $0x8000ca028,%r10            ;   {metadata({method} {0x00000008000ca028} 'isDirect' '()Z' in 'java/lang/invoke/VarHandle')}
  0x00000001102b87a9:   mov    %r10,0x8(%rsp)
  0x00000001102b87ae:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b87b6:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandle::isDirect@-1 (line 497)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@6 (line 797)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b87bb:   jmpq   0x00000001102b825f
  0x00000001102b87c0:   movabs $0x80009e760,%r10            ;   {metadata({method} {0x000000080009e760} 'getMemberName' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x00000001102b87ca:   mov    %r10,0x8(%rsp)
  0x00000001102b87cf:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b87d7:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarForm::getMemberName@-1 (line 112)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@42 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b87dc:   jmpq   0x00000001102b82c8
  0x00000001102b87e1:   movabs $0x80009e708,%r10            ;   {metadata({method} {0x000000080009e708} 'getMemberNameOrNull' '(I)Ljava/lang/invoke/MemberName;' in 'java/lang/invoke/VarForm')}
  0x00000001102b87eb:   mov    %r10,0x8(%rsp)
  0x00000001102b87f0:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b87f8:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarForm::getMemberNameOrNull@-1 (line 121)
                                                            ; - java.lang.invoke.VarForm::getMemberName@2 (line 112)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@42 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b87fd:   jmpq   0x00000001102b8307
  0x00000001102b8802:   movabs $0x106617140,%r10            ;   {metadata({method} {0x0000000106617140} 'get' '(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)J' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b880c:   mov    %r10,0x8(%rsp)
  0x00000001102b8811:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b8819:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@-1 (line 116)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b881e:   jmpq   0x00000001102b8458
  0x00000001102b8823:   movabs $0x106616f48,%r10            ;   {metadata({method} {0x0000000106616f48} 'index' '([BI)I' in 'java/lang/invoke/VarHandleByteArrayAsLongs$ArrayHandle')}
  0x00000001102b882d:   mov    %r10,0x8(%rsp)
  0x00000001102b8832:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b883a:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@-1 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b883f:   jmpq   0x00000001102b8497
  0x00000001102b8844:   callq  0x000000010fd464a0           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@2 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001102b8849:   movabs $0x8003a5f50,%r10            ;   {metadata({method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x00000001102b8853:   mov    %r10,0x8(%rsp)
  0x00000001102b8858:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001102b8860:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.internal.util.Preconditions::checkIndex@-1 (line 265)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001102b8865:   jmpq   0x00000001102b84d9
  0x00000001102b886a:   movabs $0x1102b86db,%r10            ;   {internal_word}
  0x00000001102b8874:   mov    %r10,0x358(%r15)
  0x00000001102b887b:   jmpq   0x000000010fca7100           ;   {runtime_call SafepointBlob}
  0x00000001102b8880:   movabs $0x1102b86f6,%r10            ;   {internal_word}
  0x00000001102b888a:   mov    %r10,0x358(%r15)
  0x00000001102b8891:   jmpq   0x000000010fca7100           ;   {runtime_call SafepointBlob}
  0x00000001102b8896:   callq  0x000000010fd464a0           ; ImmutableOopMap {[224]=Oop rax=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@15 (line 266)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001102b889b:   nop
  0x00000001102b889c:   nop
  0x00000001102b889d:   mov    0x3d0(%r15),%rax
  0x00000001102b88a4:   movq   $0x0,0x3d0(%r15)
  0x00000001102b88af:   movq   $0x0,0x3d8(%r15)
  0x00000001102b88ba:   add    $0xf0,%rsp
  0x00000001102b88c1:   pop    %rbp
  0x00000001102b88c2:   jmpq   0x000000010fd45580           ;   {runtime_call unwind_exception Runtime1 stub}
  0x00000001102b88c7:   hlt
  0x00000001102b88c8:   hlt
  0x00000001102b88c9:   hlt
  0x00000001102b88ca:   hlt
  0x00000001102b88cb:   hlt
  0x00000001102b88cc:   hlt
  0x00000001102b88cd:   hlt
  0x00000001102b88ce:   hlt
  0x00000001102b88cf:   hlt
  0x00000001102b88d0:   hlt
  0x00000001102b88d1:   hlt
  0x00000001102b88d2:   hlt
  0x00000001102b88d3:   hlt
  0x00000001102b88d4:   hlt
  0x00000001102b88d5:   hlt
  0x00000001102b88d6:   hlt
  0x00000001102b88d7:   hlt
  0x00000001102b88d8:   hlt
  0x00000001102b88d9:   hlt
  0x00000001102b88da:   hlt
  0x00000001102b88db:   hlt
  0x00000001102b88dc:   hlt
  0x00000001102b88dd:   hlt
  0x00000001102b88de:   hlt
  0x00000001102b88df:   hlt
[Stub Code]
  0x00000001102b88e0:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x00000001102b88e5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001102b88ef:   jmpq   0x00000001102b88ef           ;   {runtime_call const_jargs+-98771041}
  0x00000001102b88f4:   nop
  0x00000001102b88f5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001102b88ff:   jmpq   0x00000001102b88ff           ;   {runtime_call const_jargs+-98771041}
[Exception Handler]
  0x00000001102b8904:   callq  0x000000010fd48280           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x00000001102b8909:   movabs $0x107a8ce43,%rdi            ;   {external_word}
  0x00000001102b8913:   and    $0xfffffffffffffff0,%rsp
  0x00000001102b8917:   callq  0x000000010772fc50           ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x00000001102b891c:   hlt
[Deopt Handler Code]
  0x00000001102b891d:   movabs $0x1102b891d,%r10            ;   {section_word}
  0x00000001102b8927:   push   %r10
  0x00000001102b8929:   jmpq   0x000000010fca63a0           ;   {runtime_call DeoptimizationBlob}
  0x00000001102b892e:   hlt
  0x00000001102b892f:   hlt
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     365  568       4       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications (86 bytes)
 total in heap  [0x0000000117754110,0x0000000117754520] = 1040
 relocation     [0x0000000117754270,0x0000000117754288] = 24
 main code      [0x00000001177542a0,0x00000001177543e0] = 320
 stub code      [0x00000001177543e0,0x00000001177543f8] = 24
 oops           [0x00000001177543f8,0x0000000117754418] = 32
 metadata       [0x0000000117754418,0x0000000117754450] = 56
 scopes data    [0x0000000117754450,0x00000001177544b8] = 104
 scopes pcs     [0x00000001177544b8,0x0000000117754508] = 80
 dependencies   [0x0000000117754508,0x0000000117754510] = 8
 nul chk table  [0x0000000117754510,0x0000000117754520] = 16

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001068337c0} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  0x00000001177542a0:   mov    %eax,-0x14000(%rsp)
  0x00000001177542a7:   push   %rbp
  0x00000001177542a8:   sub    $0x20,%rsp
  0x00000001177542ac:   mov    0xc(%rsi),%r10d              ; implicit exception: dispatches to 0x00000001177543a0
  0x00000001177542b0:   add    $0xfffffff9,%r10d
  0x00000001177542b4:   test   %r10d,%r10d
  0x00000001177542b7:   jl     0x0000000117754388
  0x00000001177542bd:   data16 xchg %ax,%ax
  0x00000001177542c0:   cmp    %r10d,%edx
  0x00000001177542c3:   jae    0x000000011775436e
  0x00000001177542c9:   mov    0x10(%rsi,%rdx,1),%r10
  0x00000001177542ce:   movabs $0xcfcfcfcfcfcfcfd0,%r11
  0x00000001177542d8:   mov    %r10,%r8
  0x00000001177542db:   add    %r11,%r8
  0x00000001177542de:   movabs $0x8080808080808080,%r11
  0x00000001177542e8:   movabs $0x4646464646464646,%r9
  0x00000001177542f2:   add    %r9,%r10
  0x00000001177542f5:   or     %r8,%r10
  0x00000001177542f8:   and    %r11,%r10
  0x00000001177542fb:   nopl   0x0(%rax,%rax,1)
  0x0000000117754300:   test   %r10,%r10
  0x0000000117754303:   jne    0x0000000117754367
  0x0000000117754305:   imul   $0xa01,%r8,%r10
  0x000000011775430c:   mov    %r10,%r11
  0x000000011775430f:   sar    $0x8,%r11
  0x0000000117754313:   shr    $0x8,%r10
  0x0000000117754317:   shr    $0x10,%r11
  0x000000011775431b:   movabs $0xff000000ff,%r8
  0x0000000117754325:   and    %r8,%r10
  0x0000000117754328:   and    %r8,%r11
  0x000000011775432b:   movabs $0x271000000001,%r8
  0x0000000117754335:   imul   %r8,%r11
  0x0000000117754339:   movabs $0xf424000000064,%r8
  0x0000000117754343:   imul   %r8,%r10
  0x0000000117754347:   add    %r11,%r10
  0x000000011775434a:   shr    $0x20,%r10
  0x000000011775434e:   mov    %r10d,%eax
  0x0000000117754351:   vzeroupper
  0x0000000117754354:   add    $0x20,%rsp
  0x0000000117754358:   pop    %rbp
  0x0000000117754359:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000117754360:   ja     0x00000001177543b0
  0x0000000117754366:   retq
  0x0000000117754367:   mov    $0xffffffff,%eax
  0x000000011775436c:   jmp    0x0000000117754351
  0x000000011775436e:   mov    %rsi,%rbp
  0x0000000117754371:   mov    %edx,(%rsp)
  0x0000000117754374:   mov    %r10d,0x4(%rsp)
  0x0000000117754379:   mov    $0xffffffe4,%esi
  0x000000011775437e:   xchg   %ax,%ax
  0x0000000117754380:   vzeroupper
  0x0000000117754383:   callq  0x000000010fca6000           ; ImmutableOopMap {rbp=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000117754388:   mov    %rsi,%rbp
  0x000000011775438b:   mov    %edx,(%rsp)
  0x000000011775438e:   mov    %r10d,0x4(%rsp)
  0x0000000117754393:   mov    $0xffffffcc,%esi
  0x0000000117754398:   vzeroupper
  0x000000011775439b:   callq  0x000000010fca6000           ; ImmutableOopMap {rbp=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00000001177543a0:   mov    $0xffffff5e,%esi
  0x00000001177543a5:   data16 xchg %ax,%ax
  0x00000001177543a8:   vzeroupper
  0x00000001177543ab:   callq  0x000000010fca6000           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@2 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x00000001177543b0:   movabs $0x117754359,%r10            ;   {internal_word}
  0x00000001177543ba:   mov    %r10,0x358(%r15)
  0x00000001177543c1:   jmpq   0x000000010fca7100           ;   {runtime_call SafepointBlob}
  0x00000001177543c6:   hlt
  0x00000001177543c7:   hlt
  0x00000001177543c8:   hlt
  0x00000001177543c9:   hlt
  0x00000001177543ca:   hlt
  0x00000001177543cb:   hlt
  0x00000001177543cc:   hlt
  0x00000001177543cd:   hlt
  0x00000001177543ce:   hlt
  0x00000001177543cf:   hlt
  0x00000001177543d0:   hlt
  0x00000001177543d1:   hlt
  0x00000001177543d2:   hlt
  0x00000001177543d3:   hlt
  0x00000001177543d4:   hlt
  0x00000001177543d5:   hlt
  0x00000001177543d6:   hlt
  0x00000001177543d7:   hlt
  0x00000001177543d8:   hlt
  0x00000001177543d9:   hlt
  0x00000001177543da:   hlt
  0x00000001177543db:   hlt
  0x00000001177543dc:   hlt
  0x00000001177543dd:   hlt
  0x00000001177543de:   hlt
  0x00000001177543df:   hlt
[Exception Handler]
  0x00000001177543e0:   jmpq   0x000000010fd45880           ;   {no_reloc}
[Deopt Handler Code]
  0x00000001177543e5:   callq  0x00000001177543ea
  0x00000001177543ea:   subq   $0x5,(%rsp)
  0x00000001177543ef:   jmpq   0x000000010fca63a0           ;   {runtime_call DeoptimizationBlob}
  0x00000001177543f4:   hlt
  0x00000001177543f5:   hlt
  0x00000001177543f6:   hlt
  0x00000001177543f7:   hlt
--------------------------------------------------------------------------------
Trying to reach a confidence level of 99.8 % which only deviates by 1 % from the average measured duration.

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)     555  850       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd (55 bytes)
 total in heap  [0x0000000110327690,0x000000011032a380] = 11504
 relocation     [0x00000001103277f0,0x0000000110327ab8] = 712
 main code      [0x0000000110327ac0,0x0000000110329800] = 7488
 stub code      [0x0000000110329800,0x0000000110329900] = 256
 oops           [0x0000000110329900,0x0000000110329968] = 104
 metadata       [0x0000000110329968,0x0000000110329a58] = 240
 scopes data    [0x0000000110329a58,0x0000000110329e80] = 1064
 scopes pcs     [0x0000000110329e80,0x000000011032a2f0] = 1136
 dependencies   [0x000000011032a2f0,0x000000011032a2f8] = 8
 nul chk table  [0x000000011032a2f8,0x000000011032a380] = 136

--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  #           [sp+0x130]  (sp of caller)
  0x0000000110327ac0:   mov    %eax,-0x14000(%rsp)
  0x0000000110327ac7:   push   %rbp
  0x0000000110327ac8:   sub    $0x120,%rsp
  0x0000000110327acf:   mov    %rdx,%rbx
  0x0000000110327ad2:   movabs $0x106841328,%rcx            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000110327adc:   mov    0xac(%rcx),%edx
  0x0000000110327ae2:   add    $0x2,%edx
  0x0000000110327ae5:   mov    %edx,0xac(%rcx)
  0x0000000110327aeb:   and    $0x7fe,%edx
  0x0000000110327af1:   cmp    $0x0,%edx
  0x0000000110327af4:   je     0x0000000110329294
  0x0000000110327afa:   movabs $0x106841328,%rcx            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000110327b04:   addq   $0x1,0xf0(%rcx)
  0x0000000110327b0c:   movabs $0x106739a48,%rcx            ;   {metadata(method data for {method} {0x00000001066bfb88} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327b16:   mov    0xac(%rcx),%edx
  0x0000000110327b1c:   add    $0x2,%edx
  0x0000000110327b1f:   mov    %edx,0xac(%rcx)
  0x0000000110327b25:   and    $0x1ffffe,%edx
  0x0000000110327b2b:   cmp    $0x0,%edx
  0x0000000110327b2e:   je     0x00000001103292b5
  0x0000000110327b34:   movabs $0x61f0b24c8,%rcx            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f0b24c8})}
  0x0000000110327b3e:   movabs $0x106739a48,%rdx            ;   {metadata(method data for {method} {0x00000001066bfb88} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327b48:   mov    0x8(%rcx),%ecx
  0x0000000110327b4b:   movabs $0x800000000,%r10
  0x0000000110327b55:   add    %r10,%rcx
  0x0000000110327b58:   cmp    0x100(%rdx),%rcx
  0x0000000110327b5f:   jne    0x0000000110327b6e
  0x0000000110327b61:   addq   $0x1,0x108(%rdx)
  0x0000000110327b69:   jmpq   0x0000000110327bd4
  0x0000000110327b6e:   cmp    0x110(%rdx),%rcx
  0x0000000110327b75:   jne    0x0000000110327b84
  0x0000000110327b77:   addq   $0x1,0x118(%rdx)
  0x0000000110327b7f:   jmpq   0x0000000110327bd4
  0x0000000110327b84:   cmpq   $0x0,0x100(%rdx)
  0x0000000110327b8f:   jne    0x0000000110327ba8
  0x0000000110327b91:   mov    %rcx,0x100(%rdx)
  0x0000000110327b98:   movq   $0x1,0x108(%rdx)
  0x0000000110327ba3:   jmpq   0x0000000110327bd4
  0x0000000110327ba8:   cmpq   $0x0,0x110(%rdx)
  0x0000000110327bb3:   jne    0x0000000110327bcc
  0x0000000110327bb5:   mov    %rcx,0x110(%rdx)
  0x0000000110327bbc:   movq   $0x1,0x118(%rdx)
  0x0000000110327bc7:   jmpq   0x0000000110327bd4
  0x0000000110327bcc:   addq   $0x1,0xf0(%rdx)
  0x0000000110327bd4:   mov    0xc(%rsi),%ecx               ; implicit exception: dispatches to 0x00000001103292d6
  0x0000000110327bd7:   movabs $0x106739a48,%rdx            ;   {metadata(method data for {method} {0x00000001066bfb88} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327be1:   addq   $0x1,0x128(%rdx)
  0x0000000110327be9:   movabs $0x106733588,%rdx            ;   {metadata(method data for {method} {0x000000010661cee8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x0000000110327bf3:   mov    0xac(%rdx),%r8d
  0x0000000110327bfa:   add    $0x2,%r8d
  0x0000000110327bfe:   mov    %r8d,0xac(%rdx)
  0x0000000110327c05:   and    $0x1ffffe,%r8d
  0x0000000110327c0c:   cmp    $0x0,%r8d
  0x0000000110327c10:   je     0x00000001103292db
  0x0000000110327c16:   sub    $0x7,%ecx
  0x0000000110327c19:   movabs $0x106733588,%rdx            ;   {metadata(method data for {method} {0x000000010661cee8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x0000000110327c23:   addq   $0x1,0x150(%rdx)
  0x0000000110327c2b:   movabs $0x106730098,%rdx            ;   {metadata(method data for {method} {0x000000080007aaa0} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x0000000110327c35:   mov    0xac(%rdx),%r8d
  0x0000000110327c3c:   add    $0x2,%r8d
  0x0000000110327c40:   mov    %r8d,0xac(%rdx)
  0x0000000110327c47:   and    $0x1ffffe,%r8d
  0x0000000110327c4e:   cmp    $0x0,%r8d
  0x0000000110327c52:   je     0x00000001103292fc
  0x0000000110327c58:   movabs $0x106730098,%rdx            ;   {metadata(method data for {method} {0x000000080007aaa0} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x0000000110327c62:   addq   $0x1,0xf0(%rdx)
  0x0000000110327c6a:   movabs $0x106684c80,%rdx            ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x0000000110327c74:   mov    0xac(%rdx),%r8d
  0x0000000110327c7b:   add    $0x2,%r8d
  0x0000000110327c7f:   mov    %r8d,0xac(%rdx)
  0x0000000110327c86:   and    $0x1ffffe,%r8d
  0x0000000110327c8d:   cmp    $0x0,%r8d
  0x0000000110327c91:   je     0x000000011032931d
  0x0000000110327c97:   cmp    $0x0,%ebx
  0x0000000110327c9a:   movabs $0x106684c80,%rdx            ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x0000000110327ca4:   movabs $0xf0,%r8
  0x0000000110327cae:   jl     0x0000000110327cbe
  0x0000000110327cb4:   movabs $0x100,%r8
  0x0000000110327cbe:   mov    (%rdx,%r8,1),%r9
  0x0000000110327cc2:   lea    0x1(%r9),%r9
  0x0000000110327cc6:   mov    %r9,(%rdx,%r8,1)
  0x0000000110327cca:   jl     0x000000011032925a
  0x0000000110327cd0:   cmp    %ecx,%ebx
  0x0000000110327cd2:   movabs $0x106684c80,%rdx            ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x0000000110327cdc:   movabs $0x120,%r8
  0x0000000110327ce6:   jge    0x0000000110327cf6
  0x0000000110327cec:   movabs $0x110,%r8
  0x0000000110327cf6:   mov    (%rdx,%r8,1),%r9
  0x0000000110327cfa:   lea    0x1(%r9),%r9
  0x0000000110327cfe:   mov    %r9,(%rdx,%r8,1)
  0x0000000110327d02:   jge    0x000000011032925a
  0x0000000110327d08:   movabs $0x61f0b24c8,%rcx            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f0b24c8})}
  0x0000000110327d12:   mov    %rcx,%rdx
  0x0000000110327d15:   movabs $0x106739a48,%r8             ;   {metadata(method data for {method} {0x00000001066bfb88} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327d1f:   addq   $0x1,0x170(%r8)
  0x0000000110327d27:   movabs $0x106732ab0,%rdx            ;   {metadata(method data for {method} {0x00000001066cfbd0} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000110327d31:   mov    0xac(%rdx),%r8d
  0x0000000110327d38:   add    $0x2,%r8d
  0x0000000110327d3c:   mov    %r8d,0xac(%rdx)
  0x0000000110327d43:   and    $0x1ffffe,%r8d
  0x0000000110327d4a:   cmp    $0x0,%r8d
  0x0000000110327d4e:   je     0x000000011032933e
  0x0000000110327d54:   movabs $0x106732ab0,%rdx            ;   {metadata(method data for {method} {0x00000001066cfbd0} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000110327d5e:   addq   $0x1,0xf0(%rdx)
  0x0000000110327d66:   movabs $0x10672f800,%rcx            ;   {metadata(method data for {method} {0x000000010654cdd0} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x0000000110327d70:   mov    0xac(%rcx),%edx
  0x0000000110327d76:   add    $0x2,%edx
  0x0000000110327d79:   mov    %edx,0xac(%rcx)
  0x0000000110327d7f:   and    $0x1ffffe,%edx
  0x0000000110327d85:   cmp    $0x0,%edx
  0x0000000110327d88:   je     0x000000011032935f
  0x0000000110327d8e:   movabs $0x10672f800,%rcx            ;   {metadata(method data for {method} {0x000000010654cdd0} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x0000000110327d98:   incl   0x100(%rcx)
  0x0000000110327d9e:   movabs $0x61f0bbc10,%rcx            ;   {oop(a 'jdk/incubator/vector/Short128Vector'{0x000000061f0bbc10})}
  0x0000000110327da8:   mov    %rcx,%rdx
  0x0000000110327dab:   movabs $0x106739a48,%r8             ;   {metadata(method data for {method} {0x00000001066bfb88} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327db5:   addq   $0x1,0x1a8(%r8)
  0x0000000110327dbd:   movabs $0x106739c78,%rdx            ;   {metadata(method data for {method} {0x00000001066e3b00} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000110327dc7:   mov    0xac(%rdx),%r8d
  0x0000000110327dce:   add    $0x2,%r8d
  0x0000000110327dd2:   mov    %r8d,0xac(%rdx)
  0x0000000110327dd9:   and    $0x1ffffe,%r8d
  0x0000000110327de0:   cmp    $0x0,%r8d
  0x0000000110327de4:   je     0x0000000110329380
  0x0000000110327dea:   mov    %rcx,%rdx
  0x0000000110327ded:   movabs $0x106739c78,%r8             ;   {metadata(method data for {method} {0x00000001066e3b00} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000110327df7:   addq   $0x1,0xf0(%r8)
  0x0000000110327dff:   movabs $0x106739da8,%rdx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327e09:   mov    0xac(%rdx),%r8d
  0x0000000110327e10:   add    $0x2,%r8d
  0x0000000110327e14:   mov    %r8d,0xac(%rdx)
  0x0000000110327e1b:   and    $0x1ffffe,%r8d
  0x0000000110327e22:   cmp    $0x0,%r8d
  0x0000000110327e26:   je     0x00000001103293a1
  0x0000000110327e2c:   movabs $0x106739da8,%rdx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327e36:   addq   $0x1,0xf0(%rdx)
  0x0000000110327e3e:   movabs $0x1067301e0,%rcx            ;   {metadata(method data for {method} {0x00000001066e0a08} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000110327e48:   mov    0xac(%rcx),%edx
  0x0000000110327e4e:   add    $0x2,%edx
  0x0000000110327e51:   mov    %edx,0xac(%rcx)
  0x0000000110327e57:   and    $0x1ffffe,%edx
  0x0000000110327e5d:   cmp    $0x0,%edx
  0x0000000110327e60:   je     0x00000001103293c2
  0x0000000110327e66:   movabs $0x61f0b24c8,%rcx            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f0b24c8})}
  0x0000000110327e70:   mov    %rcx,%rdx
  0x0000000110327e73:   movabs $0x106739da8,%r8             ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327e7d:   addq   $0x1,0x128(%r8)
  0x0000000110327e85:   mov    %rcx,%rdx
  0x0000000110327e88:   movabs $0x106739da8,%r8             ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327e92:   addq   $0x1,0x160(%r8)
  0x0000000110327e9a:   movabs $0x106732c28,%rdx            ;   {metadata(method data for {method} {0x00000001066cf258} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000110327ea4:   mov    0xac(%rdx),%r8d
  0x0000000110327eab:   add    $0x2,%r8d
  0x0000000110327eaf:   mov    %r8d,0xac(%rdx)
  0x0000000110327eb6:   and    $0x1ffffe,%r8d
  0x0000000110327ebd:   cmp    $0x0,%r8d
  0x0000000110327ec1:   je     0x00000001103293e3
  0x0000000110327ec7:   movabs $0x106739da8,%rdx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327ed1:   addq   $0x1,0x198(%rdx)
  0x0000000110327ed9:   movabs $0x106739da8,%rcx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327ee3:   addq   $0x1,0x1d0(%rcx)
  0x0000000110327eeb:   movabs $0x10673a040,%rcx            ;   {metadata(method data for {method} {0x00000001066c1d50} 'charArrayAddress' '([CI)J' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327ef5:   mov    0xac(%rcx),%edx
  0x0000000110327efb:   add    $0x2,%edx
  0x0000000110327efe:   mov    %edx,0xac(%rcx)
  0x0000000110327f04:   and    $0x1ffffe,%edx
  0x0000000110327f0a:   cmp    $0x0,%edx
  0x0000000110327f0d:   je     0x0000000110329404
  0x0000000110327f13:   movabs $0x10672f0a0,%rcx            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000110327f1d:   lea    0x1c8(%rcx),%rcx
  0x0000000110327f24:   movabs $0x61f0bed00,%rdx            ;   {oop(a 'java/lang/invoke/BoundMethodHandle$Species_L'{0x000000061f0bed00})}
  0x0000000110327f2e:   mov    %rdx,%r8
  0x0000000110327f31:   test   %r8,%r8
  0x0000000110327f34:   jne    0x0000000110327f3a
  0x0000000110327f36:   orq    $0x1,(%rcx)
  0x0000000110327f3a:   movabs $0x106739da8,%rcx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110327f44:   addq   $0x1,0x1e0(%rcx)
  0x0000000110327f4c:   movslq %ebx,%r8
  0x0000000110327f4f:   mov    $0x1,%ecx
  0x0000000110327f54:   shl    %cl,%r8
  0x0000000110327f57:   mov    %r8,%r9
  0x0000000110327f5a:   movabs $0x10,%r10
  0x0000000110327f64:   add    %r10,%r9
  0x0000000110327f67:   movabs $0x10672f0a0,%rcx            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000110327f71:   mov    0xac(%rcx),%r8d
  0x0000000110327f78:   add    $0x2,%r8d
  0x0000000110327f7c:   mov    %r8d,0xac(%rcx)
  0x0000000110327f83:   and    $0x1ffffe,%r8d
  0x0000000110327f8a:   cmp    $0x0,%r8d
  0x0000000110327f8e:   je     0x0000000110329425
  0x0000000110327f94:   movabs $0x106800490,%rcx            ;   {metadata(method data for {method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000110327f9e:   lea    0x180(%rcx),%rcx
  0x0000000110327fa5:   test   %rdx,%rdx
  0x0000000110327fa8:   jne    0x0000000110327fae
  0x0000000110327faa:   orq    $0x1,(%rcx)
  0x0000000110327fae:   movabs $0x10672f0a0,%rdx            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000110327fb8:   addq   $0x1,0x128(%rdx)
  0x0000000110327fc0:   movabs $0x106800490,%rdx            ;   {metadata(method data for {method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000110327fca:   mov    0xac(%rdx),%ecx
  0x0000000110327fd0:   add    $0x2,%ecx
  0x0000000110327fd3:   mov    %ecx,0xac(%rdx)
  0x0000000110327fd9:   and    $0x1ffffe,%ecx
  0x0000000110327fdf:   cmp    $0x0,%ecx
  0x0000000110327fe2:   je     0x0000000110329446
  0x0000000110327fe8:   movabs $0x10672f0a0,%rdx            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000110327ff2:   lea    0x160(%rdx),%rdx
  0x0000000110327ff9:   movabs $0x61f0beb80,%rcx            ;   {oop(a 'jdk/incubator/vector/ShortVector$$Lambda$82+0x0000000800c22f88'{0x000000061f0beb80})}
  0x0000000110328003:   mov    %rcx,%r8
  0x0000000110328006:   test   %r8,%r8
  0x0000000110328009:   jne    0x000000011032800f
  0x000000011032800b:   orq    $0x1,(%rdx)
  0x000000011032800f:   movabs $0x106739da8,%rdx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110328019:   lea    0x1f0(%rdx),%rdx
  0x0000000110328020:   test   %rcx,%rcx
  0x0000000110328023:   jne    0x000000011032802b
  0x0000000110328025:   orq    $0x1,(%rdx)
  0x0000000110328029:   jmp    0x0000000110328071
  0x000000011032802b:   movabs $0x800c22f88,%rcx            ;   {metadata('jdk/incubator/vector/ShortVector$$Lambda$82+0x0000000800c22f88')}
  0x0000000110328035:   xor    (%rdx),%rcx
  0x0000000110328038:   test   $0xfffffffffffffffc,%rcx
  0x000000011032803f:   je     0x0000000110328071
  0x0000000110328041:   test   $0x2,%rcx
  0x0000000110328048:   jne    0x0000000110328071
  0x000000011032804a:   cmpq   $0x0,(%rdx)
  0x0000000110328051:   je     0x000000011032806e
  0x0000000110328053:   cmpq   $0x1,(%rdx)
  0x000000011032805a:   je     0x000000011032806e
  0x000000011032805c:   xor    (%rdx),%rcx
  0x000000011032805f:   test   $0xfffffffffffffffc,%rcx
  0x0000000110328066:   je     0x0000000110328071
  0x0000000110328068:   orq    $0x2,(%rdx)
  0x000000011032806c:   jmp    0x0000000110328071
  0x000000011032806e:   mov    %rcx,(%rdx)
  0x0000000110328071:   movabs $0x106739da8,%rdx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000011032807b:   addq   $0x1,0x200(%rdx)
  0x0000000110328083:   movabs $0x7ffb00230,%rdx            ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x000000011032808d:   mov    %rsi,%rdi
  0x0000000110328090:   movabs $0x61f0b2510,%rsi            ;   {oop(a 'java/lang/Class'{0x000000061f0b2510} = 'jdk/incubator/vector/Short128Vector')}
  0x000000011032809a:   mov    $0x8,%ecx
  0x000000011032809f:   mov    %rdi,%r8
  0x00000001103280a2:   mov    %ebx,(%rsp)
  0x00000001103280a5:   movabs $0x61f0b24c8,%r10            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f0b24c8})}
  0x00000001103280af:   mov    %r10,0x8(%rsp)
  0x00000001103280b4:   movabs $0x61f0beb80,%r10            ;   {oop(a 'jdk/incubator/vector/ShortVector$$Lambda$82+0x0000000800c22f88'{0x000000061f0beb80})}
  0x00000001103280be:   mov    %r10,0x10(%rsp)
  0x00000001103280c3:   nopl   0x0(%rax)
  0x00000001103280c7:   callq  0x0000000110316d40           ; ImmutableOopMap {}
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@31 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x00000001103280cc:   cmp    $0x0,%rax
  0x00000001103280d0:   jne    0x00000001103280e8
  0x00000001103280d2:   movabs $0x106739da8,%rbx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103280dc:   orb    $0x1,0x209(%rbx)
  0x00000001103280e3:   jmpq   0x00000001103281bb
  0x00000001103280e8:   movabs $0x800c7e8c0,%rsi            ;   {metadata('jdk/incubator/vector/ShortVector')}
  0x00000001103280f2:   mov    0x8(%rax),%ebx
  0x00000001103280f5:   movabs $0x800000000,%r10
  0x00000001103280ff:   add    %r10,%rbx
  0x0000000110328102:   cmp    0x58(%rbx),%rsi
  0x0000000110328106:   jne    0x000000011032819f
  0x000000011032810c:   movabs $0x106739da8,%rbx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110328116:   mov    0x8(%rax),%esi
  0x0000000110328119:   movabs $0x800000000,%r10
  0x0000000110328123:   add    %r10,%rsi
  0x0000000110328126:   cmp    0x220(%rbx),%rsi
  0x000000011032812d:   jne    0x000000011032813c
  0x000000011032812f:   addq   $0x1,0x228(%rbx)
  0x0000000110328137:   jmpq   0x00000001103281bb
  0x000000011032813c:   cmp    0x230(%rbx),%rsi
  0x0000000110328143:   jne    0x0000000110328152
  0x0000000110328145:   addq   $0x1,0x238(%rbx)
  0x000000011032814d:   jmpq   0x00000001103281bb
  0x0000000110328152:   cmpq   $0x0,0x220(%rbx)
  0x000000011032815d:   jne    0x0000000110328176
  0x000000011032815f:   mov    %rsi,0x220(%rbx)
  0x0000000110328166:   movq   $0x1,0x228(%rbx)
  0x0000000110328171:   jmpq   0x00000001103281bb
  0x0000000110328176:   cmpq   $0x0,0x230(%rbx)
  0x0000000110328181:   jne    0x000000011032819a
  0x0000000110328183:   mov    %rsi,0x230(%rbx)
  0x000000011032818a:   movq   $0x1,0x238(%rbx)
  0x0000000110328195:   jmpq   0x00000001103281bb
  0x000000011032819a:   jmpq   0x00000001103281bb
  0x000000011032819f:   movabs $0x106739da8,%rbx            ;   {metadata(method data for {method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103281a9:   subq   $0x1,0x210(%rbx)
  0x00000001103281b1:   jmpq   0x0000000110329467
  0x00000001103281b6:   jmpq   0x00000001103281bb
  0x00000001103281bb:   mov    %rax,%rdi
  0x00000001103281be:   cmp    (%rdi),%rax                  ; implicit exception: dispatches to 0x0000000110329470
  0x00000001103281c1:   mov    %rdi,%rdx
  0x00000001103281c4:   movabs $0x106841328,%rsi            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x00000001103281ce:   addq   $0x1,0x100(%rsi)
  0x00000001103281d6:   movabs $0x10673a160,%rdx            ;   {metadata(method data for {method} {0x00000001066babe8} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103281e0:   mov    0xac(%rdx),%esi
  0x00000001103281e6:   add    $0x2,%esi
  0x00000001103281e9:   mov    %esi,0xac(%rdx)
  0x00000001103281ef:   and    $0x1ffffe,%esi
  0x00000001103281f5:   cmp    $0x0,%esi
  0x00000001103281f8:   je     0x0000000110329475
  0x00000001103281fe:   mov    %rdi,%rdx
  0x0000000110328201:   movabs $0x10673a160,%rsi            ;   {metadata(method data for {method} {0x00000001066babe8} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000011032820b:   addq   $0x1,0xf0(%rsi)
  0x0000000110328213:   movabs $0x10673a2d0,%rdx            ;   {metadata(method data for {method} {0x00000001066b9978} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000011032821d:   mov    0xac(%rdx),%esi
  0x0000000110328223:   add    $0x2,%esi
  0x0000000110328226:   mov    %esi,0xac(%rdx)
  0x000000011032822c:   and    $0x1ffffe,%esi
  0x0000000110328232:   cmp    $0x0,%esi
  0x0000000110328235:   je     0x0000000110329496
  0x000000011032823b:   movabs $0x10673a2d0,%rdx            ;   {metadata(method data for {method} {0x00000001066b9978} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110328245:   addq   $0x1,0xf0(%rdx)
  0x000000011032824d:   movabs $0x106736ab0,%rdx            ;   {metadata(method data for {method} {0x00000001066b72a0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110328257:   mov    0xac(%rdx),%esi
  0x000000011032825d:   add    $0x2,%esi
  0x0000000110328260:   mov    %esi,0xac(%rdx)
  0x0000000110328266:   and    $0x1ffffe,%esi
  0x000000011032826c:   cmp    $0x0,%esi
  0x000000011032826f:   je     0x00000001103294b7
  0x0000000110328275:   movabs $0x106736ab0,%rdx            ;   {metadata(method data for {method} {0x00000001066b72a0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x000000011032827f:   addq   $0x1,0xf0(%rdx)
  0x0000000110328287:   movabs $0x106733d78,%rdx            ;   {metadata(method data for {method} {0x00000001065434e8} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x0000000110328291:   mov    0xac(%rdx),%esi
  0x0000000110328297:   add    $0x2,%esi
  0x000000011032829a:   mov    %esi,0xac(%rdx)
  0x00000001103282a0:   and    $0x1ffffe,%esi
  0x00000001103282a6:   cmp    $0x0,%esi
  0x00000001103282a9:   je     0x00000001103294d8
  0x00000001103282af:   movabs $0x61f0c2690,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$BinaryImpl'{0x000000061f0c2690})}
  0x00000001103282b9:   movabs $0x106733d78,%rsi            ;   {metadata(method data for {method} {0x00000001065434e8} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x00000001103282c3:   mov    0x8(%rdx),%edx
  0x00000001103282c6:   movabs $0x800000000,%r10
  0x00000001103282d0:   add    %r10,%rdx
  0x00000001103282d3:   cmp    0x138(%rsi),%rdx
  0x00000001103282da:   jne    0x00000001103282e9
  0x00000001103282dc:   addq   $0x1,0x140(%rsi)
  0x00000001103282e4:   jmpq   0x000000011032834f
  0x00000001103282e9:   cmp    0x148(%rsi),%rdx
  0x00000001103282f0:   jne    0x00000001103282ff
  0x00000001103282f2:   addq   $0x1,0x150(%rsi)
  0x00000001103282fa:   jmpq   0x000000011032834f
  0x00000001103282ff:   cmpq   $0x0,0x138(%rsi)
  0x000000011032830a:   jne    0x0000000110328323
  0x000000011032830c:   mov    %rdx,0x138(%rsi)
  0x0000000110328313:   movq   $0x1,0x140(%rsi)
  0x000000011032831e:   jmpq   0x000000011032834f
  0x0000000110328323:   cmpq   $0x0,0x148(%rsi)
  0x000000011032832e:   jne    0x0000000110328347
  0x0000000110328330:   mov    %rdx,0x148(%rsi)
  0x0000000110328337:   movq   $0x1,0x150(%rsi)
  0x0000000110328342:   jmpq   0x000000011032834f
  0x0000000110328347:   addq   $0x1,0x128(%rsi)
  0x000000011032834f:   movabs $0x106733f20,%rdx            ;   {metadata(method data for {method} {0x0000000106718228} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x0000000110328359:   mov    0xac(%rdx),%esi
  0x000000011032835f:   add    $0x2,%esi
  0x0000000110328362:   mov    %esi,0xac(%rdx)
  0x0000000110328368:   and    $0x1ffffe,%esi
  0x000000011032836e:   cmp    $0x0,%esi
  0x0000000110328371:   je     0x00000001103294f9
  0x0000000110328377:   movabs $0x106733f20,%rdx            ;   {metadata(method data for {method} {0x0000000106718228} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x0000000110328381:   incl   0xf0(%rdx)
  0x0000000110328387:   movabs $0x10673a2d0,%rdx            ;   {metadata(method data for {method} {0x00000001066b9978} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110328391:   incl   0x100(%rdx)
  0x0000000110328397:   movabs $0x10673a2d0,%rdx            ;   {metadata(method data for {method} {0x00000001066b9978} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103283a1:   incl   0x178(%rdx)
  0x00000001103283a7:   mov    %rdi,%rdx
  0x00000001103283aa:   movabs $0x10673a2d0,%rsi            ;   {metadata(method data for {method} {0x00000001066b9978} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103283b4:   mov    0x8(%rdx),%edx
  0x00000001103283b7:   movabs $0x800000000,%r10
  0x00000001103283c1:   add    %r10,%rdx
  0x00000001103283c4:   cmp    0x1a8(%rsi),%rdx
  0x00000001103283cb:   jne    0x00000001103283da
  0x00000001103283cd:   addq   $0x1,0x1b0(%rsi)
  0x00000001103283d5:   jmpq   0x0000000110328440
  0x00000001103283da:   cmp    0x1b8(%rsi),%rdx
  0x00000001103283e1:   jne    0x00000001103283f0
  0x00000001103283e3:   addq   $0x1,0x1c0(%rsi)
  0x00000001103283eb:   jmpq   0x0000000110328440
  0x00000001103283f0:   cmpq   $0x0,0x1a8(%rsi)
  0x00000001103283fb:   jne    0x0000000110328414
  0x00000001103283fd:   mov    %rdx,0x1a8(%rsi)
  0x0000000110328404:   movq   $0x1,0x1b0(%rsi)
  0x000000011032840f:   jmpq   0x0000000110328440
  0x0000000110328414:   cmpq   $0x0,0x1b8(%rsi)
  0x000000011032841f:   jne    0x0000000110328438
  0x0000000110328421:   mov    %rdx,0x1b8(%rsi)
  0x0000000110328428:   movq   $0x1,0x1c0(%rsi)
  0x0000000110328433:   jmpq   0x0000000110328440
  0x0000000110328438:   addq   $0x1,0x198(%rsi)
  0x0000000110328440:   mov    $0x30,%edx
  0x0000000110328445:   mov    %rdi,%rsi
  0x0000000110328448:   mov    %rdi,0xf0(%rsp)
  0x0000000110328450:   nopl   0x0(%rax,%rax,1)
  0x0000000110328455:   movabs $0xffffffffffffffff,%rax
  0x000000011032845f:   callq  0x000000010fc9db60           ; ImmutableOopMap {[240]=Oop }
                                                            ;*invokevirtual broadcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@42 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x0000000110328464:   mov    0xf0(%rsp),%rdi
  0x000000011032846c:   movabs $0x10673a2d0,%rdx            ;   {metadata(method data for {method} {0x00000001066b9978} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000110328476:   mov    0x8(%rdi),%edi
  0x0000000110328479:   movabs $0x800000000,%r10
  0x0000000110328483:   add    %r10,%rdi
  0x0000000110328486:   cmp    0x1e0(%rdx),%rdi
  0x000000011032848d:   jne    0x000000011032849c
  0x000000011032848f:   addq   $0x1,0x1e8(%rdx)
  0x0000000110328497:   jmpq   0x0000000110328502
  0x000000011032849c:   cmp    0x1f0(%rdx),%rdi
  0x00000001103284a3:   jne    0x00000001103284b2
  0x00000001103284a5:   addq   $0x1,0x1f8(%rdx)
  0x00000001103284ad:   jmpq   0x0000000110328502
  0x00000001103284b2:   cmpq   $0x0,0x1e0(%rdx)
  0x00000001103284bd:   jne    0x00000001103284d6
  0x00000001103284bf:   mov    %rdi,0x1e0(%rdx)
  0x00000001103284c6:   movq   $0x1,0x1e8(%rdx)
  0x00000001103284d1:   jmpq   0x0000000110328502
  0x00000001103284d6:   cmpq   $0x0,0x1f0(%rdx)
  0x00000001103284e1:   jne    0x00000001103284fa
  0x00000001103284e3:   mov    %rdi,0x1f0(%rdx)
  0x00000001103284ea:   movq   $0x1,0x1f8(%rdx)
  0x00000001103284f5:   jmpq   0x0000000110328502
  0x00000001103284fa:   addq   $0x1,0x1d0(%rdx)
  0x0000000110328502:   movabs $0x61f0c2690,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$BinaryImpl'{0x000000061f0c2690})}
  0x000000011032850c:   mov    %rax,%rcx
  0x000000011032850f:   mov    0xf0(%rsp),%rsi
  0x0000000110328517:   nopw   0x0(%rax,%rax,1)
  0x000000011032851d:   movabs $0xffffffffffffffff,%rax
  0x0000000110328527:   callq  0x000000010fc9dba0           ; ImmutableOopMap {}
                                                            ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x000000011032852c:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x000000011032951a
  0x000000011032852f:   mov    %rax,%rdx
  0x0000000110328532:   movabs $0x106841328,%rcx            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000011032853c:   mov    0x8(%rdx),%edx
  0x000000011032853f:   movabs $0x800000000,%r10
  0x0000000110328549:   add    %r10,%rdx
  0x000000011032854c:   cmp    0x148(%rcx),%rdx
  0x0000000110328553:   jne    0x0000000110328562
  0x0000000110328555:   addq   $0x1,0x150(%rcx)
  0x000000011032855d:   jmpq   0x00000001103285c8
  0x0000000110328562:   cmp    0x158(%rcx),%rdx
  0x0000000110328569:   jne    0x0000000110328578
  0x000000011032856b:   addq   $0x1,0x160(%rcx)
  0x0000000110328573:   jmpq   0x00000001103285c8
  0x0000000110328578:   cmpq   $0x0,0x148(%rcx)
  0x0000000110328583:   jne    0x000000011032859c
  0x0000000110328585:   mov    %rdx,0x148(%rcx)
  0x000000011032858c:   movq   $0x1,0x150(%rcx)
  0x0000000110328597:   jmpq   0x00000001103285c8
  0x000000011032859c:   cmpq   $0x0,0x158(%rcx)
  0x00000001103285a7:   jne    0x00000001103285c0
  0x00000001103285a9:   mov    %rdx,0x158(%rcx)
  0x00000001103285b0:   movq   $0x1,0x160(%rcx)
  0x00000001103285bb:   jmpq   0x00000001103285c8
  0x00000001103285c0:   addq   $0x1,0x138(%rcx)
  0x00000001103285c8:   movabs $0x61f0c3bf8,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$ComparisonImpl'{0x000000061f0c3bf8})}
  0x00000001103285d2:   movabs $0x9,%rcx
  0x00000001103285dc:   mov    %rax,%rsi
  0x00000001103285df:   mov    %rax,0xf8(%rsp)
  0x00000001103285e7:   nopw   0x0(%rax,%rax,1)
  0x00000001103285ed:   movabs $0xffffffffffffffff,%rax
  0x00000001103285f7:   callq  0x000000010fc9dbe0           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokevirtual compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {virtual_call}
  0x00000001103285fc:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x000000011032951f
  0x00000001103285ff:   mov    %rax,%rsi
  0x0000000110328602:   movabs $0x106841328,%rdx            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000011032860c:   addq   $0x1,0x170(%rdx)
  0x0000000110328614:   movabs $0x10673a528,%rsi            ;   {metadata(method data for {method} {0x00000001066e9328} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000011032861e:   mov    0xac(%rsi),%edx
  0x0000000110328624:   add    $0x2,%edx
  0x0000000110328627:   mov    %edx,0xac(%rsi)
  0x000000011032862d:   and    $0x1ffffe,%edx
  0x0000000110328633:   cmp    $0x0,%edx
  0x0000000110328636:   je     0x0000000110329524
  0x000000011032863c:   mov    %rax,%rsi
  0x000000011032863f:   movabs $0x10673a528,%rdx            ;   {metadata(method data for {method} {0x00000001066e9328} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328649:   addq   $0x1,0xf0(%rdx)
  0x0000000110328651:   movabs $0x10673a6f8,%rsi            ;   {metadata(method data for {method} {0x00000001066e8560} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000011032865b:   mov    0xac(%rsi),%edx
  0x0000000110328661:   add    $0x2,%edx
  0x0000000110328664:   mov    %edx,0xac(%rsi)
  0x000000011032866a:   and    $0x1ffffe,%edx
  0x0000000110328670:   cmp    $0x0,%edx
  0x0000000110328673:   je     0x0000000110329545
  0x0000000110328679:   movabs $0x61f0b24c8,%rsi            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f0b24c8})}
  0x0000000110328683:   mov    %rsi,%rdx
  0x0000000110328686:   movabs $0x10673a528,%rcx            ;   {metadata(method data for {method} {0x00000001066e9328} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328690:   addq   $0x1,0x128(%rcx)
  0x0000000110328698:   movabs $0x10673a808,%rdx            ;   {metadata(method data for {method} {0x00000001066d0608} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x00000001103286a2:   mov    0xac(%rdx),%ecx
  0x00000001103286a8:   add    $0x2,%ecx
  0x00000001103286ab:   mov    %ecx,0xac(%rdx)
  0x00000001103286b1:   and    $0x1ffffe,%ecx
  0x00000001103286b7:   cmp    $0x0,%ecx
  0x00000001103286ba:   je     0x0000000110329566
  0x00000001103286c0:   movabs $0x10673a808,%rdx            ;   {metadata(method data for {method} {0x00000001066d0608} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x00000001103286ca:   addq   $0x1,0xf0(%rdx)
  0x00000001103286d2:   movabs $0x10673a808,%rsi            ;   {metadata(method data for {method} {0x00000001066d0608} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x00000001103286dc:   incl   0x128(%rsi)
  0x00000001103286e2:   movabs $0x61f0b24c8,%rsi            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f0b24c8})}
  0x00000001103286ec:   movabs $0x10673a808,%rdx            ;   {metadata(method data for {method} {0x00000001066d0608} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x00000001103286f6:   addq   $0x1,0x158(%rdx)
  0x00000001103286fe:   movabs $0x10673a808,%rsi            ;   {metadata(method data for {method} {0x00000001066d0608} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000110328708:   addq   $0x1,0x200(%rsi)
  0x0000000110328710:   movabs $0x10673aa90,%rsi            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000011032871a:   mov    0xac(%rsi),%edx
  0x0000000110328720:   add    $0x2,%edx
  0x0000000110328723:   mov    %edx,0xac(%rsi)
  0x0000000110328729:   and    $0x1ffffe,%edx
  0x000000011032872f:   cmp    $0x0,%edx
  0x0000000110328732:   je     0x0000000110329587
  0x0000000110328738:   movabs $0x10673aa90,%rsi            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328742:   incl   0x100(%rsi)
  0x0000000110328748:   movabs $0x10673aa90,%rsi            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328752:   incl   0x110(%rsi)
  0x0000000110328758:   mov    %rax,0x100(%rsp)
  0x0000000110328760:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000011032876a:   lea    0x1c8(%rsi),%rsi
  0x0000000110328771:   movabs $0x61f125410,%rdx            ;   {oop(a 'java/lang/invoke/BoundMethodHandle$Species_L'{0x000000061f125410})}
  0x000000011032877b:   mov    %rdx,%rcx
  0x000000011032877e:   test   %rcx,%rcx
  0x0000000110328781:   jne    0x0000000110328787
  0x0000000110328783:   orq    $0x1,(%rsi)
  0x0000000110328787:   movabs $0x10673aa90,%rsi            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328791:   addq   $0x1,0x128(%rsi)
  0x0000000110328799:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x00000001103287a3:   mov    0xac(%rsi),%ecx
  0x00000001103287a9:   add    $0x2,%ecx
  0x00000001103287ac:   mov    %ecx,0xac(%rsi)
  0x00000001103287b2:   and    $0x1ffffe,%ecx
  0x00000001103287b8:   cmp    $0x0,%ecx
  0x00000001103287bb:   je     0x00000001103295a8
  0x00000001103287c1:   movabs $0x106800490,%rsi            ;   {metadata(method data for {method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x00000001103287cb:   lea    0x180(%rsi),%rsi
  0x00000001103287d2:   test   %rdx,%rdx
  0x00000001103287d5:   jne    0x00000001103287db
  0x00000001103287d7:   orq    $0x1,(%rsi)
  0x00000001103287db:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x00000001103287e5:   addq   $0x1,0x128(%rsi)
  0x00000001103287ed:   movabs $0x106800490,%rsi            ;   {metadata(method data for {method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x00000001103287f7:   mov    0xac(%rsi),%edx
  0x00000001103287fd:   add    $0x2,%edx
  0x0000000110328800:   mov    %edx,0xac(%rsi)
  0x0000000110328806:   and    $0x1ffffe,%edx
  0x000000011032880c:   cmp    $0x0,%edx
  0x000000011032880f:   je     0x00000001103295c9
  0x0000000110328815:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000011032881f:   lea    0x160(%rsi),%rsi
  0x0000000110328826:   movabs $0x61f125310,%rdi            ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$91+0x0000000800c28eb0'{0x000000061f125310})}
  0x0000000110328830:   mov    %rdi,%rdx
  0x0000000110328833:   test   %rdx,%rdx
  0x0000000110328836:   jne    0x000000011032883c
  0x0000000110328838:   orq    $0x1,(%rsi)
  0x000000011032883c:   movabs $0x10673aa90,%rsi            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328846:   lea    0x138(%rsi),%rsi
  0x000000011032884d:   mov    %rdi,%rdx
  0x0000000110328850:   test   %rdx,%rdx
  0x0000000110328853:   jne    0x000000011032885b
  0x0000000110328855:   orq    $0x1,(%rsi)
  0x0000000110328859:   jmp    0x00000001103288a1
  0x000000011032885b:   movabs $0x800c28eb0,%rdx            ;   {metadata('jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$91+0x0000000800c28eb0')}
  0x0000000110328865:   xor    (%rsi),%rdx
  0x0000000110328868:   test   $0xfffffffffffffffc,%rdx
  0x000000011032886f:   je     0x00000001103288a1
  0x0000000110328871:   test   $0x2,%rdx
  0x0000000110328878:   jne    0x00000001103288a1
  0x000000011032887a:   cmpq   $0x0,(%rsi)
  0x0000000110328881:   je     0x000000011032889e
  0x0000000110328883:   cmpq   $0x1,(%rsi)
  0x000000011032888a:   je     0x000000011032889e
  0x000000011032888c:   xor    (%rsi),%rdx
  0x000000011032888f:   test   $0xfffffffffffffffc,%rdx
  0x0000000110328896:   je     0x00000001103288a1
  0x0000000110328898:   orq    $0x2,(%rsi)
  0x000000011032889c:   jmp    0x00000001103288a1
  0x000000011032889e:   mov    %rdx,(%rsi)
  0x00000001103288a1:   movabs $0x10673aa90,%rsi            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x00000001103288ab:   addq   $0x1,0x148(%rsi)
  0x00000001103288b3:   movabs $0x61f0b25b0,%rsi            ;   {oop(a 'java/lang/Class'{0x000000061f0b25b0} = 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x00000001103288bd:   movabs $0x7ffb00230,%rdx            ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x00000001103288c7:   movabs $0xffffffffffffffff,%r8
  0x00000001103288d1:   mov    $0x8,%ecx
  0x00000001103288d6:   movabs $0x0,%r9                     ;   {oop(NULL)}
  0x00000001103288e0:   nopl   0x0(%rax)
  0x00000001103288e7:   callq  0x0000000110313bc0           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*invokestatic broadcastCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@24 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x00000001103288ec:   cmp    $0x0,%rax
  0x00000001103288f0:   jne    0x0000000110328908
  0x00000001103288f2:   movabs $0x10673aa90,%rcx            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x00000001103288fc:   orb    $0x1,0x151(%rcx)
  0x0000000110328903:   jmpq   0x00000001103289da
  0x0000000110328908:   movabs $0x800c20640,%rdx            ;   {metadata('jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328912:   mov    0x8(%rax),%esi
  0x0000000110328915:   movabs $0x800000000,%r10
  0x000000011032891f:   add    %r10,%rsi
  0x0000000110328922:   cmp    %rsi,%rdx
  0x0000000110328925:   jne    0x00000001103289be
  0x000000011032892b:   movabs $0x10673aa90,%rcx            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328935:   mov    0x8(%rax),%edx
  0x0000000110328938:   movabs $0x800000000,%r10
  0x0000000110328942:   add    %r10,%rdx
  0x0000000110328945:   cmp    0x168(%rcx),%rdx
  0x000000011032894c:   jne    0x000000011032895b
  0x000000011032894e:   addq   $0x1,0x170(%rcx)
  0x0000000110328956:   jmpq   0x00000001103289da
  0x000000011032895b:   cmp    0x178(%rcx),%rdx
  0x0000000110328962:   jne    0x0000000110328971
  0x0000000110328964:   addq   $0x1,0x180(%rcx)
  0x000000011032896c:   jmpq   0x00000001103289da
  0x0000000110328971:   cmpq   $0x0,0x168(%rcx)
  0x000000011032897c:   jne    0x0000000110328995
  0x000000011032897e:   mov    %rdx,0x168(%rcx)
  0x0000000110328985:   movq   $0x1,0x170(%rcx)
  0x0000000110328990:   jmpq   0x00000001103289da
  0x0000000110328995:   cmpq   $0x0,0x178(%rcx)
  0x00000001103289a0:   jne    0x00000001103289b9
  0x00000001103289a2:   mov    %rdx,0x178(%rcx)
  0x00000001103289a9:   movq   $0x1,0x180(%rcx)
  0x00000001103289b4:   jmpq   0x00000001103289da
  0x00000001103289b9:   jmpq   0x00000001103289da
  0x00000001103289be:   movabs $0x10673aa90,%rcx            ;   {metadata(method data for {method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x00000001103289c8:   subq   $0x1,0x158(%rcx)
  0x00000001103289d0:   jmpq   0x00000001103295ea
  0x00000001103289d5:   jmpq   0x00000001103289da
  0x00000001103289da:   mov    %rax,%rdi
  0x00000001103289dd:   mov    0x100(%rsp),%rax
  0x00000001103289e5:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x00000001103289ef:   lea    0x1c8(%rsi),%rsi
  0x00000001103289f6:   movabs $0x61f128530,%rdx            ;   {oop(a 'java/lang/invoke/BoundMethodHandle$Species_L'{0x000000061f128530})}
  0x0000000110328a00:   mov    %rdx,%rcx
  0x0000000110328a03:   test   %rcx,%rcx
  0x0000000110328a06:   jne    0x0000000110328a0c
  0x0000000110328a08:   orq    $0x1,(%rsi)
  0x0000000110328a0c:   movabs $0x10673a528,%rsi            ;   {metadata(method data for {method} {0x00000001066e9328} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328a16:   addq   $0x1,0x160(%rsi)
  0x0000000110328a1e:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000110328a28:   mov    0xac(%rsi),%ecx
  0x0000000110328a2e:   add    $0x2,%ecx
  0x0000000110328a31:   mov    %ecx,0xac(%rsi)
  0x0000000110328a37:   and    $0x1ffffe,%ecx
  0x0000000110328a3d:   cmp    $0x0,%ecx
  0x0000000110328a40:   je     0x00000001103295f3
  0x0000000110328a46:   movabs $0x106800490,%rsi            ;   {metadata(method data for {method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000110328a50:   lea    0x180(%rsi),%rsi
  0x0000000110328a57:   test   %rdx,%rdx
  0x0000000110328a5a:   jne    0x0000000110328a60
  0x0000000110328a5c:   orq    $0x1,(%rsi)
  0x0000000110328a60:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000110328a6a:   addq   $0x1,0x128(%rsi)
  0x0000000110328a72:   movabs $0x106800490,%rsi            ;   {metadata(method data for {method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000110328a7c:   mov    0xac(%rsi),%edx
  0x0000000110328a82:   add    $0x2,%edx
  0x0000000110328a85:   mov    %edx,0xac(%rsi)
  0x0000000110328a8b:   and    $0x1ffffe,%edx
  0x0000000110328a91:   cmp    $0x0,%edx
  0x0000000110328a94:   je     0x0000000110329614
  0x0000000110328a9a:   movabs $0x10672f0a0,%rsi            ;   {metadata(method data for {method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000110328aa4:   lea    0x160(%rsi),%rsi
  0x0000000110328aab:   movabs $0x61f1283b0,%rdx            ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$92+0x0000000800c290d0'{0x000000061f1283b0})}
  0x0000000110328ab5:   mov    %rdx,%rcx
  0x0000000110328ab8:   test   %rcx,%rcx
  0x0000000110328abb:   jne    0x0000000110328ac1
  0x0000000110328abd:   orq    $0x1,(%rsi)
  0x0000000110328ac1:   movabs $0x10673a528,%rsi            ;   {metadata(method data for {method} {0x00000001066e9328} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328acb:   lea    0x170(%rsi),%rsi
  0x0000000110328ad2:   test   %rdx,%rdx
  0x0000000110328ad5:   jne    0x0000000110328add
  0x0000000110328ad7:   orq    $0x1,(%rsi)
  0x0000000110328adb:   jmp    0x0000000110328b23
  0x0000000110328add:   movabs $0x800c290d0,%rdx            ;   {metadata('jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$92+0x0000000800c290d0')}
  0x0000000110328ae7:   xor    (%rsi),%rdx
  0x0000000110328aea:   test   $0xfffffffffffffffc,%rdx
  0x0000000110328af1:   je     0x0000000110328b23
  0x0000000110328af3:   test   $0x2,%rdx
  0x0000000110328afa:   jne    0x0000000110328b23
  0x0000000110328afc:   cmpq   $0x0,(%rsi)
  0x0000000110328b03:   je     0x0000000110328b20
  0x0000000110328b05:   cmpq   $0x1,(%rsi)
  0x0000000110328b0c:   je     0x0000000110328b20
  0x0000000110328b0e:   xor    (%rsi),%rdx
  0x0000000110328b11:   test   $0xfffffffffffffffc,%rdx
  0x0000000110328b18:   je     0x0000000110328b23
  0x0000000110328b1a:   orq    $0x2,(%rsi)
  0x0000000110328b1e:   jmp    0x0000000110328b23
  0x0000000110328b20:   mov    %rdx,(%rsi)
  0x0000000110328b23:   movabs $0x10673a528,%rsi            ;   {metadata(method data for {method} {0x00000001066e9328} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328b2d:   addq   $0x1,0x180(%rsi)
  0x0000000110328b35:   movabs $0x61f0b25b0,%rdx            ;   {oop(a 'java/lang/Class'{0x000000061f0b25b0} = 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110328b3f:   movabs $0x7ffb00230,%rcx            ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x0000000110328b49:   mov    $0x4,%esi
  0x0000000110328b4e:   mov    $0x8,%r8d
  0x0000000110328b54:   mov    %rax,%r9
  0x0000000110328b57:   movabs $0x61f1283b0,%r10            ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$92+0x0000000800c290d0'{0x000000061f1283b0})}
  0x0000000110328b61:   mov    %r10,(%rsp)
  0x0000000110328b65:   xchg   %ax,%ax
  0x0000000110328b67:   callq  0x0000000110329855           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic test {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x0000000110328b6c:   and    $0x1,%eax
  0x0000000110328b6f:   cmp    $0x0,%eax
  0x0000000110328b72:   movabs $0x106841328,%rsi            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000110328b7c:   movabs $0x1b8,%rdi
  0x0000000110328b86:   jne    0x0000000110328b96
  0x0000000110328b8c:   movabs $0x1a8,%rdi
  0x0000000110328b96:   mov    (%rsi,%rdi,1),%rbx
  0x0000000110328b9a:   lea    0x1(%rbx),%rbx
  0x0000000110328b9e:   mov    %rbx,(%rsi,%rdi,1)
  0x0000000110328ba2:   jne    0x000000011032923a
  0x0000000110328ba8:   mov    0xf8(%rsp),%rax
  0x0000000110328bb0:   movabs $0x106841328,%rsi            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000110328bba:   addq   $0x1,0x1c8(%rsi)
  0x0000000110328bc2:   movabs $0x10673aec8,%rsi            ;   {metadata(method data for {method} {0x0000000106535d80} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000110328bcc:   mov    0xac(%rsi),%edi
  0x0000000110328bd2:   add    $0x2,%edi
  0x0000000110328bd5:   mov    %edi,0xac(%rsi)
  0x0000000110328bdb:   and    $0x1ffffe,%edi
  0x0000000110328be1:   cmp    $0x0,%edi
  0x0000000110328be4:   je     0x0000000110329635
  0x0000000110328bea:   mov    0xf8(%rsp),%rax
  0x0000000110328bf2:   movabs $0x10673aec8,%rsi            ;   {metadata(method data for {method} {0x0000000106535d80} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000110328bfc:   mov    0x8(%rax),%eax
  0x0000000110328bff:   movabs $0x800000000,%r10
  0x0000000110328c09:   add    %r10,%rax
  0x0000000110328c0c:   cmp    0x100(%rsi),%rax
  0x0000000110328c13:   jne    0x0000000110328c22
  0x0000000110328c15:   addq   $0x1,0x108(%rsi)
  0x0000000110328c1d:   jmpq   0x0000000110328c88
  0x0000000110328c22:   cmp    0x110(%rsi),%rax
  0x0000000110328c29:   jne    0x0000000110328c38
  0x0000000110328c2b:   addq   $0x1,0x118(%rsi)
  0x0000000110328c33:   jmpq   0x0000000110328c88
  0x0000000110328c38:   cmpq   $0x0,0x100(%rsi)
  0x0000000110328c43:   jne    0x0000000110328c5c
  0x0000000110328c45:   mov    %rax,0x100(%rsi)
  0x0000000110328c4c:   movq   $0x1,0x108(%rsi)
  0x0000000110328c57:   jmpq   0x0000000110328c88
  0x0000000110328c5c:   cmpq   $0x0,0x110(%rsi)
  0x0000000110328c67:   jne    0x0000000110328c80
  0x0000000110328c69:   mov    %rax,0x110(%rsi)
  0x0000000110328c70:   movq   $0x1,0x118(%rsi)
  0x0000000110328c7b:   jmpq   0x0000000110328c88
  0x0000000110328c80:   addq   $0x1,0xf0(%rsi)
  0x0000000110328c88:   mov    0xf8(%rsp),%rsi
  0x0000000110328c90:   nopl   0x0(%rax,%rax,1)
  0x0000000110328c95:   movabs $0x800c20000,%rax
  0x0000000110328c9f:   callq  0x0000000110314dc0           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@1 (line 282)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x0000000110328ca4:   mov    0x28(%rax),%edi              ; implicit exception: dispatches to 0x0000000110329656
  0x0000000110328ca7:   shl    $0x3,%rdi
  0x0000000110328cab:   movabs $0x10673aec8,%rsi            ;   {metadata(method data for {method} {0x0000000106535d80} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000110328cb5:   addq   $0x1,0x160(%rsi)
  0x0000000110328cbd:   movabs $0x10673b0c0,%rsi            ;   {metadata(method data for {method} {0x000000010671e040} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328cc7:   mov    0xac(%rsi),%edx
  0x0000000110328ccd:   add    $0x2,%edx
  0x0000000110328cd0:   mov    %edx,0xac(%rsi)
  0x0000000110328cd6:   and    $0x1ffffe,%edx
  0x0000000110328cdc:   cmp    $0x0,%edx
  0x0000000110328cdf:   je     0x000000011032965b
  0x0000000110328ce5:   movabs $0x6003e9e58,%rsi            ;   {oop(a 'jdk/incubator/vector/LaneType'{0x00000006003e9e58})}
  0x0000000110328cef:   cmp    %rsi,%rdi
  0x0000000110328cf2:   movabs $0x10673b0c0,%rsi            ;   {metadata(method data for {method} {0x000000010671e040} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328cfc:   movabs $0xf0,%rdx
  0x0000000110328d06:   jne    0x0000000110328d16
  0x0000000110328d0c:   movabs $0x100,%rdx
  0x0000000110328d16:   mov    (%rsi,%rdx,1),%rcx
  0x0000000110328d1a:   lea    0x1(%rcx),%rcx
  0x0000000110328d1e:   mov    %rcx,(%rsi,%rdx,1)
  0x0000000110328d22:   jne    0x0000000110328ea4
  0x0000000110328d28:   movabs $0x10673b0c0,%rsi            ;   {metadata(method data for {method} {0x000000010671e040} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328d32:   addq   $0x1,0x110(%rsi)
  0x0000000110328d3a:   movabs $0x10673b238,%rsi            ;   {metadata(method data for {method} {0x000000010671df80} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328d44:   mov    0xac(%rsi),%edx
  0x0000000110328d4a:   add    $0x2,%edx
  0x0000000110328d4d:   mov    %edx,0xac(%rsi)
  0x0000000110328d53:   and    $0x1ffffe,%edx
  0x0000000110328d59:   cmp    $0x0,%edx
  0x0000000110328d5c:   je     0x000000011032967c
  0x0000000110328d62:   movabs $0x10673b238,%rsi            ;   {metadata(method data for {method} {0x000000010671df80} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328d6c:   addq   $0x1,0xf0(%rsi)
  0x0000000110328d74:   movabs $0x10673b378,%rsi            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328d7e:   mov    0xac(%rsi),%edx
  0x0000000110328d84:   add    $0x2,%edx
  0x0000000110328d87:   mov    %edx,0xac(%rsi)
  0x0000000110328d8d:   and    $0x1ffffe,%edx
  0x0000000110328d93:   cmp    $0x0,%edx
  0x0000000110328d96:   je     0x000000011032969d
  0x0000000110328d9c:   movabs $0x10673b378,%rsi            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328da6:   addq   $0x1,0xf0(%rsi)
  0x0000000110328dae:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328db8:   mov    0xac(%rsi),%edx
  0x0000000110328dbe:   add    $0x2,%edx
  0x0000000110328dc1:   mov    %edx,0xac(%rsi)
  0x0000000110328dc7:   and    $0x1ffffe,%edx
  0x0000000110328dcd:   cmp    $0x0,%edx
  0x0000000110328dd0:   je     0x00000001103296be
  0x0000000110328dd6:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328de0:   incl   0xf0(%rsi)
  0x0000000110328de6:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328df0:   incl   0x188(%rsi)
  0x0000000110328df6:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328e00:   incl   0x198(%rsi)
  0x0000000110328e06:   mov    0x20(%rdi),%esi              ; implicit exception: dispatches to 0x00000001103296df
  0x0000000110328e09:   mov    $0x7,%edx
  0x0000000110328e0e:   movabs $0x61f0f50b0,%rcx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061f0f50b0})}
  0x0000000110328e18:   cmp    %esi,%edx
  0x0000000110328e1a:   jbe    0x00000001103296e4
  0x0000000110328e20:   movslq %esi,%rdx
  0x0000000110328e23:   mov    0x10(%rcx,%rdx,4),%edx       ; implicit exception: dispatches to 0x00000001103296f2
  0x0000000110328e27:   shl    $0x3,%rdx
  0x0000000110328e2b:   cmp    0xc(%rdx),%esi               ; implicit exception: dispatches to 0x00000001103296f7
  0x0000000110328e2e:   jae    0x0000000110329701
  0x0000000110328e34:   movslq %esi,%rsi
  0x0000000110328e37:   mov    0x10(%rdx,%rsi,4),%esi
  0x0000000110328e3b:   shl    $0x3,%rsi
  0x0000000110328e3f:   cmp    $0x0,%rsi
  0x0000000110328e43:   movabs $0x10673b378,%rdx            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328e4d:   movabs $0x110,%rcx
  0x0000000110328e57:   jne    0x0000000110328e67
  0x0000000110328e5d:   movabs $0x100,%rcx
  0x0000000110328e67:   mov    (%rdx,%rcx,1),%rbx
  0x0000000110328e6b:   lea    0x1(%rbx),%rbx
  0x0000000110328e6f:   mov    %rbx,(%rdx,%rcx,1)
  0x0000000110328e73:   jne    0x0000000110328fe7
  0x0000000110328e79:   movabs $0x10673b378,%rsi            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328e83:   addq   $0x1,0x120(%rsi)
  0x0000000110328e8b:   mov    $0x49,%esi
  0x0000000110328e90:   mov    %rdi,%rdx
  0x0000000110328e93:   mov    %rdi,%rcx
  0x0000000110328e96:   nop
  0x0000000110328e97:   callq  0x000000010fca1080           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x0000000110328e9c:   mov    %rax,%rsi
  0x0000000110328e9f:   jmpq   0x0000000110328fe7
  0x0000000110328ea4:   movabs $0x10673b0c0,%rsi            ;   {metadata(method data for {method} {0x000000010671e040} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328eae:   addq   $0x1,0x120(%rsi)
  0x0000000110328eb6:   movabs $0x10673b378,%rsi            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328ec0:   mov    0xac(%rsi),%edx
  0x0000000110328ec6:   add    $0x2,%edx
  0x0000000110328ec9:   mov    %edx,0xac(%rsi)
  0x0000000110328ecf:   and    $0x1ffffe,%edx
  0x0000000110328ed5:   cmp    $0x0,%edx
  0x0000000110328ed8:   je     0x000000011032970f
  0x0000000110328ede:   movabs $0x10673b378,%rsi            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328ee8:   addq   $0x1,0xf0(%rsi)
  0x0000000110328ef0:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328efa:   mov    0xac(%rsi),%edx
  0x0000000110328f00:   add    $0x2,%edx
  0x0000000110328f03:   mov    %edx,0xac(%rsi)
  0x0000000110328f09:   and    $0x1ffffe,%edx
  0x0000000110328f0f:   cmp    $0x0,%edx
  0x0000000110328f12:   je     0x0000000110329730
  0x0000000110328f18:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328f22:   incl   0xf0(%rsi)
  0x0000000110328f28:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328f32:   incl   0x188(%rsi)
  0x0000000110328f38:   movabs $0x106736270,%rsi            ;   {metadata(method data for {method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328f42:   incl   0x198(%rsi)
  0x0000000110328f48:   mov    0x20(%rdi),%esi              ; implicit exception: dispatches to 0x0000000110329751
  0x0000000110328f4b:   mov    $0x7,%edx
  0x0000000110328f50:   movabs $0x61f0f50b0,%rcx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061f0f50b0})}
  0x0000000110328f5a:   cmp    %esi,%edx
  0x0000000110328f5c:   jbe    0x0000000110329756
  0x0000000110328f62:   movslq %esi,%rsi
  0x0000000110328f65:   mov    0x10(%rcx,%rsi,4),%esi       ; implicit exception: dispatches to 0x0000000110329764
  0x0000000110328f69:   shl    $0x3,%rsi
  0x0000000110328f6d:   cmpl   $0x5,0xc(%rsi)               ; implicit exception: dispatches to 0x0000000110329769
  0x0000000110328f74:   jbe    0x0000000110329773
  0x0000000110328f7a:   mov    0x24(%rsi),%esi
  0x0000000110328f7d:   shl    $0x3,%rsi
  0x0000000110328f81:   cmp    $0x0,%rsi
  0x0000000110328f85:   movabs $0x10673b378,%rdx            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328f8f:   movabs $0x110,%rcx
  0x0000000110328f99:   jne    0x0000000110328fa9
  0x0000000110328f9f:   movabs $0x100,%rcx
  0x0000000110328fa9:   mov    (%rdx,%rcx,1),%rbx
  0x0000000110328fad:   lea    0x1(%rbx),%rbx
  0x0000000110328fb1:   mov    %rbx,(%rdx,%rcx,1)
  0x0000000110328fb5:   jne    0x0000000110328fe7
  0x0000000110328fbb:   movabs $0x10673b378,%rsi            ;   {metadata(method data for {method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110328fc5:   addq   $0x1,0x120(%rsi)
  0x0000000110328fcd:   movabs $0x6003e9e58,%rcx            ;   {oop(a 'jdk/incubator/vector/LaneType'{0x00000006003e9e58})}
  0x0000000110328fd7:   mov    $0x43,%esi
  0x0000000110328fdc:   mov    %rdi,%rdx
  0x0000000110328fdf:   callq  0x000000010fca1080           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x0000000110328fe4:   mov    %rax,%rsi
  0x0000000110328fe7:   mov    0xf8(%rsp),%rax
  0x0000000110328fef:   mov    %rax,%rdx
  0x0000000110328ff2:   movabs $0x10673aec8,%rcx            ;   {metadata(method data for {method} {0x0000000106535d80} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000110328ffc:   mov    0x8(%rdx),%edx
  0x0000000110328fff:   movabs $0x800000000,%r10
  0x0000000110329009:   add    %r10,%rdx
  0x000000011032900c:   cmp    0x180(%rcx),%rdx
  0x0000000110329013:   jne    0x0000000110329022
  0x0000000110329015:   addq   $0x1,0x188(%rcx)
  0x000000011032901d:   jmpq   0x0000000110329088
  0x0000000110329022:   cmp    0x190(%rcx),%rdx
  0x0000000110329029:   jne    0x0000000110329038
  0x000000011032902b:   addq   $0x1,0x198(%rcx)
  0x0000000110329033:   jmpq   0x0000000110329088
  0x0000000110329038:   cmpq   $0x0,0x180(%rcx)
  0x0000000110329043:   jne    0x000000011032905c
  0x0000000110329045:   mov    %rdx,0x180(%rcx)
  0x000000011032904c:   movq   $0x1,0x188(%rcx)
  0x0000000110329057:   jmpq   0x0000000110329088
  0x000000011032905c:   cmpq   $0x0,0x190(%rcx)
  0x0000000110329067:   jne    0x0000000110329080
  0x0000000110329069:   mov    %rdx,0x190(%rcx)
  0x0000000110329070:   movq   $0x1,0x198(%rcx)
  0x000000011032907b:   jmpq   0x0000000110329088
  0x0000000110329080:   addq   $0x1,0x170(%rcx)
  0x0000000110329088:   movabs $0x6003e9db8,%rcx            ;   {oop(a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000006003e9db8})}
  0x0000000110329092:   mov    %rsi,%rdx
  0x0000000110329095:   mov    $0x0,%r8d
  0x000000011032909b:   mov    %rax,%rsi
  0x000000011032909e:   nopl   0x0(%rax)
  0x00000001103290a5:   movabs $0xffffffffffffffff,%rax
  0x00000001103290af:   callq  0x000000010fc9dc20           ; ImmutableOopMap {}
                                                            ;*invokevirtual convertShape {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x00000001103290b4:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x0000000110329785
  0x00000001103290b7:   mov    %rax,%rdx
  0x00000001103290ba:   movabs $0x106841328,%rsi            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x00000001103290c4:   mov    0x8(%rdx),%edx
  0x00000001103290c7:   movabs $0x800000000,%r10
  0x00000001103290d1:   add    %r10,%rdx
  0x00000001103290d4:   cmp    0x210(%rsi),%rdx
  0x00000001103290db:   jne    0x00000001103290ea
  0x00000001103290dd:   addq   $0x1,0x218(%rsi)
  0x00000001103290e5:   jmpq   0x0000000110329150
  0x00000001103290ea:   cmp    0x220(%rsi),%rdx
  0x00000001103290f1:   jne    0x0000000110329100
  0x00000001103290f3:   addq   $0x1,0x228(%rsi)
  0x00000001103290fb:   jmpq   0x0000000110329150
  0x0000000110329100:   cmpq   $0x0,0x210(%rsi)
  0x000000011032910b:   jne    0x0000000110329124
  0x000000011032910d:   mov    %rdx,0x210(%rsi)
  0x0000000110329114:   movq   $0x1,0x218(%rsi)
  0x000000011032911f:   jmpq   0x0000000110329150
  0x0000000110329124:   cmpq   $0x0,0x220(%rsi)
  0x000000011032912f:   jne    0x0000000110329148
  0x0000000110329131:   mov    %rdx,0x220(%rsi)
  0x0000000110329138:   movq   $0x1,0x228(%rsi)
  0x0000000110329143:   jmpq   0x0000000110329150
  0x0000000110329148:   addq   $0x1,0x200(%rsi)
  0x0000000110329150:   movabs $0x61f0a3610,%rdx            ;   {oop(a 'jdk/incubator/vector/Int256Vector'{0x000000061f0a3610})}
  0x000000011032915a:   mov    %rax,%rsi
  0x000000011032915d:   movabs $0xffffffffffffffff,%rax
  0x0000000110329167:   callq  0x000000010fc9dc60           ; ImmutableOopMap {}
                                                            ;*invokevirtual mul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {virtual_call}
  0x000000011032916c:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x000000011032978a
  0x000000011032916f:   mov    %rax,%rdx
  0x0000000110329172:   movabs $0x106841328,%rsi            ;   {metadata(method data for {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000011032917c:   mov    0x8(%rdx),%edx
  0x000000011032917f:   movabs $0x800000000,%r10
  0x0000000110329189:   add    %r10,%rdx
  0x000000011032918c:   cmp    0x248(%rsi),%rdx
  0x0000000110329193:   jne    0x00000001103291a2
  0x0000000110329195:   addq   $0x1,0x250(%rsi)
  0x000000011032919d:   jmpq   0x0000000110329208
  0x00000001103291a2:   cmp    0x258(%rsi),%rdx
  0x00000001103291a9:   jne    0x00000001103291b8
  0x00000001103291ab:   addq   $0x1,0x260(%rsi)
  0x00000001103291b3:   jmpq   0x0000000110329208
  0x00000001103291b8:   cmpq   $0x0,0x248(%rsi)
  0x00000001103291c3:   jne    0x00000001103291dc
  0x00000001103291c5:   mov    %rdx,0x248(%rsi)
  0x00000001103291cc:   movq   $0x1,0x250(%rsi)
  0x00000001103291d7:   jmpq   0x0000000110329208
  0x00000001103291dc:   cmpq   $0x0,0x258(%rsi)
  0x00000001103291e7:   jne    0x0000000110329200
  0x00000001103291e9:   mov    %rdx,0x258(%rsi)
  0x00000001103291f0:   movq   $0x1,0x260(%rsi)
  0x00000001103291fb:   jmpq   0x0000000110329208
  0x0000000110329200:   addq   $0x1,0x238(%rsi)
  0x0000000110329208:   movabs $0x61f0c2628,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x000000061f0c2628})}
  0x0000000110329212:   mov    %rax,%rsi
  0x0000000110329215:   movabs $0xffffffffffffffff,%rax
  0x000000011032921f:   callq  0x000000010fc9dca0           ; ImmutableOopMap {}
                                                            ;*invokevirtual reduceLanesToLong {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@51 (line 609)
                                                            ;   {virtual_call}
  0x0000000110329224:   add    $0x120,%rsp
  0x000000011032922b:   pop    %rbp
  0x000000011032922c:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000110329233:   ja     0x000000011032978f
  0x0000000110329239:   retq
  0x000000011032923a:   movabs $0xffffffffffffffff,%rax
  0x0000000110329244:   add    $0x120,%rsp
  0x000000011032924b:   pop    %rbp
  0x000000011032924c:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000110329253:   ja     0x00000001103297a5
  0x0000000110329259:   retq
  0x000000011032925a:   mov    %rsi,0x108(%rsp)
  0x0000000110329262:   movabs $0x106684c80,%rdx            ;   {metadata(method data for {method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x000000011032926c:   addq   $0x1,0x130(%rdx)
  0x0000000110329274:   movabs $0x0,%rsi                    ;   {oop(NULL)}
  0x000000011032927e:   mov    %rbx,%rdx
  0x0000000110329281:   nopw   0x0(%rax,%rax,1)
  0x0000000110329287:   callq  0x000000010fca1080           ; ImmutableOopMap {[264]=Oop }
                                                            ;*invokestatic outOfBoundsCheckIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.internal.util.Preconditions::checkIndex@12 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x000000011032928c:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x00000001103297bb
  0x000000011032928f:   jmpq   0x00000001103297df
  0x0000000110329294:   movabs $0x106840640,%r10            ;   {metadata({method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000011032929e:   mov    %r10,0x8(%rsp)
  0x00000001103292a3:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103292ab:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@-1 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103292b0:   jmpq   0x0000000110327afa
  0x00000001103292b5:   movabs $0x1066bfb88,%r10            ;   {metadata({method} {0x00000001066bfb88} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103292bf:   mov    %r10,0x8(%rsp)
  0x00000001103292c4:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103292cc:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@-1 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103292d1:   jmpq   0x0000000110327b34
  0x00000001103292d6:   callq  0x000000010fd464a0           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@8 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001103292db:   movabs $0x10661cee8,%r10            ;   {metadata({method} {0x000000010661cee8} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x00000001103292e5:   mov    %r10,0x8(%rsp)
  0x00000001103292ea:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103292f2:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@-1 (line 49)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103292f7:   jmpq   0x0000000110327c16
  0x00000001103292fc:   movabs $0x80007aaa0,%r10            ;   {metadata({method} {0x000000080007aaa0} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x0000000110329306:   mov    %r10,0x8(%rsp)
  0x000000011032930b:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329313:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.util.Objects::checkIndex@-1 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329318:   jmpq   0x0000000110327c58
  0x000000011032931d:   movabs $0x8003a5f50,%r10            ;   {metadata({method} {0x00000008003a5f50} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x0000000110329327:   mov    %r10,0x8(%rsp)
  0x000000011032932c:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329334:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.internal.util.Preconditions::checkIndex@-1 (line 265)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329339:   jmpq   0x0000000110327c97
  0x000000011032933e:   movabs $0x1066cfbd0,%r10            ;   {metadata({method} {0x00000001066cfbd0} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000110329348:   mov    %r10,0x8(%rsp)
  0x000000011032934d:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329355:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::dummyVector@-1 (line 3903)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@19 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011032935a:   jmpq   0x0000000110327d54
  0x000000011032935f:   movabs $0x10654cdd0,%r10            ;   {metadata({method} {0x000000010654cdd0} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x0000000110329369:   mov    %r10,0x8(%rsp)
  0x000000011032936e:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329376:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@-1 (line 295)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::dummyVector@1 (line 3903)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@19 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011032937b:   jmpq   0x0000000110327d8e
  0x0000000110329380:   movabs $0x1066e3b00,%r10            ;   {metadata({method} {0x00000001066e3b00} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x000000011032938a:   mov    %r10,0x8(%rsp)
  0x000000011032938f:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329397:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@-1 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011032939c:   jmpq   0x0000000110327dea
  0x00000001103293a1:   movabs $0x1066c1170,%r10            ;   {metadata({method} {0x00000001066c1170} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103293ab:   mov    %r10,0x8(%rsp)
  0x00000001103293b0:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103293b8:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@-1 (line 3519)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103293bd:   jmpq   0x0000000110327e2c
  0x00000001103293c2:   movabs $0x1066e0a08,%r10            ;   {metadata({method} {0x00000001066e0a08} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector')}
  0x00000001103293cc:   mov    %r10,0x8(%rsp)
  0x00000001103293d1:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103293d9:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector::vspecies@-1 (line 86)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@1 (line 3519)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103293de:   jmpq   0x0000000110327e66
  0x00000001103293e3:   movabs $0x1066cf258,%r10            ;   {metadata({method} {0x00000001066cf258} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x00000001103293ed:   mov    %r10,0x8(%rsp)
  0x00000001103293f2:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103293fa:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::elementType@-1 (line 3805)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@10 (line 3521)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103293ff:   jmpq   0x0000000110327ec7
  0x0000000110329404:   movabs $0x1066c1d50,%r10            ;   {metadata({method} {0x00000001066c1d50} 'charArrayAddress' '([CI)J' in 'jdk/incubator/vector/ShortVector')}
  0x000000011032940e:   mov    %r10,0x8(%rsp)
  0x0000000110329413:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032941b:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::charArrayAddress@-1 (line 3669)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@20 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329420:   jmpq   0x0000000110327f13
  0x0000000110329425:   movabs $0x8000ea368,%r10            ;   {metadata({method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x000000011032942f:   mov    %r10,0x8(%rsp)
  0x0000000110329434:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032943c:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop rdx=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@26 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329441:   jmpq   0x0000000110327f94
  0x0000000110329446:   movabs $0x106800268,%r10            ;   {metadata({method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000110329450:   mov    %r10,0x8(%rsp)
  0x0000000110329455:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032945d:   callq  0x000000010fd4c180           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@26 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329462:   jmpq   0x0000000110327fe8
  0x0000000110329467:   mov    %rax,(%rsp)
  0x000000011032946b:   callq  0x000000010fd48ba0           ; ImmutableOopMap {}
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x0000000110329470:   callq  0x000000010fd464a0           ; ImmutableOopMap {rdi=Oop }
                                                            ;*invokevirtual sub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000110329475:   movabs $0x1066babe8,%r10            ;   {metadata({method} {0x00000001066babe8} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000011032947f:   mov    %r10,0x8(%rsp)
  0x0000000110329484:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032948c:   callq  0x000000010fd4c180           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::sub@-1 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329491:   jmpq   0x00000001103281fe
  0x0000000110329496:   movabs $0x1066b9978,%r10            ;   {metadata({method} {0x00000001066b9978} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103294a0:   mov    %r10,0x8(%rsp)
  0x00000001103294a5:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103294ad:   callq  0x000000010fd4c180           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@-1 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103294b2:   jmpq   0x000000011032823b
  0x00000001103294b7:   movabs $0x1066b72a0,%r10            ;   {metadata({method} {0x00000001066b72a0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x00000001103294c1:   mov    %r10,0x8(%rsp)
  0x00000001103294c6:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103294ce:   callq  0x000000010fd4c180           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::opKind@-1 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103294d3:   jmpq   0x0000000110328275
  0x00000001103294d8:   movabs $0x1065434e8,%r10            ;   {metadata({method} {0x00000001065434e8} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x00000001103294e2:   mov    %r10,0x8(%rsp)
  0x00000001103294e7:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103294ef:   callq  0x000000010fd4c180           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators::opKind@-1 (line 409)
                                                            ; - jdk.incubator.vector.ShortVector::opKind@2 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103294f4:   jmpq   0x00000001103282af
  0x00000001103294f9:   movabs $0x106718228,%r10            ;   {metadata({method} {0x0000000106718228} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x0000000110329503:   mov    %r10,0x8(%rsp)
  0x0000000110329508:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329510:   callq  0x000000010fd4c180           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$OperatorImpl::opKind@-1 (line 883)
                                                            ; - jdk.incubator.vector.VectorOperators::opKind@5 (line 409)
                                                            ; - jdk.incubator.vector.ShortVector::opKind@2 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329515:   jmpq   0x0000000110328377
  0x000000011032951a:   callq  0x000000010fd464a0           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011032951f:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*invokevirtual anyTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000110329524:   movabs $0x1066e9328,%r10            ;   {metadata({method} {0x00000001066e9328} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000011032952e:   mov    %r10,0x8(%rsp)
  0x0000000110329533:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032953b:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@-1 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329540:   jmpq   0x000000011032863c
  0x0000000110329545:   movabs $0x1066e8560,%r10            ;   {metadata({method} {0x00000001066e8560} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000011032954f:   mov    %r10,0x8(%rsp)
  0x0000000110329554:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032955c:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::vspecies@-1 (line 544)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@11 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329561:   jmpq   0x0000000110328679
  0x0000000110329566:   movabs $0x1066d0608,%r10            ;   {metadata({method} {0x00000001066d0608} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000110329570:   mov    %r10,0x8(%rsp)
  0x0000000110329575:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032957d:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rax=Oop rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@-1 (line 4006)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329582:   jmpq   0x00000001103286c0
  0x0000000110329587:   movabs $0x1066e94d8,%r10            ;   {metadata({method} {0x00000001066e94d8} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000110329591:   mov    %r10,0x8(%rsp)
  0x0000000110329596:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032959e:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@-1 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103295a3:   jmpq   0x0000000110328738
  0x00000001103295a8:   movabs $0x8000ea368,%r10            ;   {metadata({method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x00000001103295b2:   mov    %r10,0x8(%rsp)
  0x00000001103295b7:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103295bf:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop [256]=Oop rdx=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@19 (line 704)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103295c4:   jmpq   0x00000001103287c1
  0x00000001103295c9:   movabs $0x106800268,%r10            ;   {metadata({method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x00000001103295d3:   mov    %r10,0x8(%rsp)
  0x00000001103295d8:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103295e0:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@19 (line 704)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103295e5:   jmpq   0x0000000110328815
  0x00000001103295ea:   mov    %rax,(%rsp)
  0x00000001103295ee:   callq  0x000000010fd48ba0           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@27 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x00000001103295f3:   movabs $0x8000ea368,%r10            ;   {metadata({method} {0x00000008000ea368} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x00000001103295fd:   mov    %r10,0x8(%rsp)
  0x0000000110329602:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032960a:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop rax=Oop rdx=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@18 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011032960f:   jmpq   0x0000000110328a46
  0x0000000110329614:   movabs $0x106800268,%r10            ;   {metadata({method} {0x0000000106800268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x000000011032961e:   mov    %r10,0x8(%rsp)
  0x0000000110329623:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032962b:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@18 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329630:   jmpq   0x0000000110328a9a
  0x0000000110329635:   movabs $0x106535d80,%r10            ;   {metadata({method} {0x0000000106535d80} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x000000011032963f:   mov    %r10,0x8(%rsp)
  0x0000000110329644:   movq   $0xffffffffffffffff,(%rsp)
  0x000000011032964c:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@-1 (line 282)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329651:   jmpq   0x0000000110328bea
  0x0000000110329656:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop }
                                                            ;*getfield laneType {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::castShape@12 (line 285)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011032965b:   movabs $0x10671e040,%r10            ;   {metadata({method} {0x000000010671e040} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110329665:   mov    %r10,0x8(%rsp)
  0x000000011032966a:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329672:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@-1 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329677:   jmpq   0x0000000110328ce5
  0x000000011032967c:   movabs $0x10671df80,%r10            ;   {metadata({method} {0x000000010671df80} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110329686:   mov    %r10,0x8(%rsp)
  0x000000011032968b:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329693:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@-1 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000110329698:   jmpq   0x0000000110328d62
  0x000000011032969d:   movabs $0x10671e230,%r10            ;   {metadata({method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001103296a7:   mov    %r10,0x8(%rsp)
  0x00000001103296ac:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103296b4:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@-1 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103296b9:   jmpq   0x0000000110328d9c
  0x00000001103296be:   movabs $0x10671e780,%r10            ;   {metadata({method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001103296c8:   mov    %r10,0x8(%rsp)
  0x00000001103296cd:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001103296d5:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@-1 (line 1072)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001103296da:   jmpq   0x0000000110328dd6
  0x00000001103296df:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001103296e4:   mov    %rsi,(%rsp)
  0x00000001103296e8:   mov    %rcx,0x8(%rsp)
  0x00000001103296ed:   callq  0x000000010fd44f20           ; ImmutableOopMap {[248]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x00000001103296f2:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001103296f7:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001103296fc:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000110329701:   mov    %rsi,(%rsp)
  0x0000000110329705:   mov    %rdx,0x8(%rsp)
  0x000000011032970a:   callq  0x000000010fd44f20           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x000000011032970f:   movabs $0x10671e230,%r10            ;   {metadata({method} {0x000000010671e230} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000110329719:   mov    %r10,0x8(%rsp)
  0x000000011032971e:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329726:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@-1 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011032972b:   jmpq   0x0000000110328ede
  0x0000000110329730:   movabs $0x10671e780,%r10            ;   {metadata({method} {0x000000010671e780} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000011032973a:   mov    %r10,0x8(%rsp)
  0x000000011032973f:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000110329747:   callq  0x000000010fd4c180           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@-1 (line 1072)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x000000011032974c:   jmpq   0x0000000110328f18
  0x0000000110329751:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000110329756:   mov    %rsi,(%rsp)
  0x000000011032975a:   mov    %rcx,0x8(%rsp)
  0x000000011032975f:   callq  0x000000010fd44f20           ; ImmutableOopMap {[248]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000110329764:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000110329769:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011032976e:   callq  0x000000010fd464a0           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000110329773:   movq   $0x5,(%rsp)
  0x000000011032977b:   mov    %rsi,0x8(%rsp)
  0x0000000110329780:   callq  0x000000010fd44f20           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000110329785:   callq  0x000000010fd464a0           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual mul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011032978a:   callq  0x000000010fd464a0           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual reduceLanesToLong {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@51 (line 609)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x000000011032978f:   movabs $0x11032922c,%r10            ;   {internal_word}
  0x0000000110329799:   mov    %r10,0x358(%r15)
  0x00000001103297a0:   jmpq   0x000000010fca7100           ;   {runtime_call SafepointBlob}
  0x00000001103297a5:   movabs $0x11032924c,%r10            ;   {internal_word}
  0x00000001103297af:   mov    %r10,0x358(%r15)
  0x00000001103297b6:   jmpq   0x000000010fca7100           ;   {runtime_call SafepointBlob}
  0x00000001103297bb:   callq  0x000000010fd464a0           ; ImmutableOopMap {[264]=Oop rax=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@15 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001103297c0:   nop
  0x00000001103297c1:   nop
  0x00000001103297c2:   mov    0x3d0(%r15),%rax
  0x00000001103297c9:   movq   $0x0,0x3d0(%r15)
  0x00000001103297d4:   movq   $0x0,0x3d8(%r15)
  0x00000001103297df:   add    $0x120,%rsp
  0x00000001103297e6:   pop    %rbp
  0x00000001103297e7:   jmpq   0x000000010fd45580           ;   {runtime_call unwind_exception Runtime1 stub}
  0x00000001103297ec:   hlt
  0x00000001103297ed:   hlt
  0x00000001103297ee:   hlt
  0x00000001103297ef:   hlt
  0x00000001103297f0:   hlt
  0x00000001103297f1:   hlt
  0x00000001103297f2:   hlt
  0x00000001103297f3:   hlt
  0x00000001103297f4:   hlt
  0x00000001103297f5:   hlt
  0x00000001103297f6:   hlt
  0x00000001103297f7:   hlt
  0x00000001103297f8:   hlt
  0x00000001103297f9:   hlt
  0x00000001103297fa:   hlt
  0x00000001103297fb:   hlt
  0x00000001103297fc:   hlt
  0x00000001103297fd:   hlt
  0x00000001103297fe:   hlt
  0x00000001103297ff:   hlt
[Stub Code]
  0x0000000110329800:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x0000000110329805:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032980f:   jmpq   0x000000011032980f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329814:   nop
  0x0000000110329815:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032981f:   jmpq   0x000000011032981f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329824:   nop
  0x0000000110329825:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032982f:   jmpq   0x000000011032982f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329834:   nop
  0x0000000110329835:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032983f:   jmpq   0x000000011032983f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329844:   nop
  0x0000000110329845:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032984f:   jmpq   0x000000011032984f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329854:   nop
  0x0000000110329855:   movabs $0x800005620,%rbx            ;   {static_stub}
  0x000000011032985f:   jmpq   0x000000010fd6f7f9           ;   {runtime_call I2C/C2I adapters}
  0x0000000110329864:   nop
  0x0000000110329865:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032986f:   jmpq   0x000000011032986f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329874:   nop
  0x0000000110329875:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032987f:   jmpq   0x000000011032987f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329884:   nop
  0x0000000110329885:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032988f:   jmpq   0x000000011032988f           ;   {runtime_call const_jargs+-98771041}
  0x0000000110329894:   nop
  0x0000000110329895:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011032989f:   jmpq   0x000000011032989f           ;   {runtime_call const_jargs+-98771041}
  0x00000001103298a4:   nop
  0x00000001103298a5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001103298af:   jmpq   0x00000001103298af           ;   {runtime_call const_jargs+-98771041}
  0x00000001103298b4:   nop
  0x00000001103298b5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001103298bf:   jmpq   0x00000001103298bf           ;   {runtime_call const_jargs+-98771041}
  0x00000001103298c4:   nop
  0x00000001103298c5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001103298cf:   jmpq   0x00000001103298cf           ;   {runtime_call const_jargs+-98771041}
[Exception Handler]
  0x00000001103298d4:   callq  0x000000010fd48280           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x00000001103298d9:   movabs $0x107a8ce43,%rdi            ;   {external_word}
  0x00000001103298e3:   and    $0xfffffffffffffff0,%rsp
  0x00000001103298e7:   callq  0x000000010772fc50           ;   {runtime_call MacroAssembler::debug64(char*, long long, long long*)}
  0x00000001103298ec:   hlt
[Deopt Handler Code]
  0x00000001103298ed:   movabs $0x1103298ed,%r10            ;   {section_word}
  0x00000001103298f7:   push   %r10
  0x00000001103298f9:   jmpq   0x000000010fca63a0           ;   {runtime_call DeoptimizationBlob}
  0x00000001103298fe:   hlt
  0x00000001103298ff:   hlt
--------------------------------------------------------------------------------

============================= C2-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c2)     642  978       4       ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd (55 bytes)
 total in heap  [0x0000000117783a90,0x0000000117783f58] = 1224
 relocation     [0x0000000117783bf0,0x0000000117783c10] = 32
 constants      [0x0000000117783c20,0x0000000117783c40] = 32
 main code      [0x0000000117783c40,0x0000000117783d80] = 320
 stub code      [0x0000000117783d80,0x0000000117783d98] = 24
 oops           [0x0000000117783d98,0x0000000117783da8] = 16
 metadata       [0x0000000117783da8,0x0000000117783e60] = 184
 scopes data    [0x0000000117783e60,0x0000000117783eb0] = 80
 scopes pcs     [0x0000000117783eb0,0x0000000117783f00] = 80
 dependencies   [0x0000000117783f00,0x0000000117783f48] = 72
 nul chk table  [0x0000000117783f48,0x0000000117783f58] = 16

--------------------------------------------------------------------------------

[Constant Pool]
             Address          hex4                    hex8
  0x0000000117783c20:   0x00300030      0x0030003000300030
  0x0000000117783c24:   0x00300030
  0x0000000117783c28:   0x00090009      0x0009000900090009
  0x0000000117783c2c:   0x00090009
  0x0000000117783c30:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4
  0x0000000117783c34:   0xf4f4f4f4
  0x0000000117783c38:   0xf4f4f4f4      0xf4f4f4f4f4f4f4f4
  0x0000000117783c3c:   0xf4f4f4f4

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000106840640} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  #           [sp+0x30]  (sp of caller)
  0x0000000117783c40:   mov    %eax,-0x14000(%rsp)          ;   {no_reloc}
  0x0000000117783c47:   push   %rbp
  0x0000000117783c48:   sub    $0x20,%rsp
  0x0000000117783c4c:   mov    0xc(%rsi),%r10d              ; implicit exception: dispatches to 0x0000000117783d3c
  0x0000000117783c50:   add    $0xfffffff9,%r10d
  0x0000000117783c54:   test   %r10d,%r10d
  0x0000000117783c57:   jl     0x0000000117783d24
  0x0000000117783c5d:   data16 xchg %ax,%ax
  0x0000000117783c60:   cmp    %r10d,%edx
  0x0000000117783c63:   jae    0x0000000117783d0c
  0x0000000117783c69:   vmovdqu 0x10(%rsi,%rdx,2),%xmm0
  0x0000000117783c6f:   vmovq  -0x57(%rip),%xmm1        # 0x0000000117783c20
                                                            ;   {section_word}
  0x0000000117783c77:   vpbroadcastw %xmm1,%xmm1
  0x0000000117783c7c:   vpsubw %xmm1,%xmm0,%xmm0
  0x0000000117783c80:   vmovq  -0x60(%rip),%xmm1        # 0x0000000117783c28
                                                            ;   {section_word}
  0x0000000117783c88:   vpbroadcastw %xmm1,%xmm1
  0x0000000117783c8d:   vpcmpeqb %xmm3,%xmm3,%xmm3
  0x0000000117783c91:   vpmovzxwd %xmm0,%ymm4
  0x0000000117783c96:   vpmovzxwd %xmm1,%ymm2
  0x0000000117783c9b:   vpcmpgtd %ymm2,%ymm4,%ymm1
  0x0000000117783c9f:   vpackssdw %ymm1,%ymm1,%ymm1
  0x0000000117783ca3:   vpermpd $0x8,%ymm1,%ymm1
  0x0000000117783ca9:   vptest %xmm3,%xmm1
  0x0000000117783cae:   jne    0x0000000117783d03
  0x0000000117783cb0:   vpmovsxwd %xmm0,%ymm0
  0x0000000117783cb5:   movabs $0x61f0a35e0,%r10            ;   {oop([I{0x000000061f0a35e0})}
  0x0000000117783cbf:   vpmulld 0x10(%r10),%ymm0,%ymm0
  0x0000000117783cc5:   xor    %r11d,%r11d
  0x0000000117783cc8:   vphaddd %ymm0,%ymm0,%ymm2
  0x0000000117783ccd:   vextracti128 $0x1,%ymm2,%xmm1
  0x0000000117783cd3:   vpaddd %xmm1,%xmm2,%xmm2
  0x0000000117783cd7:   vphaddd %xmm2,%xmm2,%xmm2
  0x0000000117783cdc:   vmovd  %r11d,%xmm1
  0x0000000117783ce1:   vpaddd %xmm1,%xmm2,%xmm2
  0x0000000117783ce5:   vmovd  %xmm2,%r11d
  0x0000000117783cea:   movslq %r11d,%rax
  0x0000000117783ced:   vzeroupper
  0x0000000117783cf0:   add    $0x20,%rsp
  0x0000000117783cf4:   pop    %rbp
  0x0000000117783cf5:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000117783cfc:   ja     0x0000000117783d4c
  0x0000000117783d02:   retq
  0x0000000117783d03:   mov    $0xffffffffffffffff,%rax
  0x0000000117783d0a:   jmp    0x0000000117783ced
  0x0000000117783d0c:   mov    %rsi,%rbp
  0x0000000117783d0f:   mov    %edx,(%rsp)
  0x0000000117783d12:   mov    %r10d,0x4(%rsp)
  0x0000000117783d17:   mov    $0xffffffe4,%esi
  0x0000000117783d1c:   vzeroupper
  0x0000000117783d1f:   callq  0x000000010fca6000           ; ImmutableOopMap {rbp=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000117783d24:   mov    %rsi,%rbp
  0x0000000117783d27:   mov    %edx,(%rsp)
  0x0000000117783d2a:   mov    %r10d,0x4(%rsp)
  0x0000000117783d2f:   mov    $0xffffffcc,%esi
  0x0000000117783d34:   vzeroupper
  0x0000000117783d37:   callq  0x000000010fca6000           ; ImmutableOopMap {rbp=Oop }
                                                            ;*invokestatic checkIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000117783d3c:   mov    $0xfffffff6,%esi
  0x0000000117783d41:   data16 xchg %ax,%ax
  0x0000000117783d44:   vzeroupper
  0x0000000117783d47:   callq  0x000000010fca6000           ; ImmutableOopMap {}
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@8 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call UncommonTrapBlob}
  0x0000000117783d4c:   movabs $0x117783cf5,%r10            ;   {internal_word}
  0x0000000117783d56:   mov    %r10,0x358(%r15)
  0x0000000117783d5d:   jmpq   0x000000010fca7100           ;   {runtime_call SafepointBlob}
  0x0000000117783d62:   hlt
  0x0000000117783d63:   hlt
  0x0000000117783d64:   hlt
  0x0000000117783d65:   hlt
  0x0000000117783d66:   hlt
  0x0000000117783d67:   hlt
  0x0000000117783d68:   hlt
  0x0000000117783d69:   hlt
  0x0000000117783d6a:   hlt
  0x0000000117783d6b:   hlt
  0x0000000117783d6c:   hlt
  0x0000000117783d6d:   hlt
  0x0000000117783d6e:   hlt
  0x0000000117783d6f:   hlt
  0x0000000117783d70:   hlt
  0x0000000117783d71:   hlt
  0x0000000117783d72:   hlt
  0x0000000117783d73:   hlt
  0x0000000117783d74:   hlt
  0x0000000117783d75:   hlt
  0x0000000117783d76:   hlt
  0x0000000117783d77:   hlt
  0x0000000117783d78:   hlt
  0x0000000117783d79:   hlt
  0x0000000117783d7a:   hlt
  0x0000000117783d7b:   hlt
  0x0000000117783d7c:   hlt
  0x0000000117783d7d:   hlt
  0x0000000117783d7e:   hlt
  0x0000000117783d7f:   hlt
[Exception Handler]
  0x0000000117783d80:   jmpq   0x000000010fd45880           ;   {no_reloc}
[Deopt Handler Code]
  0x0000000117783d85:   callq  0x0000000117783d8a
  0x0000000117783d8a:   subq   $0x5,(%rsp)
  0x0000000117783d8f:   jmpq   0x000000010fca63a0           ;   {runtime_call DeoptimizationBlob}
  0x0000000117783d94:   hlt
  0x0000000117783d95:   hlt
  0x0000000117783d96:   hlt
  0x0000000117783d97:   hlt
--------------------------------------------------------------------------------

FastDoubleParser               :    515.78 MB/s (+/- 7.1 %)    29.39 Mfloat/s      34.02 ns/f
FastDoubleParserFromCharArray  :    532.63 MB/s (+/- 8.1 %)    30.32 Mfloat/s      32.98 ns/f
FastDoubleParserFromByteArray  :    582.37 MB/s (+/- 5.0 %)    33.32 Mfloat/s      30.01 ns/f
Double                         :     96.05 MB/s (+/- 3.5 %)     5.51 Mfloat/s     181.62 ns/f

Speedup FastDoubleParser              vs Double: 5.37
Speedup FastDoubleParserFromCharArray vs Double: 5.55
Speedup FastDoubleParserFromByteArray vs Double: 6.06


You can also provide a filename: it should contain one string per line corresponding to a number.

Process finished with exit code 0
