GRAALVM

/Library/Java/JavaVirtualMachines/graalvm-ce-java17-21.3.0/Contents/Home/bin/java -Dvisualvm.id=31049066500300 -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:CompileCommand=print,*FastDoubleParser*.tryToParseEightDigits* -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=51012:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-core-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jopt-simple-4.6.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/commons-math3-3.2.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/jmh-generator-annprocess-1.28.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-api-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/apiguardian-api-1.1.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/opentest4j-1.2.0.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-commons-1.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-params-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-jupiter-engine-5.7.1.jar:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/lib/junit-platform-engine-1.7.1.jar -p /Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/production/FastDoubleParser:/Users/Shared/Developer/Java/FastDoubleParser/github/FastDoubleParser/out/production/FastDoubleParserDemo -m ch.randelshofer.fastdoubleparserdemo/ch.randelshofer.fastdoubleparserdemo.Main
CompileCommand: print *FastDoubleParser*.tryToParseEightDigits* bool print = true
WARNING: Using incubator modules: jdk.incubator.vector
Intel(R) Core(TM) i7-8700B CPU @ 3.20GHz SIMD-256
x86_64, Mac OS X, 12.1, 12
OpenJDK 64-Bit Server VM, GraalVM Community, 17.0.1+12-jvmci-21.3-b05
-XX:ThreadPriorityPolicy=1, -XX:+UnlockExperimentalVMOptions, -XX:+EnableJVMCIProduct, -XX:-UnlockExperimentalVMOptions, -XX:+UnlockExperimentalVMOptions, -XX:+UnlockDiagnosticVMOptions, -XX:CompileCommand=print,*FastDoubleParser*.tryToParseEightDigits*

parsing random numbers in the range [0,1)

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)  560       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits (6 bytes)
 total in heap  [0x00000001120a5d10,0x00000001120a6030] = 800
 relocation     [0x00000001120a5e70,0x00000001120a5ea8] = 56
 main code      [0x00000001120a5ec0,0x00000001120a5f80] = 192
 stub code      [0x00000001120a5f80,0x00000001120a5fc0] = 64
 oops           [0x00000001120a5fc0,0x00000001120a5fc8] = 8
 metadata       [0x00000001120a5fc8,0x00000001120a5fd0] = 8
 scopes data    [0x00000001120a5fd0,0x00000001120a5fe8] = 24
 scopes pcs     [0x00000001120a5fe8,0x00000001120a6028] = 64
 dependencies   [0x00000001120a6028,0x00000001120a6030] = 8

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000135033340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x40]  (sp of caller)
  0x00000001120a5ec0:   mov    %eax,-0x14000(%rsp)
  0x00000001120a5ec7:   push   %rbp
  0x00000001120a5ec8:   sub    $0x30,%rsp
  0x00000001120a5ecc:   movabs $0x135034a38,%rdi            ;   {metadata(method data for {method} {0x0000000135033340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001120a5ed6:   mov    0xac(%rdi),%ebx
  0x00000001120a5edc:   add    $0x2,%ebx
  0x00000001120a5edf:   mov    %ebx,0xac(%rdi)
  0x00000001120a5ee5:   and    $0x7fe,%ebx
  0x00000001120a5eeb:   cmp    $0x0,%ebx
  0x00000001120a5eee:   je     0x00000001120a5f1f
  0x00000001120a5ef4:   movabs $0x135034a38,%rdi            ;   {metadata(method data for {method} {0x0000000135033340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001120a5efe:   addq   $0x1,0xf0(%rdi)
  0x00000001120a5f06:   nop
  0x00000001120a5f07:   callq  0x00000001120a5f85           ; ImmutableOopMap {}
                                                            ;*invokestatic tryToParseEightDigitsSwarIndependentMultiplications {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@2 (line 608)
                                                            ;   {static_call}
  0x00000001120a5f0c:   add    $0x30,%rsp
  0x00000001120a5f10:   pop    %rbp
  0x00000001120a5f11:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x00000001120a5f18:   ja     0x00000001120a5f3d
  0x00000001120a5f1e:   retq
  0x00000001120a5f1f:   movabs $0x135033340,%r10            ;   {metadata({method} {0x0000000135033340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001120a5f29:   mov    %r10,0x8(%rsp)
  0x00000001120a5f2e:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001120a5f36:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@-1 (line 608)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001120a5f3b:   jmp    0x00000001120a5ef4
  0x00000001120a5f3d:   movabs $0x1120a5f11,%r10            ;   {internal_word}
  0x00000001120a5f47:   mov    %r10,0x358(%r15)
  0x00000001120a5f4e:   jmpq   0x0000000111a6d100           ;   {runtime_call SafepointBlob}
  0x00000001120a5f53:   nop
  0x00000001120a5f54:   nop
  0x00000001120a5f55:   mov    0x3d0(%r15),%rax
  0x00000001120a5f5c:   movq   $0x0,0x3d0(%r15)
  0x00000001120a5f67:   movq   $0x0,0x3d8(%r15)
  0x00000001120a5f72:   add    $0x30,%rsp
  0x00000001120a5f76:   pop    %rbp
  0x00000001120a5f77:   jmpq   0x0000000111b0c000           ;   {runtime_call unwind_exception Runtime1 stub}
  0x00000001120a5f7c:   hlt
  0x00000001120a5f7d:   hlt
  0x00000001120a5f7e:   hlt
  0x00000001120a5f7f:   hlt
[Stub Code]
  0x00000001120a5f80:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x00000001120a5f85:   movabs $0x135033478,%rbx            ;   {static_stub}
  0x00000001120a5f8f:   jmpq   0x0000000111a6ba7f           ;   {runtime_call I2C/C2I adapters}
[Exception Handler]
  0x00000001120a5f94:   callq  0x0000000111b0f600           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x00000001120a5f99:   movabs $0x10827e512,%rdi            ;   {external_word}
  0x00000001120a5fa3:   and    $0xfffffffffffffff0,%rsp
  0x00000001120a5fa7:   callq  0x0000000107f20790           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x00000001120a5fac:   hlt
[Deopt Handler Code]
  0x00000001120a5fad:   movabs $0x1120a5fad,%r10            ;   {section_word}
  0x00000001120a5fb7:   push   %r10
  0x00000001120a5fb9:   jmpq   0x0000000111a6c020           ;   {runtime_call DeoptimizationBlob}
  0x00000001120a5fbe:   hlt
  0x00000001120a5fbf:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

=========================== JVMCI-compiled nmethod =============================
----------------------------------- Assembly -----------------------------------

Compiled method (JVMCI)  623       4       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits (6 bytes)
 total in heap  [0x0000000119521d10,0x0000000119522038] = 808
 relocation     [0x0000000119521e70,0x0000000119521e80] = 16
 main code      [0x0000000119521e80,0x0000000119521f86] = 262
 stub code      [0x0000000119521f86,0x0000000119521f88] = 2
 oops           [0x0000000119521f88,0x0000000119521f90] = 8
 metadata       [0x0000000119521f90,0x0000000119521fb0] = 32
 scopes data    [0x0000000119521fb0,0x0000000119521fc0] = 16
 scopes pcs     [0x0000000119521fc0,0x0000000119522010] = 80
 dependencies   [0x0000000119522010,0x0000000119522018] = 8
 nul chk table  [0x0000000119522018,0x0000000119522028] = 16
 JVMCI data     [0x0000000119522028,0x0000000119522038] = 16

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000135033340} 'tryToParseEightDigits' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x20]  (sp of caller)
  0x0000000119521e80:   mov    %eax,-0x14000(%rsp)
  0x0000000119521e87:   sub    $0x18,%rsp
  0x0000000119521e8b:   mov    %rbp,0x10(%rsp)              ; ImmutableOopMap {rsi=Oop }
                                                            ;*aload_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@0 (line 608)
  0x0000000119521e90:   mov    0xc(%rsi),%eax               ; implicit exception: dispatches to 0x0000000119521f5b
  0x0000000119521e93:   cmp    $0x7,%eax
  0x0000000119521e96:   jb     0x0000000119521f3f
  0x0000000119521e9c:   lea    -0x7(%rax),%eax
  0x0000000119521e9f:   nop
  0x0000000119521ea0:   cmp    %edx,%eax
  0x0000000119521ea2:   jbe    0x0000000119521f3f
  0x0000000119521ea8:   mov    0x10(%rsi,%rdx,1),%rax
  0x0000000119521ead:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x0000000119521eb7:   add    %rax,%r10
  0x0000000119521eba:   movabs $0x4646464646464646,%r11
  0x0000000119521ec4:   add    %r11,%rax
  0x0000000119521ec7:   or     %r10,%rax
  0x0000000119521eca:   movabs $0x8080808080808080,%r11
  0x0000000119521ed4:   test   %r11,%rax
  0x0000000119521ed7:   jne    0x0000000119521f38
  0x0000000119521edd:   imul   $0xa01,%r10,%rax
  0x0000000119521ee4:   sar    $0x8,%rax
  0x0000000119521ee8:   movabs $0xff000000ff,%r10
  0x0000000119521ef2:   mov    %rax,%r11
  0x0000000119521ef5:   and    %r10,%r11
  0x0000000119521ef8:   movabs $0xf424000000064,%r8
  0x0000000119521f02:   imul   %r8,%r11
  0x0000000119521f06:   shr    $0x10,%rax
  0x0000000119521f0a:   and    %r10,%rax
  0x0000000119521f0d:   movabs $0x271000000001,%r10
  0x0000000119521f17:   imul   %r10,%rax
  0x0000000119521f1b:   add    %rax,%r11
  0x0000000119521f1e:   shr    $0x20,%r11
  0x0000000119521f22:   mov    %r11d,%eax
  0x0000000119521f25:   mov    0x10(%rsp),%rbp
  0x0000000119521f2a:   add    $0x18,%rsp
  0x0000000119521f2e:   mov    0x348(%r15),%rcx
  0x0000000119521f35:   test   %eax,(%rcx)                  ;   {poll_return}
  0x0000000119521f37:   retq
  0x0000000119521f38:   mov    $0xffffffff,%eax
  0x0000000119521f3d:   jmp    0x0000000119521f25
  0x0000000119521f3f:   movl   $0xffffffe4,0x370(%r15)
  0x0000000119521f4a:   movq   $0x0,0x378(%r15)
  0x0000000119521f55:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=Oop }
                                                            ;*aload_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@0 (line 608)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000119521f5a:   nop
  0x0000000119521f5b:   movl   $0xfffffff5,0x370(%r15)
  0x0000000119521f66:   movq   $0x0,0x378(%r15)
  0x0000000119521f71:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=Oop }
                                                            ;*aload_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigits@0 (line 608)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x0000000119521f76:   nop
[Exception Handler]
  0x0000000119521f77:   callq  0x0000000111b2d380           ;   {runtime_call Stub<ExceptionHandlerStub.exceptionHandler>}
  0x0000000119521f7c:   nop
  0x0000000119521f7d:   data16 xchg %ax,%ax
[Deopt Handler Code]
  0x0000000119521f80:   callq  0x0000000111a6c020           ;   {runtime_call DeoptimizationBlob}
  0x0000000119521f85:   nop
[Stub Code]
  0x0000000119521f86:   hlt
  0x0000000119521f87:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)  561       2       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications (86 bytes)
 total in heap  [0x00000001120b8310,0x00000001120b8898] = 1416
 relocation     [0x00000001120b8470,0x00000001120b84c0] = 80
 main code      [0x00000001120b84c0,0x00000001120b86e0] = 544
 stub code      [0x00000001120b86e0,0x00000001120b8730] = 80
 oops           [0x00000001120b8730,0x00000001120b8748] = 24
 metadata       [0x00000001120b8748,0x00000001120b8770] = 40
 scopes data    [0x00000001120b8770,0x00000001120b8808] = 152
 scopes pcs     [0x00000001120b8808,0x00000001120b8878] = 112
 dependencies   [0x00000001120b8878,0x00000001120b8880] = 8
 nul chk table  [0x00000001120b8880,0x00000001120b8898] = 24

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000135033478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x100]  (sp of caller)
  0x00000001120b84c0:   mov    %eax,-0x14000(%rsp)
  0x00000001120b84c7:   push   %rbp
  0x00000001120b84c8:   sub    $0xf0,%rsp
  0x00000001120b84cf:   movabs $0x135033ae8,%rcx
  0x00000001120b84d9:   mov    0x8(%rcx),%r8d
  0x00000001120b84dd:   add    $0x2,%r8d
  0x00000001120b84e1:   mov    %r8d,0x8(%rcx)
  0x00000001120b84e5:   and    $0xffe,%r8d
  0x00000001120b84ec:   cmp    $0x0,%r8d
  0x00000001120b84f0:   je     0x00000001120b8644
  0x00000001120b84f6:   mov    0xc(%rsi),%ecx               ; implicit exception: dispatches to 0x00000001120b8665
  0x00000001120b84f9:   sub    $0x7,%ecx
  0x00000001120b84fc:   cmp    $0x0,%edx
  0x00000001120b84ff:   jl     0x00000001120b861c
  0x00000001120b8505:   cmp    %ecx,%edx
  0x00000001120b8507:   jge    0x00000001120b861c
  0x00000001120b850d:   movabs $0x61fc02968,%rdi            ;   {oop(a 'jdk/internal/misc/Unsafe'{0x000000061fc02968})}
  0x00000001120b8517:   movslq %edx,%rdx
  0x00000001120b851a:   mov    %rdx,%rcx
  0x00000001120b851d:   movabs $0x10,%r10
  0x00000001120b8527:   add    %r10,%rcx
  0x00000001120b852a:   mov    %rsi,%rdx
  0x00000001120b852d:   mov    $0x0,%r8d
  0x00000001120b8533:   mov    %rdi,%rsi
  0x00000001120b8536:   nop
  0x00000001120b8537:   callq  0x00000001120b86e5           ; ImmutableOopMap {}
                                                            ;*invokevirtual getLongUnaligned {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@32 (line 118)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {optimized virtual_call}
  0x00000001120b853c:   mov    %rax,%rcx
  0x00000001120b853f:   movabs $0x3030303030303030,%r10
  0x00000001120b8549:   sub    %r10,%rcx
  0x00000001120b854c:   movabs $0x4646464646464646,%r10
  0x00000001120b8556:   add    %r10,%rax
  0x00000001120b8559:   or     %rcx,%rax
  0x00000001120b855c:   movabs $0x8080808080808080,%r10
  0x00000001120b8566:   and    %r10,%rax
  0x00000001120b8569:   movabs $0x0,%rsi
  0x00000001120b8573:   cmp    %rsi,%rax
  0x00000001120b8576:   jne    0x00000001120b8601
  0x00000001120b857c:   movabs $0xa01,%rax
  0x00000001120b8586:   mov    %rax,%rsi
  0x00000001120b8589:   mov    %rcx,%rax
  0x00000001120b858c:   imul   %rsi,%rax
  0x00000001120b8590:   mov    $0x8,%ecx
  0x00000001120b8595:   mov    %rax,%rsi
  0x00000001120b8598:   sar    %cl,%rsi
  0x00000001120b859b:   movabs $0xff000000ff,%rdx
  0x00000001120b85a5:   mov    %rsi,%rax
  0x00000001120b85a8:   and    %rdx,%rax
  0x00000001120b85ab:   movabs $0xf424000000064,%rcx
  0x00000001120b85b5:   imul   %rcx,%rax
  0x00000001120b85b9:   mov    %rax,%rdi
  0x00000001120b85bc:   mov    $0x10,%ecx
  0x00000001120b85c1:   shr    %cl,%rsi
  0x00000001120b85c4:   and    %rdx,%rsi
  0x00000001120b85c7:   movabs $0x271000000001,%rax
  0x00000001120b85d1:   mov    %rax,%rcx
  0x00000001120b85d4:   mov    %rsi,%rax
  0x00000001120b85d7:   imul   %rcx,%rax
  0x00000001120b85db:   add    %rax,%rdi
  0x00000001120b85de:   mov    $0x20,%ecx
  0x00000001120b85e3:   shr    %cl,%rdi
  0x00000001120b85e6:   mov    %edi,%edi
  0x00000001120b85e8:   mov    %rdi,%rax
  0x00000001120b85eb:   add    $0xf0,%rsp
  0x00000001120b85f2:   pop    %rbp
  0x00000001120b85f3:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x00000001120b85fa:   ja     0x00000001120b866a
  0x00000001120b8600:   retq
  0x00000001120b8601:   mov    $0xffffffff,%eax
  0x00000001120b8606:   add    $0xf0,%rsp
  0x00000001120b860d:   pop    %rbp
  0x00000001120b860e:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x00000001120b8615:   ja     0x00000001120b8680
  0x00000001120b861b:   retq
  0x00000001120b861c:   mov    %rsi,0xe0(%rsp)
  0x00000001120b8624:   movabs $0x61f1ce820,%rdi            ;   {oop(a 'jdk/internal/util/Preconditions$1'{0x000000061f1ce820})}
  0x00000001120b862e:   mov    %rdi,%rsi
  0x00000001120b8631:   nopw   0x0(%rax,%rax,1)
  0x00000001120b8637:   callq  0x0000000111a67080           ; ImmutableOopMap {[224]=Oop }
                                                            ;*invokestatic outOfBoundsCheckIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.internal.util.Preconditions::checkIndex@12 (line 266)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {static_call}
  0x00000001120b863c:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x00000001120b8696
  0x00000001120b863f:   jmpq   0x00000001120b86ba
  0x00000001120b8644:   movabs $0x135033478,%r10            ;   {metadata({method} {0x0000000135033478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray')}
  0x00000001120b864e:   mov    %r10,0x8(%rsp)
  0x00000001120b8653:   movq   $0xffffffffffffffff,(%rsp)
  0x00000001120b865b:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@-1 (line 620)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x00000001120b8660:   jmpq   0x00000001120b84f6
  0x00000001120b8665:   callq  0x0000000111b0cf20           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@2 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001120b866a:   movabs $0x1120b85f3,%r10            ;   {internal_word}
  0x00000001120b8674:   mov    %r10,0x358(%r15)
  0x00000001120b867b:   jmpq   0x0000000111a6d100           ;   {runtime_call SafepointBlob}
  0x00000001120b8680:   movabs $0x1120b860e,%r10            ;   {internal_word}
  0x00000001120b868a:   mov    %r10,0x358(%r15)
  0x00000001120b8691:   jmpq   0x0000000111a6d100           ;   {runtime_call SafepointBlob}
  0x00000001120b8696:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[224]=Oop rax=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@15 (line 266)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::index@9 (line 103)
                                                            ; - java.lang.invoke.VarHandleByteArrayAsLongs$ArrayHandle::get@19 (line 120)
                                                            ; - java.lang.invoke.VarHandleGuards::guard_LI_J@45 (line 798)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@5 (line 620)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x00000001120b869b:   nop
  0x00000001120b869c:   nop
  0x00000001120b869d:   mov    0x3d0(%r15),%rax
  0x00000001120b86a4:   movq   $0x0,0x3d0(%r15)
  0x00000001120b86af:   movq   $0x0,0x3d8(%r15)
  0x00000001120b86ba:   add    $0xf0,%rsp
  0x00000001120b86c1:   pop    %rbp
  0x00000001120b86c2:   jmpq   0x0000000111b0c000           ;   {runtime_call unwind_exception Runtime1 stub}
  0x00000001120b86c7:   hlt
  0x00000001120b86c8:   hlt
  0x00000001120b86c9:   hlt
  0x00000001120b86ca:   hlt
  0x00000001120b86cb:   hlt
  0x00000001120b86cc:   hlt
  0x00000001120b86cd:   hlt
  0x00000001120b86ce:   hlt
  0x00000001120b86cf:   hlt
  0x00000001120b86d0:   hlt
  0x00000001120b86d1:   hlt
  0x00000001120b86d2:   hlt
  0x00000001120b86d3:   hlt
  0x00000001120b86d4:   hlt
  0x00000001120b86d5:   hlt
  0x00000001120b86d6:   hlt
  0x00000001120b86d7:   hlt
  0x00000001120b86d8:   hlt
  0x00000001120b86d9:   hlt
  0x00000001120b86da:   hlt
  0x00000001120b86db:   hlt
  0x00000001120b86dc:   hlt
  0x00000001120b86dd:   hlt
  0x00000001120b86de:   hlt
  0x00000001120b86df:   hlt
[Stub Code]
  0x00000001120b86e0:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x00000001120b86e5:   movabs $0x800401360,%rbx            ;   {static_stub}
  0x00000001120b86ef:   jmpq   0x0000000111a61f08           ;   {runtime_call I2C/C2I adapters}
  0x00000001120b86f4:   nop
  0x00000001120b86f5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001120b86ff:   jmpq   0x00000001120b86ff           ;   {runtime_call const_jargs+-96006241}
[Exception Handler]
  0x00000001120b8704:   callq  0x0000000111b0f600           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x00000001120b8709:   movabs $0x10827e512,%rdi            ;   {external_word}
  0x00000001120b8713:   and    $0xfffffffffffffff0,%rsp
  0x00000001120b8717:   callq  0x0000000107f20790           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x00000001120b871c:   hlt
[Deopt Handler Code]
  0x00000001120b871d:   movabs $0x1120b871d,%r10            ;   {section_word}
  0x00000001120b8727:   push   %r10
  0x00000001120b8729:   jmpq   0x0000000111a6c020           ;   {runtime_call DeoptimizationBlob}
  0x00000001120b872e:   hlt
  0x00000001120b872f:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

=========================== JVMCI-compiled nmethod =============================
----------------------------------- Assembly -----------------------------------

Compiled method (JVMCI)  632       4       ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications (86 bytes)
 total in heap  [0x000000011952c410,0x000000011952c758] = 840
 relocation     [0x000000011952c570,0x000000011952c580] = 16
 main code      [0x000000011952c580,0x000000011952c694] = 276
 stub code      [0x000000011952c694,0x000000011952c698] = 4
 oops           [0x000000011952c698,0x000000011952c6a0] = 8
 metadata       [0x000000011952c6a0,0x000000011952c6c0] = 32
 scopes data    [0x000000011952c6c0,0x000000011952c6e0] = 32
 scopes pcs     [0x000000011952c6e0,0x000000011952c730] = 80
 dependencies   [0x000000011952c730,0x000000011952c738] = 8
 nul chk table  [0x000000011952c738,0x000000011952c748] = 16
 JVMCI data     [0x000000011952c748,0x000000011952c758] = 16

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x0000000135033478} 'tryToParseEightDigitsSwarIndependentMultiplications' '([BI)I' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromByteArray'
  # parm0:    rsi:rsi   = '[B'
  # parm1:    rdx       = int
  #           [sp+0x20]  (sp of caller)
  0x000000011952c580:   mov    %eax,-0x14000(%rsp)
  0x000000011952c587:   sub    $0x18,%rsp
  0x000000011952c58b:   mov    %rbp,0x10(%rsp)              ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic readLongFromByteArray {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@0 (line 620)
  0x000000011952c590:   mov    0xc(%rsi),%eax               ; implicit exception: dispatches to 0x000000011952c66c
  0x000000011952c593:   cmp    $0x7,%eax
  0x000000011952c596:   jb     0x000000011952c650
  0x000000011952c59c:   lea    -0x7(%rax),%eax
  0x000000011952c59f:   nop
  0x000000011952c5a0:   cmp    %edx,%eax
  0x000000011952c5a2:   jbe    0x000000011952c650
  0x000000011952c5a8:   mov    0x10(%rsi,%rdx,1),%rax
  0x000000011952c5ad:   movabs $0xcfcfcfcfcfcfcfd0,%r10
  0x000000011952c5b7:   add    %rax,%r10
  0x000000011952c5ba:   movabs $0x4646464646464646,%r11
  0x000000011952c5c4:   add    %r11,%rax
  0x000000011952c5c7:   or     %r10,%rax
  0x000000011952c5ca:   movabs $0x8080808080808080,%r11
  0x000000011952c5d4:   test   %r11,%rax
  0x000000011952c5d7:   jne    0x000000011952c638
  0x000000011952c5dd:   imul   $0xa01,%r10,%rax
  0x000000011952c5e4:   sar    $0x8,%rax
  0x000000011952c5e8:   movabs $0xff000000ff,%r10
  0x000000011952c5f2:   mov    %rax,%r11
  0x000000011952c5f5:   and    %r10,%r11
  0x000000011952c5f8:   movabs $0xf424000000064,%r8
  0x000000011952c602:   imul   %r8,%r11
  0x000000011952c606:   shr    $0x10,%rax
  0x000000011952c60a:   and    %r10,%rax
  0x000000011952c60d:   movabs $0x271000000001,%r10
  0x000000011952c617:   imul   %r10,%rax
  0x000000011952c61b:   add    %rax,%r11
  0x000000011952c61e:   shr    $0x20,%r11
  0x000000011952c622:   mov    %r11d,%eax
  0x000000011952c625:   mov    0x10(%rsp),%rbp
  0x000000011952c62a:   add    $0x18,%rsp
  0x000000011952c62e:   mov    0x348(%r15),%rcx
  0x000000011952c635:   test   %eax,(%rcx)                  ;   {poll_return}
  0x000000011952c637:   retq
  0x000000011952c638:   mov    $0xffffffff,%eax
  0x000000011952c63d:   mov    0x10(%rsp),%rbp
  0x000000011952c642:   add    $0x18,%rsp
  0x000000011952c646:   mov    0x348(%r15),%rcx
  0x000000011952c64d:   test   %eax,(%rcx)                  ;   {poll_return}
  0x000000011952c64f:   retq
  0x000000011952c650:   movl   $0xffffffe4,0x370(%r15)
  0x000000011952c65b:   movq   $0x0,0x378(%r15)
  0x000000011952c666:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic readLongFromByteArray {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@0 (line 620)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011952c66b:   nop
  0x000000011952c66c:   movl   $0xfffffff5,0x370(%r15)
  0x000000011952c677:   movq   $0x0,0x378(%r15)
  0x000000011952c682:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic readLongFromByteArray {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromByteArray::tryToParseEightDigitsSwarIndependentMultiplications@0 (line 620)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011952c687:   nop
[Exception Handler]
  0x000000011952c688:   callq  0x0000000111b2d380           ;   {runtime_call Stub<ExceptionHandlerStub.exceptionHandler>}
  0x000000011952c68d:   nop
[Deopt Handler Code]
  0x000000011952c68e:   callq  0x0000000111a6c020           ;   {runtime_call DeoptimizationBlob}
  0x000000011952c693:   nop
[Stub Code]
  0x000000011952c694:   hlt
  0x000000011952c695:   hlt
  0x000000011952c696:   hlt
  0x000000011952c697:   hlt
--------------------------------------------------------------------------------
[/Disassembly]
Trying to reach a confidence level of 99.8 % which only deviates by 1 % from the average measured duration.

============================= C1-compiled nmethod ==============================
----------------------------------- Assembly -----------------------------------

Compiled method (c1)  900       3       ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd (55 bytes)
 total in heap  [0x0000000112121290,0x0000000112124be0] = 14672
 relocation     [0x00000001121213f0,0x0000000112121690] = 672
 main code      [0x00000001121216a0,0x0000000112124060] = 10688
 stub code      [0x0000000112124060,0x0000000112124160] = 256
 oops           [0x0000000112124160,0x00000001121241c8] = 104
 metadata       [0x00000001121241c8,0x00000001121242b8] = 240
 scopes data    [0x00000001121242b8,0x00000001121246e0] = 1064
 scopes pcs     [0x00000001121246e0,0x0000000112124b50] = 1136
 dependencies   [0x0000000112124b50,0x0000000112124b58] = 8
 nul chk table  [0x0000000112124b58,0x0000000112124be0] = 136

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  #           [sp+0x130]  (sp of caller)
  0x00000001121216a0:   mov    %eax,-0x14000(%rsp)
  0x00000001121216a7:   push   %rbp
  0x00000001121216a8:   sub    $0x120,%rsp
  0x00000001121216af:   mov    %rdx,%rbx
  0x00000001121216b2:   movabs $0x1350431b0,%rcx            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x00000001121216bc:   mov    0xac(%rcx),%edx
  0x00000001121216c2:   add    $0x2,%edx
  0x00000001121216c5:   mov    %edx,0xac(%rcx)
  0x00000001121216cb:   and    $0x7fe,%edx
  0x00000001121216d1:   cmp    $0x0,%edx
  0x00000001121216d4:   je     0x0000000112123afc
  0x00000001121216da:   movabs $0x1350431b0,%rcx            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x00000001121216e4:   addq   $0x1,0xf0(%rcx)
  0x00000001121216ec:   movabs $0x134f6b838,%rcx            ;   {metadata(method data for {method} {0x0000000134eee8d8} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001121216f6:   mov    0xac(%rcx),%edx
  0x00000001121216fc:   add    $0x2,%edx
  0x00000001121216ff:   mov    %edx,0xac(%rcx)
  0x0000000112121705:   and    $0x1ffffe,%edx
  0x000000011212170b:   cmp    $0x0,%edx
  0x000000011212170e:   je     0x0000000112123b1d
  0x0000000112121714:   movabs $0x61f2c52c0,%rcx            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f2c52c0})}
  0x000000011212171e:   movabs $0x134f6b838,%rdx            ;   {metadata(method data for {method} {0x0000000134eee8d8} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121728:   mov    0x8(%rcx),%ecx
  0x000000011212172b:   movabs $0x800000000,%r10
  0x0000000112121735:   add    %r10,%rcx
  0x0000000112121738:   cmp    0x100(%rdx),%rcx
  0x000000011212173f:   jne    0x000000011212174e
  0x0000000112121741:   addq   $0x1,0x108(%rdx)
  0x0000000112121749:   jmpq   0x0000000112121910
  0x000000011212174e:   cmp    0x110(%rdx),%rcx
  0x0000000112121755:   jne    0x0000000112121764
  0x0000000112121757:   addq   $0x1,0x118(%rdx)
  0x000000011212175f:   jmpq   0x0000000112121910
  0x0000000112121764:   cmp    0x120(%rdx),%rcx
  0x000000011212176b:   jne    0x000000011212177a
  0x000000011212176d:   addq   $0x1,0x128(%rdx)
  0x0000000112121775:   jmpq   0x0000000112121910
  0x000000011212177a:   cmp    0x130(%rdx),%rcx
  0x0000000112121781:   jne    0x0000000112121790
  0x0000000112121783:   addq   $0x1,0x138(%rdx)
  0x000000011212178b:   jmpq   0x0000000112121910
  0x0000000112121790:   cmp    0x140(%rdx),%rcx
  0x0000000112121797:   jne    0x00000001121217a6
  0x0000000112121799:   addq   $0x1,0x148(%rdx)
  0x00000001121217a1:   jmpq   0x0000000112121910
  0x00000001121217a6:   cmp    0x150(%rdx),%rcx
  0x00000001121217ad:   jne    0x00000001121217bc
  0x00000001121217af:   addq   $0x1,0x158(%rdx)
  0x00000001121217b7:   jmpq   0x0000000112121910
  0x00000001121217bc:   cmp    0x160(%rdx),%rcx
  0x00000001121217c3:   jne    0x00000001121217d2
  0x00000001121217c5:   addq   $0x1,0x168(%rdx)
  0x00000001121217cd:   jmpq   0x0000000112121910
  0x00000001121217d2:   cmp    0x170(%rdx),%rcx
  0x00000001121217d9:   jne    0x00000001121217e8
  0x00000001121217db:   addq   $0x1,0x178(%rdx)
  0x00000001121217e3:   jmpq   0x0000000112121910
  0x00000001121217e8:   cmpq   $0x0,0x100(%rdx)
  0x00000001121217f3:   jne    0x000000011212180c
  0x00000001121217f5:   mov    %rcx,0x100(%rdx)
  0x00000001121217fc:   movq   $0x1,0x108(%rdx)
  0x0000000112121807:   jmpq   0x0000000112121910
  0x000000011212180c:   cmpq   $0x0,0x110(%rdx)
  0x0000000112121817:   jne    0x0000000112121830
  0x0000000112121819:   mov    %rcx,0x110(%rdx)
  0x0000000112121820:   movq   $0x1,0x118(%rdx)
  0x000000011212182b:   jmpq   0x0000000112121910
  0x0000000112121830:   cmpq   $0x0,0x120(%rdx)
  0x000000011212183b:   jne    0x0000000112121854
  0x000000011212183d:   mov    %rcx,0x120(%rdx)
  0x0000000112121844:   movq   $0x1,0x128(%rdx)
  0x000000011212184f:   jmpq   0x0000000112121910
  0x0000000112121854:   cmpq   $0x0,0x130(%rdx)
  0x000000011212185f:   jne    0x0000000112121878
  0x0000000112121861:   mov    %rcx,0x130(%rdx)
  0x0000000112121868:   movq   $0x1,0x138(%rdx)
  0x0000000112121873:   jmpq   0x0000000112121910
  0x0000000112121878:   cmpq   $0x0,0x140(%rdx)
  0x0000000112121883:   jne    0x000000011212189c
  0x0000000112121885:   mov    %rcx,0x140(%rdx)
  0x000000011212188c:   movq   $0x1,0x148(%rdx)
  0x0000000112121897:   jmpq   0x0000000112121910
  0x000000011212189c:   cmpq   $0x0,0x150(%rdx)
  0x00000001121218a7:   jne    0x00000001121218c0
  0x00000001121218a9:   mov    %rcx,0x150(%rdx)
  0x00000001121218b0:   movq   $0x1,0x158(%rdx)
  0x00000001121218bb:   jmpq   0x0000000112121910
  0x00000001121218c0:   cmpq   $0x0,0x160(%rdx)
  0x00000001121218cb:   jne    0x00000001121218e4
  0x00000001121218cd:   mov    %rcx,0x160(%rdx)
  0x00000001121218d4:   movq   $0x1,0x168(%rdx)
  0x00000001121218df:   jmpq   0x0000000112121910
  0x00000001121218e4:   cmpq   $0x0,0x170(%rdx)
  0x00000001121218ef:   jne    0x0000000112121908
  0x00000001121218f1:   mov    %rcx,0x170(%rdx)
  0x00000001121218f8:   movq   $0x1,0x178(%rdx)
  0x0000000112121903:   jmpq   0x0000000112121910
  0x0000000112121908:   addq   $0x1,0xf0(%rdx)
  0x0000000112121910:   mov    0xc(%rsi),%ecx               ; implicit exception: dispatches to 0x0000000112123b3e
  0x0000000112121913:   movabs $0x134f6b838,%rdx            ;   {metadata(method data for {method} {0x0000000134eee8d8} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x000000011212191d:   addq   $0x1,0x188(%rdx)
  0x0000000112121925:   movabs $0x134f63820,%rdx            ;   {metadata(method data for {method} {0x0000000134e41e48} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x000000011212192f:   mov    0xac(%rdx),%r8d
  0x0000000112121936:   add    $0x2,%r8d
  0x000000011212193a:   mov    %r8d,0xac(%rdx)
  0x0000000112121941:   and    $0x1ffffe,%r8d
  0x0000000112121948:   cmp    $0x0,%r8d
  0x000000011212194c:   je     0x0000000112123b43
  0x0000000112121952:   sub    $0x7,%ecx
  0x0000000112121955:   movabs $0x134f63820,%rdx            ;   {metadata(method data for {method} {0x0000000134e41e48} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x000000011212195f:   addq   $0x1,0x150(%rdx)
  0x0000000112121967:   movabs $0x134f5ffd0,%rdx            ;   {metadata(method data for {method} {0x000000080007a390} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x0000000112121971:   mov    0xac(%rdx),%r8d
  0x0000000112121978:   add    $0x2,%r8d
  0x000000011212197c:   mov    %r8d,0xac(%rdx)
  0x0000000112121983:   and    $0x1ffffe,%r8d
  0x000000011212198a:   cmp    $0x0,%r8d
  0x000000011212198e:   je     0x0000000112123b64
  0x0000000112121994:   movabs $0x134f5ffd0,%rdx            ;   {metadata(method data for {method} {0x000000080007a390} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x000000011212199e:   addq   $0x1,0xf0(%rdx)
  0x00000001121219a6:   movabs $0x134eab718,%rdx            ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x00000001121219b0:   mov    0xac(%rdx),%r8d
  0x00000001121219b7:   add    $0x2,%r8d
  0x00000001121219bb:   mov    %r8d,0xac(%rdx)
  0x00000001121219c2:   and    $0x1ffffe,%r8d
  0x00000001121219c9:   cmp    $0x0,%r8d
  0x00000001121219cd:   je     0x0000000112123b85
  0x00000001121219d3:   cmp    $0x0,%ebx
  0x00000001121219d6:   movabs $0x134eab718,%rdx            ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x00000001121219e0:   movabs $0xf0,%r8
  0x00000001121219ea:   jl     0x00000001121219fa
  0x00000001121219f0:   movabs $0x100,%r8
  0x00000001121219fa:   mov    (%rdx,%r8,1),%r9
  0x00000001121219fe:   lea    0x1(%r9),%r9
  0x0000000112121a02:   mov    %r9,(%rdx,%r8,1)
  0x0000000112121a06:   jl     0x0000000112123ac2
  0x0000000112121a0c:   cmp    %ecx,%ebx
  0x0000000112121a0e:   movabs $0x134eab718,%rdx            ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x0000000112121a18:   movabs $0x120,%r8
  0x0000000112121a22:   jge    0x0000000112121a32
  0x0000000112121a28:   movabs $0x110,%r8
  0x0000000112121a32:   mov    (%rdx,%r8,1),%r9
  0x0000000112121a36:   lea    0x1(%r9),%r9
  0x0000000112121a3a:   mov    %r9,(%rdx,%r8,1)
  0x0000000112121a3e:   jge    0x0000000112123ac2
  0x0000000112121a44:   movabs $0x61f2c52c0,%rcx            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f2c52c0})}
  0x0000000112121a4e:   mov    %rcx,%rdx
  0x0000000112121a51:   movabs $0x134f6b838,%r8             ;   {metadata(method data for {method} {0x0000000134eee8d8} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121a5b:   addq   $0x1,0x230(%r8)
  0x0000000112121a63:   movabs $0x134f630c8,%rdx            ;   {metadata(method data for {method} {0x0000000134efe920} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112121a6d:   mov    0xac(%rdx),%r8d
  0x0000000112121a74:   add    $0x2,%r8d
  0x0000000112121a78:   mov    %r8d,0xac(%rdx)
  0x0000000112121a7f:   and    $0x1ffffe,%r8d
  0x0000000112121a86:   cmp    $0x0,%r8d
  0x0000000112121a8a:   je     0x0000000112123ba6
  0x0000000112121a90:   movabs $0x134f630c8,%rdx            ;   {metadata(method data for {method} {0x0000000134efe920} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112121a9a:   addq   $0x1,0xf0(%rdx)
  0x0000000112121aa2:   movabs $0x134f5f2b8,%rcx            ;   {metadata(method data for {method} {0x0000000134d5dd40} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x0000000112121aac:   mov    0xac(%rcx),%edx
  0x0000000112121ab2:   add    $0x2,%edx
  0x0000000112121ab5:   mov    %edx,0xac(%rcx)
  0x0000000112121abb:   and    $0x1ffffe,%edx
  0x0000000112121ac1:   cmp    $0x0,%edx
  0x0000000112121ac4:   je     0x0000000112123bc7
  0x0000000112121aca:   movabs $0x134f5f2b8,%rcx            ;   {metadata(method data for {method} {0x0000000134d5dd40} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x0000000112121ad4:   incl   0x100(%rcx)
  0x0000000112121ada:   movabs $0x61f2cea08,%rcx            ;   {oop(a 'jdk/incubator/vector/Short128Vector'{0x000000061f2cea08})}
  0x0000000112121ae4:   mov    %rcx,%rdx
  0x0000000112121ae7:   movabs $0x134f6b838,%r8             ;   {metadata(method data for {method} {0x0000000134eee8d8} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121af1:   addq   $0x1,0x2c8(%r8)
  0x0000000112121af9:   movabs $0x134f6bbd8,%rdx            ;   {metadata(method data for {method} {0x0000000134f12bd8} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000112121b03:   mov    0xac(%rdx),%r8d
  0x0000000112121b0a:   add    $0x2,%r8d
  0x0000000112121b0e:   mov    %r8d,0xac(%rdx)
  0x0000000112121b15:   and    $0x1ffffe,%r8d
  0x0000000112121b1c:   cmp    $0x0,%r8d
  0x0000000112121b20:   je     0x0000000112123be8
  0x0000000112121b26:   mov    %rcx,%rdx
  0x0000000112121b29:   movabs $0x134f6bbd8,%r8             ;   {metadata(method data for {method} {0x0000000134f12bd8} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000112121b33:   addq   $0x1,0xf0(%r8)
  0x0000000112121b3b:   movabs $0x134f6bd08,%rdx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121b45:   mov    0xac(%rdx),%r8d
  0x0000000112121b4c:   add    $0x2,%r8d
  0x0000000112121b50:   mov    %r8d,0xac(%rdx)
  0x0000000112121b57:   and    $0x1ffffe,%r8d
  0x0000000112121b5e:   cmp    $0x0,%r8d
  0x0000000112121b62:   je     0x0000000112123c09
  0x0000000112121b68:   movabs $0x134f6bd08,%rdx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121b72:   addq   $0x1,0xf0(%rdx)
  0x0000000112121b7a:   movabs $0x134f5f1a8,%rcx            ;   {metadata(method data for {method} {0x0000000134f0fae0} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000112121b84:   mov    0xac(%rcx),%edx
  0x0000000112121b8a:   add    $0x2,%edx
  0x0000000112121b8d:   mov    %edx,0xac(%rcx)
  0x0000000112121b93:   and    $0x1ffffe,%edx
  0x0000000112121b99:   cmp    $0x0,%edx
  0x0000000112121b9c:   je     0x0000000112123c2a
  0x0000000112121ba2:   movabs $0x61f2c52c0,%rcx            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f2c52c0})}
  0x0000000112121bac:   mov    %rcx,%rdx
  0x0000000112121baf:   movabs $0x134f6bd08,%r8             ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121bb9:   addq   $0x1,0x188(%r8)
  0x0000000112121bc1:   mov    %rcx,%rdx
  0x0000000112121bc4:   movabs $0x134f6bd08,%r8             ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121bce:   addq   $0x1,0x220(%r8)
  0x0000000112121bd6:   movabs $0x134f63280,%rdx            ;   {metadata(method data for {method} {0x0000000134efdfa8} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112121be0:   mov    0xac(%rdx),%r8d
  0x0000000112121be7:   add    $0x2,%r8d
  0x0000000112121beb:   mov    %r8d,0xac(%rdx)
  0x0000000112121bf2:   and    $0x1ffffe,%r8d
  0x0000000112121bf9:   cmp    $0x0,%r8d
  0x0000000112121bfd:   je     0x0000000112123c4b
  0x0000000112121c03:   movabs $0x134f6bd08,%rdx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121c0d:   addq   $0x1,0x2b8(%rdx)
  0x0000000112121c15:   movabs $0x134f6bd08,%rcx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121c1f:   addq   $0x1,0x350(%rcx)
  0x0000000112121c27:   movabs $0x134f6c150,%rcx            ;   {metadata(method data for {method} {0x0000000134ef0aa0} 'charArrayAddress' '([CI)J' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121c31:   mov    0xac(%rcx),%edx
  0x0000000112121c37:   add    $0x2,%edx
  0x0000000112121c3a:   mov    %edx,0xac(%rcx)
  0x0000000112121c40:   and    $0x1ffffe,%edx
  0x0000000112121c46:   cmp    $0x0,%edx
  0x0000000112121c49:   je     0x0000000112123c6c
  0x0000000112121c4f:   movabs $0x134f6bd08,%rcx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121c59:   addq   $0x1,0x360(%rcx)
  0x0000000112121c61:   movslq %ebx,%rdx
  0x0000000112121c64:   mov    $0x1,%ecx
  0x0000000112121c69:   shl    %cl,%rdx
  0x0000000112121c6c:   mov    %rdx,%r9
  0x0000000112121c6f:   movabs $0x10,%r10
  0x0000000112121c79:   add    %r10,%r9
  0x0000000112121c7c:   movabs $0x134f5e9f0,%rdx            ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112121c86:   mov    0xac(%rdx),%ecx
  0x0000000112121c8c:   add    $0x2,%ecx
  0x0000000112121c8f:   mov    %ecx,0xac(%rdx)
  0x0000000112121c95:   and    $0x1ffffe,%ecx
  0x0000000112121c9b:   cmp    $0x0,%ecx
  0x0000000112121c9e:   je     0x0000000112123c8d
  0x0000000112121ca4:   movabs $0x134f5e9f0,%rdx            ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112121cae:   addq   $0x1,0x188(%rdx)
  0x0000000112121cb6:   movabs $0x135000490,%rdx            ;   {metadata(method data for {method} {0x0000000135000268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000112121cc0:   mov    0xac(%rdx),%ecx
  0x0000000112121cc6:   add    $0x2,%ecx
  0x0000000112121cc9:   mov    %ecx,0xac(%rdx)
  0x0000000112121ccf:   and    $0x1ffffe,%ecx
  0x0000000112121cd5:   cmp    $0x0,%ecx
  0x0000000112121cd8:   je     0x0000000112123cae
  0x0000000112121cde:   movabs $0x134f6bd08,%rdx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121ce8:   addq   $0x1,0x370(%rdx)
  0x0000000112121cf0:   movabs $0x7ffb00230,%rdx            ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x0000000112121cfa:   mov    %rsi,%rdi
  0x0000000112121cfd:   movabs $0x61f2c5308,%rsi            ;   {oop(a 'java/lang/Class'{0x000000061f2c5308} = 'jdk/incubator/vector/Short128Vector')}
  0x0000000112121d07:   mov    $0x8,%ecx
  0x0000000112121d0c:   mov    %rdi,%r8
  0x0000000112121d0f:   mov    %ebx,(%rsp)
  0x0000000112121d12:   movabs $0x61f2c52c0,%r10            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f2c52c0})}
  0x0000000112121d1c:   mov    %r10,0x8(%rsp)
  0x0000000112121d21:   movabs $0x61f2d1978,%r10            ;   {oop(a 'jdk/incubator/vector/ShortVector$$Lambda$82+0x0000000800c23ae8'{0x000000061f2d1978})}
  0x0000000112121d2b:   mov    %r10,0x10(%rsp)
  0x0000000112121d30:   nopl   0x0(%rax)
  0x0000000112121d37:   callq  0x000000011210c7c0           ; ImmutableOopMap {}
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@31 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x0000000112121d3c:   cmp    $0x0,%rax
  0x0000000112121d40:   jne    0x0000000112121d58
  0x0000000112121d42:   movabs $0x134f6bd08,%rbx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121d4c:   orb    $0x1,0x379(%rbx)
  0x0000000112121d53:   jmpq   0x0000000112121f87
  0x0000000112121d58:   movabs $0x800c7f4f8,%rsi            ;   {metadata('jdk/incubator/vector/ShortVector')}
  0x0000000112121d62:   mov    0x8(%rax),%ebx
  0x0000000112121d65:   movabs $0x800000000,%r10
  0x0000000112121d6f:   add    %r10,%rbx
  0x0000000112121d72:   cmp    0x58(%rbx),%rsi
  0x0000000112121d76:   jne    0x0000000112121f6b
  0x0000000112121d7c:   movabs $0x134f6bd08,%rbx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121d86:   mov    0x8(%rax),%esi
  0x0000000112121d89:   movabs $0x800000000,%r10
  0x0000000112121d93:   add    %r10,%rsi
  0x0000000112121d96:   cmp    0x390(%rbx),%rsi
  0x0000000112121d9d:   jne    0x0000000112121dac
  0x0000000112121d9f:   addq   $0x1,0x398(%rbx)
  0x0000000112121da7:   jmpq   0x0000000112121f87
  0x0000000112121dac:   cmp    0x3a0(%rbx),%rsi
  0x0000000112121db3:   jne    0x0000000112121dc2
  0x0000000112121db5:   addq   $0x1,0x3a8(%rbx)
  0x0000000112121dbd:   jmpq   0x0000000112121f87
  0x0000000112121dc2:   cmp    0x3b0(%rbx),%rsi
  0x0000000112121dc9:   jne    0x0000000112121dd8
  0x0000000112121dcb:   addq   $0x1,0x3b8(%rbx)
  0x0000000112121dd3:   jmpq   0x0000000112121f87
  0x0000000112121dd8:   cmp    0x3c0(%rbx),%rsi
  0x0000000112121ddf:   jne    0x0000000112121dee
  0x0000000112121de1:   addq   $0x1,0x3c8(%rbx)
  0x0000000112121de9:   jmpq   0x0000000112121f87
  0x0000000112121dee:   cmp    0x3d0(%rbx),%rsi
  0x0000000112121df5:   jne    0x0000000112121e04
  0x0000000112121df7:   addq   $0x1,0x3d8(%rbx)
  0x0000000112121dff:   jmpq   0x0000000112121f87
  0x0000000112121e04:   cmp    0x3e0(%rbx),%rsi
  0x0000000112121e0b:   jne    0x0000000112121e1a
  0x0000000112121e0d:   addq   $0x1,0x3e8(%rbx)
  0x0000000112121e15:   jmpq   0x0000000112121f87
  0x0000000112121e1a:   cmp    0x3f0(%rbx),%rsi
  0x0000000112121e21:   jne    0x0000000112121e30
  0x0000000112121e23:   addq   $0x1,0x3f8(%rbx)
  0x0000000112121e2b:   jmpq   0x0000000112121f87
  0x0000000112121e30:   cmp    0x400(%rbx),%rsi
  0x0000000112121e37:   jne    0x0000000112121e46
  0x0000000112121e39:   addq   $0x1,0x408(%rbx)
  0x0000000112121e41:   jmpq   0x0000000112121f87
  0x0000000112121e46:   cmpq   $0x0,0x390(%rbx)
  0x0000000112121e51:   jne    0x0000000112121e6a
  0x0000000112121e53:   mov    %rsi,0x390(%rbx)
  0x0000000112121e5a:   movq   $0x1,0x398(%rbx)
  0x0000000112121e65:   jmpq   0x0000000112121f87
  0x0000000112121e6a:   cmpq   $0x0,0x3a0(%rbx)
  0x0000000112121e75:   jne    0x0000000112121e8e
  0x0000000112121e77:   mov    %rsi,0x3a0(%rbx)
  0x0000000112121e7e:   movq   $0x1,0x3a8(%rbx)
  0x0000000112121e89:   jmpq   0x0000000112121f87
  0x0000000112121e8e:   cmpq   $0x0,0x3b0(%rbx)
  0x0000000112121e99:   jne    0x0000000112121eb2
  0x0000000112121e9b:   mov    %rsi,0x3b0(%rbx)
  0x0000000112121ea2:   movq   $0x1,0x3b8(%rbx)
  0x0000000112121ead:   jmpq   0x0000000112121f87
  0x0000000112121eb2:   cmpq   $0x0,0x3c0(%rbx)
  0x0000000112121ebd:   jne    0x0000000112121ed6
  0x0000000112121ebf:   mov    %rsi,0x3c0(%rbx)
  0x0000000112121ec6:   movq   $0x1,0x3c8(%rbx)
  0x0000000112121ed1:   jmpq   0x0000000112121f87
  0x0000000112121ed6:   cmpq   $0x0,0x3d0(%rbx)
  0x0000000112121ee1:   jne    0x0000000112121efa
  0x0000000112121ee3:   mov    %rsi,0x3d0(%rbx)
  0x0000000112121eea:   movq   $0x1,0x3d8(%rbx)
  0x0000000112121ef5:   jmpq   0x0000000112121f87
  0x0000000112121efa:   cmpq   $0x0,0x3e0(%rbx)
  0x0000000112121f05:   jne    0x0000000112121f1e
  0x0000000112121f07:   mov    %rsi,0x3e0(%rbx)
  0x0000000112121f0e:   movq   $0x1,0x3e8(%rbx)
  0x0000000112121f19:   jmpq   0x0000000112121f87
  0x0000000112121f1e:   cmpq   $0x0,0x3f0(%rbx)
  0x0000000112121f29:   jne    0x0000000112121f42
  0x0000000112121f2b:   mov    %rsi,0x3f0(%rbx)
  0x0000000112121f32:   movq   $0x1,0x3f8(%rbx)
  0x0000000112121f3d:   jmpq   0x0000000112121f87
  0x0000000112121f42:   cmpq   $0x0,0x400(%rbx)
  0x0000000112121f4d:   jne    0x0000000112121f66
  0x0000000112121f4f:   mov    %rsi,0x400(%rbx)
  0x0000000112121f56:   movq   $0x1,0x408(%rbx)
  0x0000000112121f61:   jmpq   0x0000000112121f87
  0x0000000112121f66:   jmpq   0x0000000112121f87
  0x0000000112121f6b:   movabs $0x134f6bd08,%rbx            ;   {metadata(method data for {method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121f75:   subq   $0x1,0x380(%rbx)
  0x0000000112121f7d:   jmpq   0x0000000112123ccf
  0x0000000112121f82:   jmpq   0x0000000112121f87
  0x0000000112121f87:   mov    %rax,%rdi
  0x0000000112121f8a:   cmp    (%rdi),%rax                  ; implicit exception: dispatches to 0x0000000112123cd8
  0x0000000112121f8d:   mov    %rdi,%rdx
  0x0000000112121f90:   movabs $0x1350431b0,%rsi            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000112121f9a:   addq   $0x1,0x100(%rsi)
  0x0000000112121fa2:   movabs $0x134f6c270,%rdx            ;   {metadata(method data for {method} {0x0000000134ee9938} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121fac:   mov    0xac(%rdx),%esi
  0x0000000112121fb2:   add    $0x2,%esi
  0x0000000112121fb5:   mov    %esi,0xac(%rdx)
  0x0000000112121fbb:   and    $0x1ffffe,%esi
  0x0000000112121fc1:   cmp    $0x0,%esi
  0x0000000112121fc4:   je     0x0000000112123cdd
  0x0000000112121fca:   mov    %rdi,%rdx
  0x0000000112121fcd:   movabs $0x134f6c270,%rsi            ;   {metadata(method data for {method} {0x0000000134ee9938} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121fd7:   addq   $0x1,0xf0(%rsi)
  0x0000000112121fdf:   movabs $0x134f6c428,%rdx            ;   {metadata(method data for {method} {0x0000000134ee86c8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112121fe9:   mov    0xac(%rdx),%esi
  0x0000000112121fef:   add    $0x2,%esi
  0x0000000112121ff2:   mov    %esi,0xac(%rdx)
  0x0000000112121ff8:   and    $0x1ffffe,%esi
  0x0000000112121ffe:   cmp    $0x0,%esi
  0x0000000112122001:   je     0x0000000112123cfe
  0x0000000112122007:   movabs $0x134f6c428,%rdx            ;   {metadata(method data for {method} {0x0000000134ee86c8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112122011:   addq   $0x1,0xf0(%rdx)
  0x0000000112122019:   movabs $0x134f67eb8,%rdx            ;   {metadata(method data for {method} {0x0000000134ee5ff0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112122023:   mov    0xac(%rdx),%esi
  0x0000000112122029:   add    $0x2,%esi
  0x000000011212202c:   mov    %esi,0xac(%rdx)
  0x0000000112122032:   and    $0x1ffffe,%esi
  0x0000000112122038:   cmp    $0x0,%esi
  0x000000011212203b:   je     0x0000000112123d1f
  0x0000000112122041:   movabs $0x134f67eb8,%rdx            ;   {metadata(method data for {method} {0x0000000134ee5ff0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x000000011212204b:   addq   $0x1,0xf0(%rdx)
  0x0000000112122053:   movabs $0x134f621e8,%rdx            ;   {metadata(method data for {method} {0x0000000134d54458} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x000000011212205d:   mov    0xac(%rdx),%esi
  0x0000000112122063:   add    $0x2,%esi
  0x0000000112122066:   mov    %esi,0xac(%rdx)
  0x000000011212206c:   and    $0x1ffffe,%esi
  0x0000000112122072:   cmp    $0x0,%esi
  0x0000000112122075:   je     0x0000000112123d40
  0x000000011212207b:   movabs $0x61f2d5488,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$BinaryImpl'{0x000000061f2d5488})}
  0x0000000112122085:   movabs $0x134f621e8,%rsi            ;   {metadata(method data for {method} {0x0000000134d54458} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x000000011212208f:   mov    0x8(%rdx),%edx
  0x0000000112122092:   movabs $0x800000000,%r10
  0x000000011212209c:   add    %r10,%rdx
  0x000000011212209f:   cmp    0x198(%rsi),%rdx
  0x00000001121220a6:   jne    0x00000001121220b5
  0x00000001121220a8:   addq   $0x1,0x1a0(%rsi)
  0x00000001121220b0:   jmpq   0x0000000112122277
  0x00000001121220b5:   cmp    0x1a8(%rsi),%rdx
  0x00000001121220bc:   jne    0x00000001121220cb
  0x00000001121220be:   addq   $0x1,0x1b0(%rsi)
  0x00000001121220c6:   jmpq   0x0000000112122277
  0x00000001121220cb:   cmp    0x1b8(%rsi),%rdx
  0x00000001121220d2:   jne    0x00000001121220e1
  0x00000001121220d4:   addq   $0x1,0x1c0(%rsi)
  0x00000001121220dc:   jmpq   0x0000000112122277
  0x00000001121220e1:   cmp    0x1c8(%rsi),%rdx
  0x00000001121220e8:   jne    0x00000001121220f7
  0x00000001121220ea:   addq   $0x1,0x1d0(%rsi)
  0x00000001121220f2:   jmpq   0x0000000112122277
  0x00000001121220f7:   cmp    0x1d8(%rsi),%rdx
  0x00000001121220fe:   jne    0x000000011212210d
  0x0000000112122100:   addq   $0x1,0x1e0(%rsi)
  0x0000000112122108:   jmpq   0x0000000112122277
  0x000000011212210d:   cmp    0x1e8(%rsi),%rdx
  0x0000000112122114:   jne    0x0000000112122123
  0x0000000112122116:   addq   $0x1,0x1f0(%rsi)
  0x000000011212211e:   jmpq   0x0000000112122277
  0x0000000112122123:   cmp    0x1f8(%rsi),%rdx
  0x000000011212212a:   jne    0x0000000112122139
  0x000000011212212c:   addq   $0x1,0x200(%rsi)
  0x0000000112122134:   jmpq   0x0000000112122277
  0x0000000112122139:   cmp    0x208(%rsi),%rdx
  0x0000000112122140:   jne    0x000000011212214f
  0x0000000112122142:   addq   $0x1,0x210(%rsi)
  0x000000011212214a:   jmpq   0x0000000112122277
  0x000000011212214f:   cmpq   $0x0,0x198(%rsi)
  0x000000011212215a:   jne    0x0000000112122173
  0x000000011212215c:   mov    %rdx,0x198(%rsi)
  0x0000000112122163:   movq   $0x1,0x1a0(%rsi)
  0x000000011212216e:   jmpq   0x0000000112122277
  0x0000000112122173:   cmpq   $0x0,0x1a8(%rsi)
  0x000000011212217e:   jne    0x0000000112122197
  0x0000000112122180:   mov    %rdx,0x1a8(%rsi)
  0x0000000112122187:   movq   $0x1,0x1b0(%rsi)
  0x0000000112122192:   jmpq   0x0000000112122277
  0x0000000112122197:   cmpq   $0x0,0x1b8(%rsi)
  0x00000001121221a2:   jne    0x00000001121221bb
  0x00000001121221a4:   mov    %rdx,0x1b8(%rsi)
  0x00000001121221ab:   movq   $0x1,0x1c0(%rsi)
  0x00000001121221b6:   jmpq   0x0000000112122277
  0x00000001121221bb:   cmpq   $0x0,0x1c8(%rsi)
  0x00000001121221c6:   jne    0x00000001121221df
  0x00000001121221c8:   mov    %rdx,0x1c8(%rsi)
  0x00000001121221cf:   movq   $0x1,0x1d0(%rsi)
  0x00000001121221da:   jmpq   0x0000000112122277
  0x00000001121221df:   cmpq   $0x0,0x1d8(%rsi)
  0x00000001121221ea:   jne    0x0000000112122203
  0x00000001121221ec:   mov    %rdx,0x1d8(%rsi)
  0x00000001121221f3:   movq   $0x1,0x1e0(%rsi)
  0x00000001121221fe:   jmpq   0x0000000112122277
  0x0000000112122203:   cmpq   $0x0,0x1e8(%rsi)
  0x000000011212220e:   jne    0x0000000112122227
  0x0000000112122210:   mov    %rdx,0x1e8(%rsi)
  0x0000000112122217:   movq   $0x1,0x1f0(%rsi)
  0x0000000112122222:   jmpq   0x0000000112122277
  0x0000000112122227:   cmpq   $0x0,0x1f8(%rsi)
  0x0000000112122232:   jne    0x000000011212224b
  0x0000000112122234:   mov    %rdx,0x1f8(%rsi)
  0x000000011212223b:   movq   $0x1,0x200(%rsi)
  0x0000000112122246:   jmpq   0x0000000112122277
  0x000000011212224b:   cmpq   $0x0,0x208(%rsi)
  0x0000000112122256:   jne    0x000000011212226f
  0x0000000112122258:   mov    %rdx,0x208(%rsi)
  0x000000011212225f:   movq   $0x1,0x210(%rsi)
  0x000000011212226a:   jmpq   0x0000000112122277
  0x000000011212226f:   addq   $0x1,0x188(%rsi)
  0x0000000112122277:   movabs $0x134f62430,%rdx            ;   {metadata(method data for {method} {0x0000000134f47958} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x0000000112122281:   mov    0xac(%rdx),%esi
  0x0000000112122287:   add    $0x2,%esi
  0x000000011212228a:   mov    %esi,0xac(%rdx)
  0x0000000112122290:   and    $0x1ffffe,%esi
  0x0000000112122296:   cmp    $0x0,%esi
  0x0000000112122299:   je     0x0000000112123d61
  0x000000011212229f:   movabs $0x134f62430,%rdx            ;   {metadata(method data for {method} {0x0000000134f47958} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x00000001121222a9:   incl   0xf0(%rdx)
  0x00000001121222af:   movabs $0x134f6c428,%rdx            ;   {metadata(method data for {method} {0x0000000134ee86c8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001121222b9:   incl   0x100(%rdx)
  0x00000001121222bf:   movabs $0x134f6c428,%rdx            ;   {metadata(method data for {method} {0x0000000134ee86c8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001121222c9:   incl   0x1d8(%rdx)
  0x00000001121222cf:   mov    %rdi,%rdx
  0x00000001121222d2:   movabs $0x134f6c428,%rsi            ;   {metadata(method data for {method} {0x0000000134ee86c8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001121222dc:   mov    0x8(%rdx),%edx
  0x00000001121222df:   movabs $0x800000000,%r10
  0x00000001121222e9:   add    %r10,%rdx
  0x00000001121222ec:   cmp    0x208(%rsi),%rdx
  0x00000001121222f3:   jne    0x0000000112122302
  0x00000001121222f5:   addq   $0x1,0x210(%rsi)
  0x00000001121222fd:   jmpq   0x00000001121224c4
  0x0000000112122302:   cmp    0x218(%rsi),%rdx
  0x0000000112122309:   jne    0x0000000112122318
  0x000000011212230b:   addq   $0x1,0x220(%rsi)
  0x0000000112122313:   jmpq   0x00000001121224c4
  0x0000000112122318:   cmp    0x228(%rsi),%rdx
  0x000000011212231f:   jne    0x000000011212232e
  0x0000000112122321:   addq   $0x1,0x230(%rsi)
  0x0000000112122329:   jmpq   0x00000001121224c4
  0x000000011212232e:   cmp    0x238(%rsi),%rdx
  0x0000000112122335:   jne    0x0000000112122344
  0x0000000112122337:   addq   $0x1,0x240(%rsi)
  0x000000011212233f:   jmpq   0x00000001121224c4
  0x0000000112122344:   cmp    0x248(%rsi),%rdx
  0x000000011212234b:   jne    0x000000011212235a
  0x000000011212234d:   addq   $0x1,0x250(%rsi)
  0x0000000112122355:   jmpq   0x00000001121224c4
  0x000000011212235a:   cmp    0x258(%rsi),%rdx
  0x0000000112122361:   jne    0x0000000112122370
  0x0000000112122363:   addq   $0x1,0x260(%rsi)
  0x000000011212236b:   jmpq   0x00000001121224c4
  0x0000000112122370:   cmp    0x268(%rsi),%rdx
  0x0000000112122377:   jne    0x0000000112122386
  0x0000000112122379:   addq   $0x1,0x270(%rsi)
  0x0000000112122381:   jmpq   0x00000001121224c4
  0x0000000112122386:   cmp    0x278(%rsi),%rdx
  0x000000011212238d:   jne    0x000000011212239c
  0x000000011212238f:   addq   $0x1,0x280(%rsi)
  0x0000000112122397:   jmpq   0x00000001121224c4
  0x000000011212239c:   cmpq   $0x0,0x208(%rsi)
  0x00000001121223a7:   jne    0x00000001121223c0
  0x00000001121223a9:   mov    %rdx,0x208(%rsi)
  0x00000001121223b0:   movq   $0x1,0x210(%rsi)
  0x00000001121223bb:   jmpq   0x00000001121224c4
  0x00000001121223c0:   cmpq   $0x0,0x218(%rsi)
  0x00000001121223cb:   jne    0x00000001121223e4
  0x00000001121223cd:   mov    %rdx,0x218(%rsi)
  0x00000001121223d4:   movq   $0x1,0x220(%rsi)
  0x00000001121223df:   jmpq   0x00000001121224c4
  0x00000001121223e4:   cmpq   $0x0,0x228(%rsi)
  0x00000001121223ef:   jne    0x0000000112122408
  0x00000001121223f1:   mov    %rdx,0x228(%rsi)
  0x00000001121223f8:   movq   $0x1,0x230(%rsi)
  0x0000000112122403:   jmpq   0x00000001121224c4
  0x0000000112122408:   cmpq   $0x0,0x238(%rsi)
  0x0000000112122413:   jne    0x000000011212242c
  0x0000000112122415:   mov    %rdx,0x238(%rsi)
  0x000000011212241c:   movq   $0x1,0x240(%rsi)
  0x0000000112122427:   jmpq   0x00000001121224c4
  0x000000011212242c:   cmpq   $0x0,0x248(%rsi)
  0x0000000112122437:   jne    0x0000000112122450
  0x0000000112122439:   mov    %rdx,0x248(%rsi)
  0x0000000112122440:   movq   $0x1,0x250(%rsi)
  0x000000011212244b:   jmpq   0x00000001121224c4
  0x0000000112122450:   cmpq   $0x0,0x258(%rsi)
  0x000000011212245b:   jne    0x0000000112122474
  0x000000011212245d:   mov    %rdx,0x258(%rsi)
  0x0000000112122464:   movq   $0x1,0x260(%rsi)
  0x000000011212246f:   jmpq   0x00000001121224c4
  0x0000000112122474:   cmpq   $0x0,0x268(%rsi)
  0x000000011212247f:   jne    0x0000000112122498
  0x0000000112122481:   mov    %rdx,0x268(%rsi)
  0x0000000112122488:   movq   $0x1,0x270(%rsi)
  0x0000000112122493:   jmpq   0x00000001121224c4
  0x0000000112122498:   cmpq   $0x0,0x278(%rsi)
  0x00000001121224a3:   jne    0x00000001121224bc
  0x00000001121224a5:   mov    %rdx,0x278(%rsi)
  0x00000001121224ac:   movq   $0x1,0x280(%rsi)
  0x00000001121224b7:   jmpq   0x00000001121224c4
  0x00000001121224bc:   addq   $0x1,0x1f8(%rsi)
  0x00000001121224c4:   mov    $0x30,%edx
  0x00000001121224c9:   mov    %rdi,%rsi
  0x00000001121224cc:   mov    %rdi,0xf0(%rsp)
  0x00000001121224d4:   nop
  0x00000001121224d5:   movabs $0xffffffffffffffff,%rax
  0x00000001121224df:   callq  0x0000000111a63d60           ; ImmutableOopMap {[240]=Oop }
                                                            ;*invokevirtual broadcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@42 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x00000001121224e4:   mov    0xf0(%rsp),%rdi
  0x00000001121224ec:   movabs $0x134f6c428,%rdx            ;   {metadata(method data for {method} {0x0000000134ee86c8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x00000001121224f6:   mov    0x8(%rdi),%edi
  0x00000001121224f9:   movabs $0x800000000,%r10
  0x0000000112122503:   add    %r10,%rdi
  0x0000000112122506:   cmp    0x2a0(%rdx),%rdi
  0x000000011212250d:   jne    0x000000011212251c
  0x000000011212250f:   addq   $0x1,0x2a8(%rdx)
  0x0000000112122517:   jmpq   0x00000001121226de
  0x000000011212251c:   cmp    0x2b0(%rdx),%rdi
  0x0000000112122523:   jne    0x0000000112122532
  0x0000000112122525:   addq   $0x1,0x2b8(%rdx)
  0x000000011212252d:   jmpq   0x00000001121226de
  0x0000000112122532:   cmp    0x2c0(%rdx),%rdi
  0x0000000112122539:   jne    0x0000000112122548
  0x000000011212253b:   addq   $0x1,0x2c8(%rdx)
  0x0000000112122543:   jmpq   0x00000001121226de
  0x0000000112122548:   cmp    0x2d0(%rdx),%rdi
  0x000000011212254f:   jne    0x000000011212255e
  0x0000000112122551:   addq   $0x1,0x2d8(%rdx)
  0x0000000112122559:   jmpq   0x00000001121226de
  0x000000011212255e:   cmp    0x2e0(%rdx),%rdi
  0x0000000112122565:   jne    0x0000000112122574
  0x0000000112122567:   addq   $0x1,0x2e8(%rdx)
  0x000000011212256f:   jmpq   0x00000001121226de
  0x0000000112122574:   cmp    0x2f0(%rdx),%rdi
  0x000000011212257b:   jne    0x000000011212258a
  0x000000011212257d:   addq   $0x1,0x2f8(%rdx)
  0x0000000112122585:   jmpq   0x00000001121226de
  0x000000011212258a:   cmp    0x300(%rdx),%rdi
  0x0000000112122591:   jne    0x00000001121225a0
  0x0000000112122593:   addq   $0x1,0x308(%rdx)
  0x000000011212259b:   jmpq   0x00000001121226de
  0x00000001121225a0:   cmp    0x310(%rdx),%rdi
  0x00000001121225a7:   jne    0x00000001121225b6
  0x00000001121225a9:   addq   $0x1,0x318(%rdx)
  0x00000001121225b1:   jmpq   0x00000001121226de
  0x00000001121225b6:   cmpq   $0x0,0x2a0(%rdx)
  0x00000001121225c1:   jne    0x00000001121225da
  0x00000001121225c3:   mov    %rdi,0x2a0(%rdx)
  0x00000001121225ca:   movq   $0x1,0x2a8(%rdx)
  0x00000001121225d5:   jmpq   0x00000001121226de
  0x00000001121225da:   cmpq   $0x0,0x2b0(%rdx)
  0x00000001121225e5:   jne    0x00000001121225fe
  0x00000001121225e7:   mov    %rdi,0x2b0(%rdx)
  0x00000001121225ee:   movq   $0x1,0x2b8(%rdx)
  0x00000001121225f9:   jmpq   0x00000001121226de
  0x00000001121225fe:   cmpq   $0x0,0x2c0(%rdx)
  0x0000000112122609:   jne    0x0000000112122622
  0x000000011212260b:   mov    %rdi,0x2c0(%rdx)
  0x0000000112122612:   movq   $0x1,0x2c8(%rdx)
  0x000000011212261d:   jmpq   0x00000001121226de
  0x0000000112122622:   cmpq   $0x0,0x2d0(%rdx)
  0x000000011212262d:   jne    0x0000000112122646
  0x000000011212262f:   mov    %rdi,0x2d0(%rdx)
  0x0000000112122636:   movq   $0x1,0x2d8(%rdx)
  0x0000000112122641:   jmpq   0x00000001121226de
  0x0000000112122646:   cmpq   $0x0,0x2e0(%rdx)
  0x0000000112122651:   jne    0x000000011212266a
  0x0000000112122653:   mov    %rdi,0x2e0(%rdx)
  0x000000011212265a:   movq   $0x1,0x2e8(%rdx)
  0x0000000112122665:   jmpq   0x00000001121226de
  0x000000011212266a:   cmpq   $0x0,0x2f0(%rdx)
  0x0000000112122675:   jne    0x000000011212268e
  0x0000000112122677:   mov    %rdi,0x2f0(%rdx)
  0x000000011212267e:   movq   $0x1,0x2f8(%rdx)
  0x0000000112122689:   jmpq   0x00000001121226de
  0x000000011212268e:   cmpq   $0x0,0x300(%rdx)
  0x0000000112122699:   jne    0x00000001121226b2
  0x000000011212269b:   mov    %rdi,0x300(%rdx)
  0x00000001121226a2:   movq   $0x1,0x308(%rdx)
  0x00000001121226ad:   jmpq   0x00000001121226de
  0x00000001121226b2:   cmpq   $0x0,0x310(%rdx)
  0x00000001121226bd:   jne    0x00000001121226d6
  0x00000001121226bf:   mov    %rdi,0x310(%rdx)
  0x00000001121226c6:   movq   $0x1,0x318(%rdx)
  0x00000001121226d1:   jmpq   0x00000001121226de
  0x00000001121226d6:   addq   $0x1,0x290(%rdx)
  0x00000001121226de:   movabs $0x61f2d5488,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$BinaryImpl'{0x000000061f2d5488})}
  0x00000001121226e8:   mov    %rax,%rcx
  0x00000001121226eb:   mov    0xf0(%rsp),%rsi
  0x00000001121226f3:   xchg   %ax,%ax
  0x00000001121226f5:   movabs $0xffffffffffffffff,%rax
  0x00000001121226ff:   callq  0x0000000111a63da0           ; ImmutableOopMap {}
                                                            ;*invokevirtual lanewise {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@45 (line 711)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {virtual_call}
  0x0000000112122704:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x0000000112123d82
  0x0000000112122707:   mov    %rax,%rdx
  0x000000011212270a:   movabs $0x1350431b0,%rcx            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000112122714:   mov    0x8(%rdx),%edx
  0x0000000112122717:   movabs $0x800000000,%r10
  0x0000000112122721:   add    %r10,%rdx
  0x0000000112122724:   cmp    0x1a8(%rcx),%rdx
  0x000000011212272b:   jne    0x000000011212273a
  0x000000011212272d:   addq   $0x1,0x1b0(%rcx)
  0x0000000112122735:   jmpq   0x00000001121228fc
  0x000000011212273a:   cmp    0x1b8(%rcx),%rdx
  0x0000000112122741:   jne    0x0000000112122750
  0x0000000112122743:   addq   $0x1,0x1c0(%rcx)
  0x000000011212274b:   jmpq   0x00000001121228fc
  0x0000000112122750:   cmp    0x1c8(%rcx),%rdx
  0x0000000112122757:   jne    0x0000000112122766
  0x0000000112122759:   addq   $0x1,0x1d0(%rcx)
  0x0000000112122761:   jmpq   0x00000001121228fc
  0x0000000112122766:   cmp    0x1d8(%rcx),%rdx
  0x000000011212276d:   jne    0x000000011212277c
  0x000000011212276f:   addq   $0x1,0x1e0(%rcx)
  0x0000000112122777:   jmpq   0x00000001121228fc
  0x000000011212277c:   cmp    0x1e8(%rcx),%rdx
  0x0000000112122783:   jne    0x0000000112122792
  0x0000000112122785:   addq   $0x1,0x1f0(%rcx)
  0x000000011212278d:   jmpq   0x00000001121228fc
  0x0000000112122792:   cmp    0x1f8(%rcx),%rdx
  0x0000000112122799:   jne    0x00000001121227a8
  0x000000011212279b:   addq   $0x1,0x200(%rcx)
  0x00000001121227a3:   jmpq   0x00000001121228fc
  0x00000001121227a8:   cmp    0x208(%rcx),%rdx
  0x00000001121227af:   jne    0x00000001121227be
  0x00000001121227b1:   addq   $0x1,0x210(%rcx)
  0x00000001121227b9:   jmpq   0x00000001121228fc
  0x00000001121227be:   cmp    0x218(%rcx),%rdx
  0x00000001121227c5:   jne    0x00000001121227d4
  0x00000001121227c7:   addq   $0x1,0x220(%rcx)
  0x00000001121227cf:   jmpq   0x00000001121228fc
  0x00000001121227d4:   cmpq   $0x0,0x1a8(%rcx)
  0x00000001121227df:   jne    0x00000001121227f8
  0x00000001121227e1:   mov    %rdx,0x1a8(%rcx)
  0x00000001121227e8:   movq   $0x1,0x1b0(%rcx)
  0x00000001121227f3:   jmpq   0x00000001121228fc
  0x00000001121227f8:   cmpq   $0x0,0x1b8(%rcx)
  0x0000000112122803:   jne    0x000000011212281c
  0x0000000112122805:   mov    %rdx,0x1b8(%rcx)
  0x000000011212280c:   movq   $0x1,0x1c0(%rcx)
  0x0000000112122817:   jmpq   0x00000001121228fc
  0x000000011212281c:   cmpq   $0x0,0x1c8(%rcx)
  0x0000000112122827:   jne    0x0000000112122840
  0x0000000112122829:   mov    %rdx,0x1c8(%rcx)
  0x0000000112122830:   movq   $0x1,0x1d0(%rcx)
  0x000000011212283b:   jmpq   0x00000001121228fc
  0x0000000112122840:   cmpq   $0x0,0x1d8(%rcx)
  0x000000011212284b:   jne    0x0000000112122864
  0x000000011212284d:   mov    %rdx,0x1d8(%rcx)
  0x0000000112122854:   movq   $0x1,0x1e0(%rcx)
  0x000000011212285f:   jmpq   0x00000001121228fc
  0x0000000112122864:   cmpq   $0x0,0x1e8(%rcx)
  0x000000011212286f:   jne    0x0000000112122888
  0x0000000112122871:   mov    %rdx,0x1e8(%rcx)
  0x0000000112122878:   movq   $0x1,0x1f0(%rcx)
  0x0000000112122883:   jmpq   0x00000001121228fc
  0x0000000112122888:   cmpq   $0x0,0x1f8(%rcx)
  0x0000000112122893:   jne    0x00000001121228ac
  0x0000000112122895:   mov    %rdx,0x1f8(%rcx)
  0x000000011212289c:   movq   $0x1,0x200(%rcx)
  0x00000001121228a7:   jmpq   0x00000001121228fc
  0x00000001121228ac:   cmpq   $0x0,0x208(%rcx)
  0x00000001121228b7:   jne    0x00000001121228d0
  0x00000001121228b9:   mov    %rdx,0x208(%rcx)
  0x00000001121228c0:   movq   $0x1,0x210(%rcx)
  0x00000001121228cb:   jmpq   0x00000001121228fc
  0x00000001121228d0:   cmpq   $0x0,0x218(%rcx)
  0x00000001121228db:   jne    0x00000001121228f4
  0x00000001121228dd:   mov    %rdx,0x218(%rcx)
  0x00000001121228e4:   movq   $0x1,0x220(%rcx)
  0x00000001121228ef:   jmpq   0x00000001121228fc
  0x00000001121228f4:   addq   $0x1,0x198(%rcx)
  0x00000001121228fc:   movabs $0x61f2d69f0,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$ComparisonImpl'{0x000000061f2d69f0})}
  0x0000000112122906:   movabs $0x9,%rcx
  0x0000000112122910:   mov    %rax,%rsi
  0x0000000112122913:   mov    %rax,0xf8(%rsp)
  0x000000011212291b:   xchg   %ax,%ax
  0x000000011212291d:   movabs $0xffffffffffffffff,%rax
  0x0000000112122927:   callq  0x0000000111a63de0           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokevirtual compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {virtual_call}
  0x000000011212292c:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x0000000112123d87
  0x000000011212292f:   mov    %rax,%rsi
  0x0000000112122932:   movabs $0x1350431b0,%rdx            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000011212293c:   addq   $0x1,0x230(%rdx)
  0x0000000112122944:   movabs $0x134f6c790,%rsi            ;   {metadata(method data for {method} {0x0000000134f18400} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000011212294e:   mov    0xac(%rsi),%edx
  0x0000000112122954:   add    $0x2,%edx
  0x0000000112122957:   mov    %edx,0xac(%rsi)
  0x000000011212295d:   and    $0x1ffffe,%edx
  0x0000000112122963:   cmp    $0x0,%edx
  0x0000000112122966:   je     0x0000000112123d8c
  0x000000011212296c:   mov    %rax,%rsi
  0x000000011212296f:   movabs $0x134f6c790,%rdx            ;   {metadata(method data for {method} {0x0000000134f18400} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122979:   addq   $0x1,0xf0(%rdx)
  0x0000000112122981:   movabs $0x134f6ca00,%rsi            ;   {metadata(method data for {method} {0x0000000134f17638} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x000000011212298b:   mov    0xac(%rsi),%edx
  0x0000000112122991:   add    $0x2,%edx
  0x0000000112122994:   mov    %edx,0xac(%rsi)
  0x000000011212299a:   and    $0x1ffffe,%edx
  0x00000001121229a0:   cmp    $0x0,%edx
  0x00000001121229a3:   je     0x0000000112123dad
  0x00000001121229a9:   movabs $0x61f2c52c0,%rsi            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f2c52c0})}
  0x00000001121229b3:   mov    %rsi,%rdx
  0x00000001121229b6:   movabs $0x134f6c790,%rcx            ;   {metadata(method data for {method} {0x0000000134f18400} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x00000001121229c0:   addq   $0x1,0x188(%rcx)
  0x00000001121229c8:   movabs $0x134f6cb10,%rdx            ;   {metadata(method data for {method} {0x0000000134eff358} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x00000001121229d2:   mov    0xac(%rdx),%ecx
  0x00000001121229d8:   add    $0x2,%ecx
  0x00000001121229db:   mov    %ecx,0xac(%rdx)
  0x00000001121229e1:   and    $0x1ffffe,%ecx
  0x00000001121229e7:   cmp    $0x0,%ecx
  0x00000001121229ea:   je     0x0000000112123dce
  0x00000001121229f0:   movabs $0x134f6cb10,%rdx            ;   {metadata(method data for {method} {0x0000000134eff358} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x00000001121229fa:   addq   $0x1,0xf0(%rdx)
  0x0000000112122a02:   movabs $0x134f6cb10,%rsi            ;   {metadata(method data for {method} {0x0000000134eff358} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112122a0c:   incl   0x188(%rsi)
  0x0000000112122a12:   movabs $0x61f2c52c0,%rsi            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f2c52c0})}
  0x0000000112122a1c:   movabs $0x134f6cb10,%rdx            ;   {metadata(method data for {method} {0x0000000134eff358} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112122a26:   addq   $0x1,0x1b8(%rdx)
  0x0000000112122a2e:   movabs $0x134f6cb10,%rsi            ;   {metadata(method data for {method} {0x0000000134eff358} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112122a38:   addq   $0x1,0x2c0(%rsi)
  0x0000000112122a40:   movabs $0x134f6ce48,%rsi            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122a4a:   mov    0xac(%rsi),%edx
  0x0000000112122a50:   add    $0x2,%edx
  0x0000000112122a53:   mov    %edx,0xac(%rsi)
  0x0000000112122a59:   and    $0x1ffffe,%edx
  0x0000000112122a5f:   cmp    $0x0,%edx
  0x0000000112122a62:   je     0x0000000112123def
  0x0000000112122a68:   movabs $0x134f6ce48,%rsi            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122a72:   incl   0x100(%rsi)
  0x0000000112122a78:   movabs $0x134f6ce48,%rsi            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122a82:   incl   0x110(%rsi)
  0x0000000112122a88:   mov    %rax,0x100(%rsp)
  0x0000000112122a90:   movabs $0x134f6ce48,%rsi            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122a9a:   addq   $0x1,0x128(%rsi)
  0x0000000112122aa2:   movabs $0x134f5e9f0,%rsi            ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112122aac:   mov    0xac(%rsi),%edx
  0x0000000112122ab2:   add    $0x2,%edx
  0x0000000112122ab5:   mov    %edx,0xac(%rsi)
  0x0000000112122abb:   and    $0x1ffffe,%edx
  0x0000000112122ac1:   cmp    $0x0,%edx
  0x0000000112122ac4:   je     0x0000000112123e10
  0x0000000112122aca:   movabs $0x134f5e9f0,%rsi            ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112122ad4:   addq   $0x1,0x188(%rsi)
  0x0000000112122adc:   movabs $0x135000490,%rsi            ;   {metadata(method data for {method} {0x0000000135000268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000112122ae6:   mov    0xac(%rsi),%edx
  0x0000000112122aec:   add    $0x2,%edx
  0x0000000112122aef:   mov    %edx,0xac(%rsi)
  0x0000000112122af5:   and    $0x1ffffe,%edx
  0x0000000112122afb:   cmp    $0x0,%edx
  0x0000000112122afe:   je     0x0000000112123e31
  0x0000000112122b04:   movabs $0x134f6ce48,%rsi            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122b0e:   addq   $0x1,0x138(%rsi)
  0x0000000112122b16:   movabs $0x61f2c53a8,%rsi            ;   {oop(a 'java/lang/Class'{0x000000061f2c53a8} = 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122b20:   movabs $0x7ffb00230,%rdx            ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x0000000112122b2a:   movabs $0xffffffffffffffff,%r8
  0x0000000112122b34:   mov    $0x8,%ecx
  0x0000000112122b39:   movabs $0x0,%r9                     ;   {oop(NULL)}
  0x0000000112122b43:   movabs $0x61f338348,%rdi            ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$91+0x0000000800c29a10'{0x000000061f338348})}
  0x0000000112122b4d:   xchg   %ax,%ax
  0x0000000112122b4f:   callq  0x00000001121059c0           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*invokestatic broadcastCoerced {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@24 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x0000000112122b54:   cmp    $0x0,%rax
  0x0000000112122b58:   jne    0x0000000112122b70
  0x0000000112122b5a:   movabs $0x134f6ce48,%rcx            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122b64:   orb    $0x1,0x141(%rcx)
  0x0000000112122b6b:   jmpq   0x0000000112122d9e
  0x0000000112122b70:   movabs $0x800c211a0,%rdx            ;   {metadata('jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122b7a:   mov    0x8(%rax),%esi
  0x0000000112122b7d:   movabs $0x800000000,%r10
  0x0000000112122b87:   add    %r10,%rsi
  0x0000000112122b8a:   cmp    %rsi,%rdx
  0x0000000112122b8d:   jne    0x0000000112122d82
  0x0000000112122b93:   movabs $0x134f6ce48,%rcx            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122b9d:   mov    0x8(%rax),%edx
  0x0000000112122ba0:   movabs $0x800000000,%r10
  0x0000000112122baa:   add    %r10,%rdx
  0x0000000112122bad:   cmp    0x158(%rcx),%rdx
  0x0000000112122bb4:   jne    0x0000000112122bc3
  0x0000000112122bb6:   addq   $0x1,0x160(%rcx)
  0x0000000112122bbe:   jmpq   0x0000000112122d9e
  0x0000000112122bc3:   cmp    0x168(%rcx),%rdx
  0x0000000112122bca:   jne    0x0000000112122bd9
  0x0000000112122bcc:   addq   $0x1,0x170(%rcx)
  0x0000000112122bd4:   jmpq   0x0000000112122d9e
  0x0000000112122bd9:   cmp    0x178(%rcx),%rdx
  0x0000000112122be0:   jne    0x0000000112122bef
  0x0000000112122be2:   addq   $0x1,0x180(%rcx)
  0x0000000112122bea:   jmpq   0x0000000112122d9e
  0x0000000112122bef:   cmp    0x188(%rcx),%rdx
  0x0000000112122bf6:   jne    0x0000000112122c05
  0x0000000112122bf8:   addq   $0x1,0x190(%rcx)
  0x0000000112122c00:   jmpq   0x0000000112122d9e
  0x0000000112122c05:   cmp    0x198(%rcx),%rdx
  0x0000000112122c0c:   jne    0x0000000112122c1b
  0x0000000112122c0e:   addq   $0x1,0x1a0(%rcx)
  0x0000000112122c16:   jmpq   0x0000000112122d9e
  0x0000000112122c1b:   cmp    0x1a8(%rcx),%rdx
  0x0000000112122c22:   jne    0x0000000112122c31
  0x0000000112122c24:   addq   $0x1,0x1b0(%rcx)
  0x0000000112122c2c:   jmpq   0x0000000112122d9e
  0x0000000112122c31:   cmp    0x1b8(%rcx),%rdx
  0x0000000112122c38:   jne    0x0000000112122c47
  0x0000000112122c3a:   addq   $0x1,0x1c0(%rcx)
  0x0000000112122c42:   jmpq   0x0000000112122d9e
  0x0000000112122c47:   cmp    0x1c8(%rcx),%rdx
  0x0000000112122c4e:   jne    0x0000000112122c5d
  0x0000000112122c50:   addq   $0x1,0x1d0(%rcx)
  0x0000000112122c58:   jmpq   0x0000000112122d9e
  0x0000000112122c5d:   cmpq   $0x0,0x158(%rcx)
  0x0000000112122c68:   jne    0x0000000112122c81
  0x0000000112122c6a:   mov    %rdx,0x158(%rcx)
  0x0000000112122c71:   movq   $0x1,0x160(%rcx)
  0x0000000112122c7c:   jmpq   0x0000000112122d9e
  0x0000000112122c81:   cmpq   $0x0,0x168(%rcx)
  0x0000000112122c8c:   jne    0x0000000112122ca5
  0x0000000112122c8e:   mov    %rdx,0x168(%rcx)
  0x0000000112122c95:   movq   $0x1,0x170(%rcx)
  0x0000000112122ca0:   jmpq   0x0000000112122d9e
  0x0000000112122ca5:   cmpq   $0x0,0x178(%rcx)
  0x0000000112122cb0:   jne    0x0000000112122cc9
  0x0000000112122cb2:   mov    %rdx,0x178(%rcx)
  0x0000000112122cb9:   movq   $0x1,0x180(%rcx)
  0x0000000112122cc4:   jmpq   0x0000000112122d9e
  0x0000000112122cc9:   cmpq   $0x0,0x188(%rcx)
  0x0000000112122cd4:   jne    0x0000000112122ced
  0x0000000112122cd6:   mov    %rdx,0x188(%rcx)
  0x0000000112122cdd:   movq   $0x1,0x190(%rcx)
  0x0000000112122ce8:   jmpq   0x0000000112122d9e
  0x0000000112122ced:   cmpq   $0x0,0x198(%rcx)
  0x0000000112122cf8:   jne    0x0000000112122d11
  0x0000000112122cfa:   mov    %rdx,0x198(%rcx)
  0x0000000112122d01:   movq   $0x1,0x1a0(%rcx)
  0x0000000112122d0c:   jmpq   0x0000000112122d9e
  0x0000000112122d11:   cmpq   $0x0,0x1a8(%rcx)
  0x0000000112122d1c:   jne    0x0000000112122d35
  0x0000000112122d1e:   mov    %rdx,0x1a8(%rcx)
  0x0000000112122d25:   movq   $0x1,0x1b0(%rcx)
  0x0000000112122d30:   jmpq   0x0000000112122d9e
  0x0000000112122d35:   cmpq   $0x0,0x1b8(%rcx)
  0x0000000112122d40:   jne    0x0000000112122d59
  0x0000000112122d42:   mov    %rdx,0x1b8(%rcx)
  0x0000000112122d49:   movq   $0x1,0x1c0(%rcx)
  0x0000000112122d54:   jmpq   0x0000000112122d9e
  0x0000000112122d59:   cmpq   $0x0,0x1c8(%rcx)
  0x0000000112122d64:   jne    0x0000000112122d7d
  0x0000000112122d66:   mov    %rdx,0x1c8(%rcx)
  0x0000000112122d6d:   movq   $0x1,0x1d0(%rcx)
  0x0000000112122d78:   jmpq   0x0000000112122d9e
  0x0000000112122d7d:   jmpq   0x0000000112122d9e
  0x0000000112122d82:   movabs $0x134f6ce48,%rcx            ;   {metadata(method data for {method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122d8c:   subq   $0x1,0x148(%rcx)
  0x0000000112122d94:   jmpq   0x0000000112123e52
  0x0000000112122d99:   jmpq   0x0000000112122d9e
  0x0000000112122d9e:   mov    %rax,%rdi
  0x0000000112122da1:   mov    0x100(%rsp),%rax
  0x0000000112122da9:   movabs $0x134f6c790,%rsi            ;   {metadata(method data for {method} {0x0000000134f18400} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122db3:   addq   $0x1,0x220(%rsi)
  0x0000000112122dbb:   movabs $0x134f5e9f0,%rsi            ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112122dc5:   mov    0xac(%rsi),%edx
  0x0000000112122dcb:   add    $0x2,%edx
  0x0000000112122dce:   mov    %edx,0xac(%rsi)
  0x0000000112122dd4:   and    $0x1ffffe,%edx
  0x0000000112122dda:   cmp    $0x0,%edx
  0x0000000112122ddd:   je     0x0000000112123e5b
  0x0000000112122de3:   movabs $0x134f5e9f0,%rsi            ;   {metadata(method data for {method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112122ded:   addq   $0x1,0x188(%rsi)
  0x0000000112122df5:   movabs $0x135000490,%rsi            ;   {metadata(method data for {method} {0x0000000135000268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000112122dff:   mov    0xac(%rsi),%edx
  0x0000000112122e05:   add    $0x2,%edx
  0x0000000112122e08:   mov    %edx,0xac(%rsi)
  0x0000000112122e0e:   and    $0x1ffffe,%edx
  0x0000000112122e14:   cmp    $0x0,%edx
  0x0000000112122e17:   je     0x0000000112123e7c
  0x0000000112122e1d:   movabs $0x134f6c790,%rsi            ;   {metadata(method data for {method} {0x0000000134f18400} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122e27:   addq   $0x1,0x230(%rsi)
  0x0000000112122e2f:   movabs $0x61f2c53a8,%rdx            ;   {oop(a 'java/lang/Class'{0x000000061f2c53a8} = 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112122e39:   movabs $0x7ffb00230,%rcx            ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x0000000112122e43:   mov    $0x4,%esi
  0x0000000112122e48:   mov    $0x8,%r8d
  0x0000000112122e4e:   mov    %rax,%r9
  0x0000000112122e51:   movabs $0x61f33b3e8,%r10            ;   {oop(a 'jdk/incubator/vector/Short128Vector$Short128Mask$$Lambda$92+0x0000000800c29c30'{0x000000061f33b3e8})}
  0x0000000112122e5b:   mov    %r10,(%rsp)
  0x0000000112122e5f:   callq  0x00000001121240b5           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic test {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {static_call}
  0x0000000112122e64:   and    $0x1,%eax
  0x0000000112122e67:   cmp    $0x0,%eax
  0x0000000112122e6a:   movabs $0x1350431b0,%rsi            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000112122e74:   movabs $0x2d8,%rdi
  0x0000000112122e7e:   jne    0x0000000112122e8e
  0x0000000112122e84:   movabs $0x2c8,%rdi
  0x0000000112122e8e:   mov    (%rsi,%rdi,1),%rbx
  0x0000000112122e92:   lea    0x1(%rbx),%rbx
  0x0000000112122e96:   mov    %rbx,(%rsi,%rdi,1)
  0x0000000112122e9a:   jne    0x0000000112123aa2
  0x0000000112122ea0:   mov    0xf8(%rsp),%rax
  0x0000000112122ea8:   movabs $0x1350431b0,%rsi            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000112122eb2:   addq   $0x1,0x2e8(%rsi)
  0x0000000112122eba:   movabs $0x134f6d3d0,%rsi            ;   {metadata(method data for {method} {0x0000000134d46cf0} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000112122ec4:   mov    0xac(%rsi),%edi
  0x0000000112122eca:   add    $0x2,%edi
  0x0000000112122ecd:   mov    %edi,0xac(%rsi)
  0x0000000112122ed3:   and    $0x1ffffe,%edi
  0x0000000112122ed9:   cmp    $0x0,%edi
  0x0000000112122edc:   je     0x0000000112123e9d
  0x0000000112122ee2:   mov    0xf8(%rsp),%rax
  0x0000000112122eea:   movabs $0x134f6d3d0,%rsi            ;   {metadata(method data for {method} {0x0000000134d46cf0} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000112122ef4:   mov    0x8(%rax),%eax
  0x0000000112122ef7:   movabs $0x800000000,%r10
  0x0000000112122f01:   add    %r10,%rax
  0x0000000112122f04:   cmp    0x100(%rsi),%rax
  0x0000000112122f0b:   jne    0x0000000112122f1a
  0x0000000112122f0d:   addq   $0x1,0x108(%rsi)
  0x0000000112122f15:   jmpq   0x00000001121230dc
  0x0000000112122f1a:   cmp    0x110(%rsi),%rax
  0x0000000112122f21:   jne    0x0000000112122f30
  0x0000000112122f23:   addq   $0x1,0x118(%rsi)
  0x0000000112122f2b:   jmpq   0x00000001121230dc
  0x0000000112122f30:   cmp    0x120(%rsi),%rax
  0x0000000112122f37:   jne    0x0000000112122f46
  0x0000000112122f39:   addq   $0x1,0x128(%rsi)
  0x0000000112122f41:   jmpq   0x00000001121230dc
  0x0000000112122f46:   cmp    0x130(%rsi),%rax
  0x0000000112122f4d:   jne    0x0000000112122f5c
  0x0000000112122f4f:   addq   $0x1,0x138(%rsi)
  0x0000000112122f57:   jmpq   0x00000001121230dc
  0x0000000112122f5c:   cmp    0x140(%rsi),%rax
  0x0000000112122f63:   jne    0x0000000112122f72
  0x0000000112122f65:   addq   $0x1,0x148(%rsi)
  0x0000000112122f6d:   jmpq   0x00000001121230dc
  0x0000000112122f72:   cmp    0x150(%rsi),%rax
  0x0000000112122f79:   jne    0x0000000112122f88
  0x0000000112122f7b:   addq   $0x1,0x158(%rsi)
  0x0000000112122f83:   jmpq   0x00000001121230dc
  0x0000000112122f88:   cmp    0x160(%rsi),%rax
  0x0000000112122f8f:   jne    0x0000000112122f9e
  0x0000000112122f91:   addq   $0x1,0x168(%rsi)
  0x0000000112122f99:   jmpq   0x00000001121230dc
  0x0000000112122f9e:   cmp    0x170(%rsi),%rax
  0x0000000112122fa5:   jne    0x0000000112122fb4
  0x0000000112122fa7:   addq   $0x1,0x178(%rsi)
  0x0000000112122faf:   jmpq   0x00000001121230dc
  0x0000000112122fb4:   cmpq   $0x0,0x100(%rsi)
  0x0000000112122fbf:   jne    0x0000000112122fd8
  0x0000000112122fc1:   mov    %rax,0x100(%rsi)
  0x0000000112122fc8:   movq   $0x1,0x108(%rsi)
  0x0000000112122fd3:   jmpq   0x00000001121230dc
  0x0000000112122fd8:   cmpq   $0x0,0x110(%rsi)
  0x0000000112122fe3:   jne    0x0000000112122ffc
  0x0000000112122fe5:   mov    %rax,0x110(%rsi)
  0x0000000112122fec:   movq   $0x1,0x118(%rsi)
  0x0000000112122ff7:   jmpq   0x00000001121230dc
  0x0000000112122ffc:   cmpq   $0x0,0x120(%rsi)
  0x0000000112123007:   jne    0x0000000112123020
  0x0000000112123009:   mov    %rax,0x120(%rsi)
  0x0000000112123010:   movq   $0x1,0x128(%rsi)
  0x000000011212301b:   jmpq   0x00000001121230dc
  0x0000000112123020:   cmpq   $0x0,0x130(%rsi)
  0x000000011212302b:   jne    0x0000000112123044
  0x000000011212302d:   mov    %rax,0x130(%rsi)
  0x0000000112123034:   movq   $0x1,0x138(%rsi)
  0x000000011212303f:   jmpq   0x00000001121230dc
  0x0000000112123044:   cmpq   $0x0,0x140(%rsi)
  0x000000011212304f:   jne    0x0000000112123068
  0x0000000112123051:   mov    %rax,0x140(%rsi)
  0x0000000112123058:   movq   $0x1,0x148(%rsi)
  0x0000000112123063:   jmpq   0x00000001121230dc
  0x0000000112123068:   cmpq   $0x0,0x150(%rsi)
  0x0000000112123073:   jne    0x000000011212308c
  0x0000000112123075:   mov    %rax,0x150(%rsi)
  0x000000011212307c:   movq   $0x1,0x158(%rsi)
  0x0000000112123087:   jmpq   0x00000001121230dc
  0x000000011212308c:   cmpq   $0x0,0x160(%rsi)
  0x0000000112123097:   jne    0x00000001121230b0
  0x0000000112123099:   mov    %rax,0x160(%rsi)
  0x00000001121230a0:   movq   $0x1,0x168(%rsi)
  0x00000001121230ab:   jmpq   0x00000001121230dc
  0x00000001121230b0:   cmpq   $0x0,0x170(%rsi)
  0x00000001121230bb:   jne    0x00000001121230d4
  0x00000001121230bd:   mov    %rax,0x170(%rsi)
  0x00000001121230c4:   movq   $0x1,0x178(%rsi)
  0x00000001121230cf:   jmpq   0x00000001121230dc
  0x00000001121230d4:   addq   $0x1,0xf0(%rsi)
  0x00000001121230dc:   mov    0xf8(%rsp),%rsi
  0x00000001121230e4:   nop
  0x00000001121230e5:   movabs $0x800c20b60,%rax
  0x00000001121230ef:   callq  0x0000000112109c40           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokevirtual vspecies {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@1 (line 282)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x00000001121230f4:   mov    0x28(%rax),%edi              ; implicit exception: dispatches to 0x0000000112123ebe
  0x00000001121230f7:   shl    $0x3,%rdi
  0x00000001121230fb:   movabs $0x134f6d3d0,%rsi            ;   {metadata(method data for {method} {0x0000000134d46cf0} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000112123105:   addq   $0x1,0x220(%rsi)
  0x000000011212310d:   movabs $0x134f6d6d8,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d2e8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123117:   mov    0xac(%rsi),%edx
  0x000000011212311d:   add    $0x2,%edx
  0x0000000112123120:   mov    %edx,0xac(%rsi)
  0x0000000112123126:   and    $0x1ffffe,%edx
  0x000000011212312c:   cmp    $0x0,%edx
  0x000000011212312f:   je     0x0000000112123ec3
  0x0000000112123135:   movabs $0x600509170,%rsi            ;   {oop(a 'jdk/incubator/vector/LaneType'{0x0000000600509170})}
  0x000000011212313f:   cmp    %rsi,%rdi
  0x0000000112123142:   movabs $0x134f6d6d8,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d2e8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000011212314c:   movabs $0xf0,%rdx
  0x0000000112123156:   jne    0x0000000112123166
  0x000000011212315c:   movabs $0x100,%rdx
  0x0000000112123166:   mov    (%rsi,%rdx,1),%rcx
  0x000000011212316a:   lea    0x1(%rcx),%rcx
  0x000000011212316e:   mov    %rcx,(%rsi,%rdx,1)
  0x0000000112123172:   jne    0x00000001121232f4
  0x0000000112123178:   movabs $0x134f6d6d8,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d2e8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123182:   addq   $0x1,0x110(%rsi)
  0x000000011212318a:   movabs $0x134f6d840,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d228} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123194:   mov    0xac(%rsi),%edx
  0x000000011212319a:   add    $0x2,%edx
  0x000000011212319d:   mov    %edx,0xac(%rsi)
  0x00000001121231a3:   and    $0x1ffffe,%edx
  0x00000001121231a9:   cmp    $0x0,%edx
  0x00000001121231ac:   je     0x0000000112123ee4
  0x00000001121231b2:   movabs $0x134f6d840,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d228} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001121231bc:   addq   $0x1,0xf0(%rsi)
  0x00000001121231c4:   movabs $0x134f6d968,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001121231ce:   mov    0xac(%rsi),%edx
  0x00000001121231d4:   add    $0x2,%edx
  0x00000001121231d7:   mov    %edx,0xac(%rsi)
  0x00000001121231dd:   and    $0x1ffffe,%edx
  0x00000001121231e3:   cmp    $0x0,%edx
  0x00000001121231e6:   je     0x0000000112123f05
  0x00000001121231ec:   movabs $0x134f6d968,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001121231f6:   addq   $0x1,0xf0(%rsi)
  0x00000001121231fe:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123208:   mov    0xac(%rsi),%edx
  0x000000011212320e:   add    $0x2,%edx
  0x0000000112123211:   mov    %edx,0xac(%rsi)
  0x0000000112123217:   and    $0x1ffffe,%edx
  0x000000011212321d:   cmp    $0x0,%edx
  0x0000000112123220:   je     0x0000000112123f26
  0x0000000112123226:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123230:   incl   0xf0(%rsi)
  0x0000000112123236:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123240:   incl   0x1e8(%rsi)
  0x0000000112123246:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123250:   incl   0x1f8(%rsi)
  0x0000000112123256:   mov    0x20(%rdi),%esi              ; implicit exception: dispatches to 0x0000000112123f47
  0x0000000112123259:   mov    $0x7,%edx
  0x000000011212325e:   movabs $0x61f3080e8,%rcx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061f3080e8})}
  0x0000000112123268:   cmp    %esi,%edx
  0x000000011212326a:   jbe    0x0000000112123f4c
  0x0000000112123270:   movslq %esi,%rdx
  0x0000000112123273:   mov    0x10(%rcx,%rdx,4),%edx       ; implicit exception: dispatches to 0x0000000112123f5a
  0x0000000112123277:   shl    $0x3,%rdx
  0x000000011212327b:   cmp    0xc(%rdx),%esi               ; implicit exception: dispatches to 0x0000000112123f5f
  0x000000011212327e:   jae    0x0000000112123f69
  0x0000000112123284:   movslq %esi,%rsi
  0x0000000112123287:   mov    0x10(%rdx,%rsi,4),%esi
  0x000000011212328b:   shl    $0x3,%rsi
  0x000000011212328f:   cmp    $0x0,%rsi
  0x0000000112123293:   movabs $0x134f6d968,%rdx            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000011212329d:   movabs $0x110,%rcx
  0x00000001121232a7:   jne    0x00000001121232b7
  0x00000001121232ad:   movabs $0x100,%rcx
  0x00000001121232b7:   mov    (%rdx,%rcx,1),%rbx
  0x00000001121232bb:   lea    0x1(%rbx),%rbx
  0x00000001121232bf:   mov    %rbx,(%rdx,%rcx,1)
  0x00000001121232c3:   jne    0x0000000112123437
  0x00000001121232c9:   movabs $0x134f6d968,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001121232d3:   addq   $0x1,0x120(%rsi)
  0x00000001121232db:   mov    $0x49,%esi
  0x00000001121232e0:   mov    %rdi,%rdx
  0x00000001121232e3:   mov    %rdi,%rcx
  0x00000001121232e6:   nop
  0x00000001121232e7:   callq  0x0000000111a67080           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x00000001121232ec:   mov    %rax,%rsi
  0x00000001121232ef:   jmpq   0x0000000112123437
  0x00000001121232f4:   movabs $0x134f6d6d8,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d2e8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001121232fe:   addq   $0x1,0x120(%rsi)
  0x0000000112123306:   movabs $0x134f6d968,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123310:   mov    0xac(%rsi),%edx
  0x0000000112123316:   add    $0x2,%edx
  0x0000000112123319:   mov    %edx,0xac(%rsi)
  0x000000011212331f:   and    $0x1ffffe,%edx
  0x0000000112123325:   cmp    $0x0,%edx
  0x0000000112123328:   je     0x0000000112123f77
  0x000000011212332e:   movabs $0x134f6d968,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123338:   addq   $0x1,0xf0(%rsi)
  0x0000000112123340:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x000000011212334a:   mov    0xac(%rsi),%edx
  0x0000000112123350:   add    $0x2,%edx
  0x0000000112123353:   mov    %edx,0xac(%rsi)
  0x0000000112123359:   and    $0x1ffffe,%edx
  0x000000011212335f:   cmp    $0x0,%edx
  0x0000000112123362:   je     0x0000000112123f98
  0x0000000112123368:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123372:   incl   0xf0(%rsi)
  0x0000000112123378:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123382:   incl   0x1e8(%rsi)
  0x0000000112123388:   movabs $0x134f67088,%rsi            ;   {metadata(method data for {method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123392:   incl   0x1f8(%rsi)
  0x0000000112123398:   mov    0x20(%rdi),%esi              ; implicit exception: dispatches to 0x0000000112123fb9
  0x000000011212339b:   mov    $0x7,%edx
  0x00000001121233a0:   movabs $0x61f3080e8,%rcx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$ConversionImpl'[][7] {0x000000061f3080e8})}
  0x00000001121233aa:   cmp    %esi,%edx
  0x00000001121233ac:   jbe    0x0000000112123fbe
  0x00000001121233b2:   movslq %esi,%rsi
  0x00000001121233b5:   mov    0x10(%rcx,%rsi,4),%esi       ; implicit exception: dispatches to 0x0000000112123fcc
  0x00000001121233b9:   shl    $0x3,%rsi
  0x00000001121233bd:   cmpl   $0x5,0xc(%rsi)               ; implicit exception: dispatches to 0x0000000112123fd1
  0x00000001121233c4:   jbe    0x0000000112123fdb
  0x00000001121233ca:   mov    0x24(%rsi),%esi
  0x00000001121233cd:   shl    $0x3,%rsi
  0x00000001121233d1:   cmp    $0x0,%rsi
  0x00000001121233d5:   movabs $0x134f6d968,%rdx            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x00000001121233df:   movabs $0x110,%rcx
  0x00000001121233e9:   jne    0x00000001121233f9
  0x00000001121233ef:   movabs $0x100,%rcx
  0x00000001121233f9:   mov    (%rdx,%rcx,1),%rbx
  0x00000001121233fd:   lea    0x1(%rbx),%rbx
  0x0000000112123401:   mov    %rbx,(%rdx,%rcx,1)
  0x0000000112123405:   jne    0x0000000112123437
  0x000000011212340b:   movabs $0x134f6d968,%rsi            ;   {metadata(method data for {method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123415:   addq   $0x1,0x120(%rsi)
  0x000000011212341d:   movabs $0x600509170,%rcx            ;   {oop(a 'jdk/incubator/vector/LaneType'{0x0000000600509170})}
  0x0000000112123427:   mov    $0x43,%esi
  0x000000011212342c:   mov    %rdi,%rdx
  0x000000011212342f:   callq  0x0000000111a67080           ; ImmutableOopMap {[248]=Oop }
                                                            ;*invokestatic makeConv {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@29 (line 1008)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x0000000112123434:   mov    %rax,%rsi
  0x0000000112123437:   mov    0xf8(%rsp),%rax
  0x000000011212343f:   mov    %rax,%rdx
  0x0000000112123442:   movabs $0x134f6d3d0,%rcx            ;   {metadata(method data for {method} {0x0000000134d46cf0} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x000000011212344c:   mov    0x8(%rdx),%edx
  0x000000011212344f:   movabs $0x800000000,%r10
  0x0000000112123459:   add    %r10,%rdx
  0x000000011212345c:   cmp    0x240(%rcx),%rdx
  0x0000000112123463:   jne    0x0000000112123472
  0x0000000112123465:   addq   $0x1,0x248(%rcx)
  0x000000011212346d:   jmpq   0x0000000112123634
  0x0000000112123472:   cmp    0x250(%rcx),%rdx
  0x0000000112123479:   jne    0x0000000112123488
  0x000000011212347b:   addq   $0x1,0x258(%rcx)
  0x0000000112123483:   jmpq   0x0000000112123634
  0x0000000112123488:   cmp    0x260(%rcx),%rdx
  0x000000011212348f:   jne    0x000000011212349e
  0x0000000112123491:   addq   $0x1,0x268(%rcx)
  0x0000000112123499:   jmpq   0x0000000112123634
  0x000000011212349e:   cmp    0x270(%rcx),%rdx
  0x00000001121234a5:   jne    0x00000001121234b4
  0x00000001121234a7:   addq   $0x1,0x278(%rcx)
  0x00000001121234af:   jmpq   0x0000000112123634
  0x00000001121234b4:   cmp    0x280(%rcx),%rdx
  0x00000001121234bb:   jne    0x00000001121234ca
  0x00000001121234bd:   addq   $0x1,0x288(%rcx)
  0x00000001121234c5:   jmpq   0x0000000112123634
  0x00000001121234ca:   cmp    0x290(%rcx),%rdx
  0x00000001121234d1:   jne    0x00000001121234e0
  0x00000001121234d3:   addq   $0x1,0x298(%rcx)
  0x00000001121234db:   jmpq   0x0000000112123634
  0x00000001121234e0:   cmp    0x2a0(%rcx),%rdx
  0x00000001121234e7:   jne    0x00000001121234f6
  0x00000001121234e9:   addq   $0x1,0x2a8(%rcx)
  0x00000001121234f1:   jmpq   0x0000000112123634
  0x00000001121234f6:   cmp    0x2b0(%rcx),%rdx
  0x00000001121234fd:   jne    0x000000011212350c
  0x00000001121234ff:   addq   $0x1,0x2b8(%rcx)
  0x0000000112123507:   jmpq   0x0000000112123634
  0x000000011212350c:   cmpq   $0x0,0x240(%rcx)
  0x0000000112123517:   jne    0x0000000112123530
  0x0000000112123519:   mov    %rdx,0x240(%rcx)
  0x0000000112123520:   movq   $0x1,0x248(%rcx)
  0x000000011212352b:   jmpq   0x0000000112123634
  0x0000000112123530:   cmpq   $0x0,0x250(%rcx)
  0x000000011212353b:   jne    0x0000000112123554
  0x000000011212353d:   mov    %rdx,0x250(%rcx)
  0x0000000112123544:   movq   $0x1,0x258(%rcx)
  0x000000011212354f:   jmpq   0x0000000112123634
  0x0000000112123554:   cmpq   $0x0,0x260(%rcx)
  0x000000011212355f:   jne    0x0000000112123578
  0x0000000112123561:   mov    %rdx,0x260(%rcx)
  0x0000000112123568:   movq   $0x1,0x268(%rcx)
  0x0000000112123573:   jmpq   0x0000000112123634
  0x0000000112123578:   cmpq   $0x0,0x270(%rcx)
  0x0000000112123583:   jne    0x000000011212359c
  0x0000000112123585:   mov    %rdx,0x270(%rcx)
  0x000000011212358c:   movq   $0x1,0x278(%rcx)
  0x0000000112123597:   jmpq   0x0000000112123634
  0x000000011212359c:   cmpq   $0x0,0x280(%rcx)
  0x00000001121235a7:   jne    0x00000001121235c0
  0x00000001121235a9:   mov    %rdx,0x280(%rcx)
  0x00000001121235b0:   movq   $0x1,0x288(%rcx)
  0x00000001121235bb:   jmpq   0x0000000112123634
  0x00000001121235c0:   cmpq   $0x0,0x290(%rcx)
  0x00000001121235cb:   jne    0x00000001121235e4
  0x00000001121235cd:   mov    %rdx,0x290(%rcx)
  0x00000001121235d4:   movq   $0x1,0x298(%rcx)
  0x00000001121235df:   jmpq   0x0000000112123634
  0x00000001121235e4:   cmpq   $0x0,0x2a0(%rcx)
  0x00000001121235ef:   jne    0x0000000112123608
  0x00000001121235f1:   mov    %rdx,0x2a0(%rcx)
  0x00000001121235f8:   movq   $0x1,0x2a8(%rcx)
  0x0000000112123603:   jmpq   0x0000000112123634
  0x0000000112123608:   cmpq   $0x0,0x2b0(%rcx)
  0x0000000112123613:   jne    0x000000011212362c
  0x0000000112123615:   mov    %rdx,0x2b0(%rcx)
  0x000000011212361c:   movq   $0x1,0x2b8(%rcx)
  0x0000000112123627:   jmpq   0x0000000112123634
  0x000000011212362c:   addq   $0x1,0x230(%rcx)
  0x0000000112123634:   movabs $0x6005090d0,%rcx            ;   {oop(a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000006005090d0})}
  0x000000011212363e:   mov    %rsi,%rdx
  0x0000000112123641:   mov    $0x0,%r8d
  0x0000000112123647:   mov    %rax,%rsi
  0x000000011212364a:   data16 xchg %ax,%ax
  0x000000011212364d:   movabs $0xffffffffffffffff,%rax
  0x0000000112123657:   callq  0x0000000111a63e20           ; ImmutableOopMap {}
                                                            ;*invokevirtual convertShape {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {virtual_call}
  0x000000011212365c:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x0000000112123fed
  0x000000011212365f:   mov    %rax,%rdx
  0x0000000112123662:   movabs $0x1350431b0,%rsi            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x000000011212366c:   mov    0x8(%rdx),%edx
  0x000000011212366f:   movabs $0x800000000,%r10
  0x0000000112123679:   add    %r10,%rdx
  0x000000011212367c:   cmp    0x390(%rsi),%rdx
  0x0000000112123683:   jne    0x0000000112123692
  0x0000000112123685:   addq   $0x1,0x398(%rsi)
  0x000000011212368d:   jmpq   0x0000000112123854
  0x0000000112123692:   cmp    0x3a0(%rsi),%rdx
  0x0000000112123699:   jne    0x00000001121236a8
  0x000000011212369b:   addq   $0x1,0x3a8(%rsi)
  0x00000001121236a3:   jmpq   0x0000000112123854
  0x00000001121236a8:   cmp    0x3b0(%rsi),%rdx
  0x00000001121236af:   jne    0x00000001121236be
  0x00000001121236b1:   addq   $0x1,0x3b8(%rsi)
  0x00000001121236b9:   jmpq   0x0000000112123854
  0x00000001121236be:   cmp    0x3c0(%rsi),%rdx
  0x00000001121236c5:   jne    0x00000001121236d4
  0x00000001121236c7:   addq   $0x1,0x3c8(%rsi)
  0x00000001121236cf:   jmpq   0x0000000112123854
  0x00000001121236d4:   cmp    0x3d0(%rsi),%rdx
  0x00000001121236db:   jne    0x00000001121236ea
  0x00000001121236dd:   addq   $0x1,0x3d8(%rsi)
  0x00000001121236e5:   jmpq   0x0000000112123854
  0x00000001121236ea:   cmp    0x3e0(%rsi),%rdx
  0x00000001121236f1:   jne    0x0000000112123700
  0x00000001121236f3:   addq   $0x1,0x3e8(%rsi)
  0x00000001121236fb:   jmpq   0x0000000112123854
  0x0000000112123700:   cmp    0x3f0(%rsi),%rdx
  0x0000000112123707:   jne    0x0000000112123716
  0x0000000112123709:   addq   $0x1,0x3f8(%rsi)
  0x0000000112123711:   jmpq   0x0000000112123854
  0x0000000112123716:   cmp    0x400(%rsi),%rdx
  0x000000011212371d:   jne    0x000000011212372c
  0x000000011212371f:   addq   $0x1,0x408(%rsi)
  0x0000000112123727:   jmpq   0x0000000112123854
  0x000000011212372c:   cmpq   $0x0,0x390(%rsi)
  0x0000000112123737:   jne    0x0000000112123750
  0x0000000112123739:   mov    %rdx,0x390(%rsi)
  0x0000000112123740:   movq   $0x1,0x398(%rsi)
  0x000000011212374b:   jmpq   0x0000000112123854
  0x0000000112123750:   cmpq   $0x0,0x3a0(%rsi)
  0x000000011212375b:   jne    0x0000000112123774
  0x000000011212375d:   mov    %rdx,0x3a0(%rsi)
  0x0000000112123764:   movq   $0x1,0x3a8(%rsi)
  0x000000011212376f:   jmpq   0x0000000112123854
  0x0000000112123774:   cmpq   $0x0,0x3b0(%rsi)
  0x000000011212377f:   jne    0x0000000112123798
  0x0000000112123781:   mov    %rdx,0x3b0(%rsi)
  0x0000000112123788:   movq   $0x1,0x3b8(%rsi)
  0x0000000112123793:   jmpq   0x0000000112123854
  0x0000000112123798:   cmpq   $0x0,0x3c0(%rsi)
  0x00000001121237a3:   jne    0x00000001121237bc
  0x00000001121237a5:   mov    %rdx,0x3c0(%rsi)
  0x00000001121237ac:   movq   $0x1,0x3c8(%rsi)
  0x00000001121237b7:   jmpq   0x0000000112123854
  0x00000001121237bc:   cmpq   $0x0,0x3d0(%rsi)
  0x00000001121237c7:   jne    0x00000001121237e0
  0x00000001121237c9:   mov    %rdx,0x3d0(%rsi)
  0x00000001121237d0:   movq   $0x1,0x3d8(%rsi)
  0x00000001121237db:   jmpq   0x0000000112123854
  0x00000001121237e0:   cmpq   $0x0,0x3e0(%rsi)
  0x00000001121237eb:   jne    0x0000000112123804
  0x00000001121237ed:   mov    %rdx,0x3e0(%rsi)
  0x00000001121237f4:   movq   $0x1,0x3e8(%rsi)
  0x00000001121237ff:   jmpq   0x0000000112123854
  0x0000000112123804:   cmpq   $0x0,0x3f0(%rsi)
  0x000000011212380f:   jne    0x0000000112123828
  0x0000000112123811:   mov    %rdx,0x3f0(%rsi)
  0x0000000112123818:   movq   $0x1,0x3f8(%rsi)
  0x0000000112123823:   jmpq   0x0000000112123854
  0x0000000112123828:   cmpq   $0x0,0x400(%rsi)
  0x0000000112123833:   jne    0x000000011212384c
  0x0000000112123835:   mov    %rdx,0x400(%rsi)
  0x000000011212383c:   movq   $0x1,0x408(%rsi)
  0x0000000112123847:   jmpq   0x0000000112123854
  0x000000011212384c:   addq   $0x1,0x380(%rsi)
  0x0000000112123854:   movabs $0x61f2b6408,%rdx            ;   {oop(a 'jdk/incubator/vector/Int256Vector'{0x000000061f2b6408})}
  0x000000011212385e:   mov    %rax,%rsi
  0x0000000112123861:   nopl   0x0(%rax)
  0x0000000112123865:   movabs $0xffffffffffffffff,%rax
  0x000000011212386f:   callq  0x0000000111a63e60           ; ImmutableOopMap {}
                                                            ;*invokevirtual mul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {virtual_call}
  0x0000000112123874:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x0000000112123ff2
  0x0000000112123877:   mov    %rax,%rdx
  0x000000011212387a:   movabs $0x1350431b0,%rsi            ;   {metadata(method data for {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000112123884:   mov    0x8(%rdx),%edx
  0x0000000112123887:   movabs $0x800000000,%r10
  0x0000000112123891:   add    %r10,%rdx
  0x0000000112123894:   cmp    0x428(%rsi),%rdx
  0x000000011212389b:   jne    0x00000001121238aa
  0x000000011212389d:   addq   $0x1,0x430(%rsi)
  0x00000001121238a5:   jmpq   0x0000000112123a6c
  0x00000001121238aa:   cmp    0x438(%rsi),%rdx
  0x00000001121238b1:   jne    0x00000001121238c0
  0x00000001121238b3:   addq   $0x1,0x440(%rsi)
  0x00000001121238bb:   jmpq   0x0000000112123a6c
  0x00000001121238c0:   cmp    0x448(%rsi),%rdx
  0x00000001121238c7:   jne    0x00000001121238d6
  0x00000001121238c9:   addq   $0x1,0x450(%rsi)
  0x00000001121238d1:   jmpq   0x0000000112123a6c
  0x00000001121238d6:   cmp    0x458(%rsi),%rdx
  0x00000001121238dd:   jne    0x00000001121238ec
  0x00000001121238df:   addq   $0x1,0x460(%rsi)
  0x00000001121238e7:   jmpq   0x0000000112123a6c
  0x00000001121238ec:   cmp    0x468(%rsi),%rdx
  0x00000001121238f3:   jne    0x0000000112123902
  0x00000001121238f5:   addq   $0x1,0x470(%rsi)
  0x00000001121238fd:   jmpq   0x0000000112123a6c
  0x0000000112123902:   cmp    0x478(%rsi),%rdx
  0x0000000112123909:   jne    0x0000000112123918
  0x000000011212390b:   addq   $0x1,0x480(%rsi)
  0x0000000112123913:   jmpq   0x0000000112123a6c
  0x0000000112123918:   cmp    0x488(%rsi),%rdx
  0x000000011212391f:   jne    0x000000011212392e
  0x0000000112123921:   addq   $0x1,0x490(%rsi)
  0x0000000112123929:   jmpq   0x0000000112123a6c
  0x000000011212392e:   cmp    0x498(%rsi),%rdx
  0x0000000112123935:   jne    0x0000000112123944
  0x0000000112123937:   addq   $0x1,0x4a0(%rsi)
  0x000000011212393f:   jmpq   0x0000000112123a6c
  0x0000000112123944:   cmpq   $0x0,0x428(%rsi)
  0x000000011212394f:   jne    0x0000000112123968
  0x0000000112123951:   mov    %rdx,0x428(%rsi)
  0x0000000112123958:   movq   $0x1,0x430(%rsi)
  0x0000000112123963:   jmpq   0x0000000112123a6c
  0x0000000112123968:   cmpq   $0x0,0x438(%rsi)
  0x0000000112123973:   jne    0x000000011212398c
  0x0000000112123975:   mov    %rdx,0x438(%rsi)
  0x000000011212397c:   movq   $0x1,0x440(%rsi)
  0x0000000112123987:   jmpq   0x0000000112123a6c
  0x000000011212398c:   cmpq   $0x0,0x448(%rsi)
  0x0000000112123997:   jne    0x00000001121239b0
  0x0000000112123999:   mov    %rdx,0x448(%rsi)
  0x00000001121239a0:   movq   $0x1,0x450(%rsi)
  0x00000001121239ab:   jmpq   0x0000000112123a6c
  0x00000001121239b0:   cmpq   $0x0,0x458(%rsi)
  0x00000001121239bb:   jne    0x00000001121239d4
  0x00000001121239bd:   mov    %rdx,0x458(%rsi)
  0x00000001121239c4:   movq   $0x1,0x460(%rsi)
  0x00000001121239cf:   jmpq   0x0000000112123a6c
  0x00000001121239d4:   cmpq   $0x0,0x468(%rsi)
  0x00000001121239df:   jne    0x00000001121239f8
  0x00000001121239e1:   mov    %rdx,0x468(%rsi)
  0x00000001121239e8:   movq   $0x1,0x470(%rsi)
  0x00000001121239f3:   jmpq   0x0000000112123a6c
  0x00000001121239f8:   cmpq   $0x0,0x478(%rsi)
  0x0000000112123a03:   jne    0x0000000112123a1c
  0x0000000112123a05:   mov    %rdx,0x478(%rsi)
  0x0000000112123a0c:   movq   $0x1,0x480(%rsi)
  0x0000000112123a17:   jmpq   0x0000000112123a6c
  0x0000000112123a1c:   cmpq   $0x0,0x488(%rsi)
  0x0000000112123a27:   jne    0x0000000112123a40
  0x0000000112123a29:   mov    %rdx,0x488(%rsi)
  0x0000000112123a30:   movq   $0x1,0x490(%rsi)
  0x0000000112123a3b:   jmpq   0x0000000112123a6c
  0x0000000112123a40:   cmpq   $0x0,0x498(%rsi)
  0x0000000112123a4b:   jne    0x0000000112123a64
  0x0000000112123a4d:   mov    %rdx,0x498(%rsi)
  0x0000000112123a54:   movq   $0x1,0x4a0(%rsi)
  0x0000000112123a5f:   jmpq   0x0000000112123a6c
  0x0000000112123a64:   addq   $0x1,0x418(%rsi)
  0x0000000112123a6c:   movabs $0x61f2d5420,%rdx            ;   {oop(a 'jdk/incubator/vector/VectorOperators$AssociativeImpl'{0x000000061f2d5420})}
  0x0000000112123a76:   mov    %rax,%rsi
  0x0000000112123a79:   nopl   0x0(%rax)
  0x0000000112123a7d:   movabs $0xffffffffffffffff,%rax
  0x0000000112123a87:   callq  0x0000000111a63ea0           ; ImmutableOopMap {}
                                                            ;*invokevirtual reduceLanesToLong {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@51 (line 609)
                                                            ;   {virtual_call}
  0x0000000112123a8c:   add    $0x120,%rsp
  0x0000000112123a93:   pop    %rbp
  0x0000000112123a94:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000112123a9b:   ja     0x0000000112123ff7
  0x0000000112123aa1:   retq
  0x0000000112123aa2:   movabs $0xffffffffffffffff,%rax
  0x0000000112123aac:   add    $0x120,%rsp
  0x0000000112123ab3:   pop    %rbp
  0x0000000112123ab4:   cmp    0x340(%r15),%rsp             ;   {poll_return}
  0x0000000112123abb:   ja     0x000000011212400d
  0x0000000112123ac1:   retq
  0x0000000112123ac2:   mov    %rsi,0x108(%rsp)
  0x0000000112123aca:   movabs $0x134eab718,%rdx            ;   {metadata(method data for {method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x0000000112123ad4:   addq   $0x1,0x130(%rdx)
  0x0000000112123adc:   movabs $0x0,%rsi                    ;   {oop(NULL)}
  0x0000000112123ae6:   mov    %rbx,%rdx
  0x0000000112123ae9:   nopw   0x0(%rax,%rax,1)
  0x0000000112123aef:   callq  0x0000000111a67080           ; ImmutableOopMap {[264]=Oop }
                                                            ;*invokestatic outOfBoundsCheckIndex {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.internal.util.Preconditions::checkIndex@12 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x0000000112123af4:   cmp    (%rax),%rax                  ; implicit exception: dispatches to 0x0000000112124023
  0x0000000112123af7:   jmpq   0x0000000112124047
  0x0000000112123afc:   movabs $0x1350419c8,%r10            ;   {metadata({method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray')}
  0x0000000112123b06:   mov    %r10,0x8(%rsp)
  0x0000000112123b0b:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123b13:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@-1 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123b18:   jmpq   0x00000001121216da
  0x0000000112123b1d:   movabs $0x134eee8d8,%r10            ;   {metadata({method} {0x0000000134eee8d8} 'fromCharArray' '(Ljdk/incubator/vector/VectorSpecies;[CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112123b27:   mov    %r10,0x8(%rsp)
  0x0000000112123b2c:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123b34:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@-1 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123b39:   jmpq   0x0000000112121714
  0x0000000112123b3e:   callq  0x0000000111b0cf20           ; ImmutableOopMap {rsi=Oop }
                                                            ;*arraylength {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@8 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123b43:   movabs $0x134e41e48,%r10            ;   {metadata({method} {0x0000000134e41e48} 'checkFromIndexSize' '(III)I' in 'jdk/incubator/vector/VectorIntrinsics')}
  0x0000000112123b4d:   mov    %r10,0x8(%rsp)
  0x0000000112123b52:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123b5a:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@-1 (line 49)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123b5f:   jmpq   0x0000000112121952
  0x0000000112123b64:   movabs $0x80007a390,%r10            ;   {metadata({method} {0x000000080007a390} 'checkIndex' '(II)I' in 'java/util/Objects')}
  0x0000000112123b6e:   mov    %r10,0x8(%rsp)
  0x0000000112123b73:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123b7b:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.util.Objects::checkIndex@-1 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123b80:   jmpq   0x0000000112121994
  0x0000000112123b85:   movabs $0x8003a44f8,%r10            ;   {metadata({method} {0x00000008003a44f8} 'checkIndex' '(IILjava/util/function/BiFunction;)I' in 'jdk/internal/util/Preconditions')}
  0x0000000112123b8f:   mov    %r10,0x8(%rsp)
  0x0000000112123b94:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123b9c:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.internal.util.Preconditions::checkIndex@-1 (line 265)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123ba1:   jmpq   0x00000001121219d3
  0x0000000112123ba6:   movabs $0x134efe920,%r10            ;   {metadata({method} {0x0000000134efe920} 'dummyVector' '()Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112123bb0:   mov    %r10,0x8(%rsp)
  0x0000000112123bb5:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123bbd:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::dummyVector@-1 (line 3903)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@19 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123bc2:   jmpq   0x0000000112121a90
  0x0000000112123bc7:   movabs $0x134d5dd40,%r10            ;   {metadata({method} {0x0000000134d5dd40} 'dummyVector' '()Ljdk/incubator/vector/AbstractVector;' in 'jdk/incubator/vector/AbstractSpecies')}
  0x0000000112123bd1:   mov    %r10,0x8(%rsp)
  0x0000000112123bd6:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123bde:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractSpecies::dummyVector@-1 (line 295)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::dummyVector@1 (line 3903)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@19 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123be3:   jmpq   0x0000000112121aca
  0x0000000112123be8:   movabs $0x134f12bd8,%r10            ;   {metadata({method} {0x0000000134f12bd8} 'fromCharArray0' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000112123bf2:   mov    %r10,0x8(%rsp)
  0x0000000112123bf7:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123bff:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@-1 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123c04:   jmpq   0x0000000112121b26
  0x0000000112123c09:   movabs $0x134eefec0,%r10            ;   {metadata({method} {0x0000000134eefec0} 'fromCharArray0Template' '([CI)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112123c13:   mov    %r10,0x8(%rsp)
  0x0000000112123c18:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123c20:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@-1 (line 3519)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123c25:   jmpq   0x0000000112121b68
  0x0000000112123c2a:   movabs $0x134f0fae0,%r10            ;   {metadata({method} {0x0000000134f0fae0} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector')}
  0x0000000112123c34:   mov    %r10,0x8(%rsp)
  0x0000000112123c39:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123c41:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector::vspecies@-1 (line 86)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@1 (line 3519)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123c46:   jmpq   0x0000000112121ba2
  0x0000000112123c4b:   movabs $0x134efdfa8,%r10            ;   {metadata({method} {0x0000000134efdfa8} 'elementType' '()Ljava/lang/Class;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112123c55:   mov    %r10,0x8(%rsp)
  0x0000000112123c5a:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123c62:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop rcx=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::elementType@-1 (line 3805)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@10 (line 3521)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123c67:   jmpq   0x0000000112121c03
  0x0000000112123c6c:   movabs $0x134ef0aa0,%r10            ;   {metadata({method} {0x0000000134ef0aa0} 'charArrayAddress' '([CI)J' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112123c76:   mov    %r10,0x8(%rsp)
  0x0000000112123c7b:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123c83:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::charArrayAddress@-1 (line 3669)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@20 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123c88:   jmpq   0x0000000112121c4f
  0x0000000112123c8d:   movabs $0x8000e5db8,%r10            ;   {metadata({method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112123c97:   mov    %r10,0x8(%rsp)
  0x0000000112123c9c:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123ca4:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@26 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123ca9:   jmpq   0x0000000112121ca4
  0x0000000112123cae:   movabs $0x135000268,%r10            ;   {metadata({method} {0x0000000135000268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000112123cb8:   mov    %r10,0x8(%rsp)
  0x0000000112123cbd:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123cc5:   callq  0x0000000111b12c00           ; ImmutableOopMap {rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@26 (line 3522)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123cca:   jmpq   0x0000000112121cde
  0x0000000112123ccf:   mov    %rax,(%rsp)
  0x0000000112123cd3:   callq  0x0000000111b0ff20           ; ImmutableOopMap {}
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x0000000112123cd8:   callq  0x0000000111b0cf20           ; ImmutableOopMap {rdi=Oop }
                                                            ;*invokevirtual sub {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123cdd:   movabs $0x134ee9938,%r10            ;   {metadata({method} {0x0000000134ee9938} 'sub' '(S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112123ce7:   mov    %r10,0x8(%rsp)
  0x0000000112123cec:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123cf4:   callq  0x0000000111b12c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::sub@-1 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123cf9:   jmpq   0x0000000112121fca
  0x0000000112123cfe:   movabs $0x134ee86c8,%r10            ;   {metadata({method} {0x0000000134ee86c8} 'lanewise' '(Ljdk/incubator/vector/VectorOperators$Binary;S)Ljdk/incubator/vector/ShortVector;' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112123d08:   mov    %r10,0x8(%rsp)
  0x0000000112123d0d:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123d15:   callq  0x0000000111b12c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@-1 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123d1a:   jmpq   0x0000000112122007
  0x0000000112123d1f:   movabs $0x134ee5ff0,%r10            ;   {metadata({method} {0x0000000134ee5ff0} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/ShortVector')}
  0x0000000112123d29:   mov    %r10,0x8(%rsp)
  0x0000000112123d2e:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123d36:   callq  0x0000000111b12c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector::opKind@-1 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123d3b:   jmpq   0x0000000112122041
  0x0000000112123d40:   movabs $0x134d54458,%r10            ;   {metadata({method} {0x0000000134d54458} 'opKind' '(Ljdk/incubator/vector/VectorOperators$Operator;I)Z' in 'jdk/incubator/vector/VectorOperators')}
  0x0000000112123d4a:   mov    %r10,0x8(%rsp)
  0x0000000112123d4f:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123d57:   callq  0x0000000111b12c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators::opKind@-1 (line 409)
                                                            ; - jdk.incubator.vector.ShortVector::opKind@2 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123d5c:   jmpq   0x000000011212207b
  0x0000000112123d61:   movabs $0x134f47958,%r10            ;   {metadata({method} {0x0000000134f47958} 'opKind' '(I)Z' in 'jdk/incubator/vector/VectorOperators$OperatorImpl')}
  0x0000000112123d6b:   mov    %r10,0x8(%rsp)
  0x0000000112123d70:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123d78:   callq  0x0000000111b12c00           ; ImmutableOopMap {rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$OperatorImpl::opKind@-1 (line 883)
                                                            ; - jdk.incubator.vector.VectorOperators::opKind@5 (line 409)
                                                            ; - jdk.incubator.vector.ShortVector::opKind@2 (line 72)
                                                            ; - jdk.incubator.vector.ShortVector::lanewise@3 (line 705)
                                                            ; - jdk.incubator.vector.ShortVector::sub@5 (line 1184)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@10 (line 601)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123d7d:   jmpq   0x000000011212229f
  0x0000000112123d82:   callq  0x0000000111b0cf20           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual compare {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@21 (line 603)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123d87:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*invokevirtual anyTrue {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123d8c:   movabs $0x134f18400,%r10            ;   {metadata({method} {0x0000000134f18400} 'anyTrue' '()Z' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112123d96:   mov    %r10,0x8(%rsp)
  0x0000000112123d9b:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123da3:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@-1 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123da8:   jmpq   0x000000011212296c
  0x0000000112123dad:   movabs $0x134f17638,%r10            ;   {metadata({method} {0x0000000134f17638} 'vspecies' '()Ljdk/incubator/vector/ShortVector$ShortSpecies;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112123db7:   mov    %r10,0x8(%rsp)
  0x0000000112123dbc:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123dc4:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::vspecies@-1 (line 544)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@11 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123dc9:   jmpq   0x00000001121229a9
  0x0000000112123dce:   movabs $0x134eff358,%r10            ;   {metadata({method} {0x0000000134eff358} 'maskAll' '(Z)Ljdk/incubator/vector/VectorMask;' in 'jdk/incubator/vector/ShortVector$ShortSpecies')}
  0x0000000112123dd8:   mov    %r10,0x8(%rsp)
  0x0000000112123ddd:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123de5:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rax=Oop rsi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@-1 (line 4006)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123dea:   jmpq   0x00000001121229f0
  0x0000000112123def:   movabs $0x134f185b0,%r10            ;   {metadata({method} {0x0000000134f185b0} 'maskAll' '(Z)Ljdk/incubator/vector/Short128Vector$Short128Mask;' in 'jdk/incubator/vector/Short128Vector$Short128Mask')}
  0x0000000112123df9:   mov    %r10,0x8(%rsp)
  0x0000000112123dfe:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123e06:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@-1 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123e0b:   jmpq   0x0000000112122a68
  0x0000000112123e10:   movabs $0x8000e5db8,%r10            ;   {metadata({method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112123e1a:   mov    %r10,0x8(%rsp)
  0x0000000112123e1f:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123e27:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@19 (line 704)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123e2c:   jmpq   0x0000000112122aca
  0x0000000112123e31:   movabs $0x135000268,%r10            ;   {metadata({method} {0x0000000135000268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000112123e3b:   mov    %r10,0x8(%rsp)
  0x0000000112123e40:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123e48:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@19 (line 704)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123e4d:   jmpq   0x0000000112122b04
  0x0000000112123e52:   mov    %rax,(%rsp)
  0x0000000112123e56:   callq  0x0000000111b0ff20           ; ImmutableOopMap {[248]=Oop [256]=Oop }
                                                            ;*checkcast {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::maskAll@27 (line 703)
                                                            ; - jdk.incubator.vector.ShortVector$ShortSpecies::maskAll@66 (line 4010)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@15 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call throw_class_cast_exception Runtime1 stub}
  0x0000000112123e5b:   movabs $0x8000e5db8,%r10            ;   {metadata({method} {0x00000008000e5db8} 'linkToTargetMethod' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/Invokers$Holder')}
  0x0000000112123e65:   mov    %r10,0x8(%rsp)
  0x0000000112123e6a:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123e72:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@-1
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@18 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123e77:   jmpq   0x0000000112122de3
  0x0000000112123e7c:   movabs $0x135000268,%r10            ;   {metadata({method} {0x0000000135000268} 'invoke' '(Ljava/lang/Object;)Ljava/lang/Object;' in 'java/lang/invoke/LambdaForm$MH+0x0000000800c00400')}
  0x0000000112123e86:   mov    %r10,0x8(%rsp)
  0x0000000112123e8b:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123e93:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop rax=Oop }
                                                            ;*synchronization entry
                                                            ; - java.lang.invoke.LambdaForm$MH/0x0000000800c00400::invoke@-1
                                                            ; - java.lang.invoke.Invokers$Holder::linkToTargetMethod@4
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@18 (line 688)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123e98:   jmpq   0x0000000112122e1d
  0x0000000112123e9d:   movabs $0x134d46cf0,%r10            ;   {metadata({method} {0x0000000134d46cf0} 'castShape' '(Ljdk/incubator/vector/VectorSpecies;I)Ljdk/incubator/vector/Vector;' in 'jdk/incubator/vector/AbstractVector')}
  0x0000000112123ea7:   mov    %r10,0x8(%rsp)
  0x0000000112123eac:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123eb4:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@-1 (line 282)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123eb9:   jmpq   0x0000000112122ee2
  0x0000000112123ebe:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop }
                                                            ;*getfield laneType {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractVector::castShape@12 (line 285)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123ec3:   movabs $0x134f4d2e8,%r10            ;   {metadata({method} {0x0000000134f4d2e8} 'ofCast' '(Ljdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123ecd:   mov    %r10,0x8(%rsp)
  0x0000000112123ed2:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123eda:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@-1 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123edf:   jmpq   0x0000000112123135
  0x0000000112123ee4:   movabs $0x134f4d228,%r10            ;   {metadata({method} {0x0000000134f4d228} 'ofCopy' '(Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123eee:   mov    %r10,0x8(%rsp)
  0x0000000112123ef3:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123efb:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@-1 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123f00:   jmpq   0x00000001121231b2
  0x0000000112123f05:   movabs $0x134f4d4d8,%r10            ;   {metadata({method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123f0f:   mov    %r10,0x8(%rsp)
  0x0000000112123f14:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123f1c:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@-1 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123f21:   jmpq   0x00000001121231ec
  0x0000000112123f26:   movabs $0x134f4da28,%r10            ;   {metadata({method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123f30:   mov    %r10,0x8(%rsp)
  0x0000000112123f35:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123f3d:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@-1 (line 1072)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123f42:   jmpq   0x0000000112123226
  0x0000000112123f47:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123f4c:   mov    %rsi,(%rsp)
  0x0000000112123f50:   mov    %rcx,0x8(%rsp)
  0x0000000112123f55:   callq  0x0000000111b0c620           ; ImmutableOopMap {[248]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112123f5a:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123f5f:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123f64:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123f69:   mov    %rsi,(%rsp)
  0x0000000112123f6d:   mov    %rdx,0x8(%rsp)
  0x0000000112123f72:   callq  0x0000000111b0c620           ; ImmutableOopMap {[248]=Oop rdi=Oop rdx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCopy@4 (line 979)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@6 (line 982)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112123f77:   movabs $0x134f4d4d8,%r10            ;   {metadata({method} {0x0000000134f4d4d8} 'findConv' '(CLjdk/incubator/vector/LaneType;Ljdk/incubator/vector/LaneType;)Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123f81:   mov    %r10,0x8(%rsp)
  0x0000000112123f86:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123f8e:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@-1 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123f93:   jmpq   0x000000011212332e
  0x0000000112123f98:   movabs $0x134f4da28,%r10            ;   {metadata({method} {0x0000000134f4da28} 'cacheOf' '(CLjdk/incubator/vector/LaneType;)[Ljdk/incubator/vector/VectorOperators$ConversionImpl;' in 'jdk/incubator/vector/VectorOperators$ConversionImpl')}
  0x0000000112123fa2:   mov    %r10,0x8(%rsp)
  0x0000000112123fa7:   movq   $0xffffffffffffffff,(%rsp)
  0x0000000112123faf:   callq  0x0000000111b12c00           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*synchronization entry
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@-1 (line 1072)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call counter_overflow Runtime1 stub}
  0x0000000112123fb4:   jmpq   0x0000000112123368
  0x0000000112123fb9:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*getfield switchKey {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@57 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123fbe:   mov    %rsi,(%rsp)
  0x0000000112123fc2:   mov    %rcx,0x8(%rsp)
  0x0000000112123fc7:   callq  0x0000000111b0c620           ; ImmutableOopMap {[248]=Oop rdi=Oop rcx=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112123fcc:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::cacheOf@60 (line 1076)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@2 (line 1002)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123fd1:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123fd6:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123fdb:   movq   $0x5,(%rsp)
  0x0000000112123fe3:   mov    %rsi,0x8(%rsp)
  0x0000000112123fe8:   callq  0x0000000111b0c620           ; ImmutableOopMap {[248]=Oop rdi=Oop rsi=Oop }
                                                            ;*aaload {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::findConv@15 (line 1004)
                                                            ; - jdk.incubator.vector.VectorOperators$ConversionImpl::ofCast@14 (line 983)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@20 (line 286)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call throw_range_check_failed Runtime1 stub}
  0x0000000112123fed:   callq  0x0000000111b0cf20           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual mul {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@45 (line 608)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123ff2:   callq  0x0000000111b0cf20           ; ImmutableOopMap {rax=Oop }
                                                            ;*invokevirtual reduceLanesToLong {reexecute=0 rethrow=0 return_oop=0}
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@51 (line 609)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112123ff7:   movabs $0x112123a94,%r10            ;   {internal_word}
  0x0000000112124001:   mov    %r10,0x358(%r15)
  0x0000000112124008:   jmpq   0x0000000111a6d100           ;   {runtime_call SafepointBlob}
  0x000000011212400d:   movabs $0x112123ab4,%r10            ;   {internal_word}
  0x0000000112124017:   mov    %r10,0x358(%r15)
  0x000000011212401e:   jmpq   0x0000000111a6d100           ;   {runtime_call SafepointBlob}
  0x0000000112124023:   callq  0x0000000111b0cf20           ; ImmutableOopMap {[264]=Oop rax=Oop }
                                                            ;*athrow {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.internal.util.Preconditions::checkIndex@15 (line 266)
                                                            ; - java.util.Objects::checkIndex@3 (line 359)
                                                            ; - jdk.incubator.vector.VectorIntrinsics::checkFromIndexSize@43 (line 52)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@9 (line 2871)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call throw_null_pointer_exception Runtime1 stub}
  0x0000000112124028:   nop
  0x0000000112124029:   nop
  0x000000011212402a:   mov    0x3d0(%r15),%rax
  0x0000000112124031:   movq   $0x0,0x3d0(%r15)
  0x000000011212403c:   movq   $0x0,0x3d8(%r15)
  0x0000000112124047:   add    $0x120,%rsp
  0x000000011212404e:   pop    %rbp
  0x000000011212404f:   jmpq   0x0000000111b0c000           ;   {runtime_call unwind_exception Runtime1 stub}
  0x0000000112124054:   hlt
  0x0000000112124055:   hlt
  0x0000000112124056:   hlt
  0x0000000112124057:   hlt
  0x0000000112124058:   hlt
  0x0000000112124059:   hlt
  0x000000011212405a:   hlt
  0x000000011212405b:   hlt
  0x000000011212405c:   hlt
  0x000000011212405d:   hlt
  0x000000011212405e:   hlt
  0x000000011212405f:   hlt
[Stub Code]
  0x0000000112124060:   nopl   0x0(%rax,%rax,1)             ;   {no_reloc}
  0x0000000112124065:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011212406f:   jmpq   0x000000011212406f           ;   {runtime_call const_jargs+-96006241}
  0x0000000112124074:   nop
  0x0000000112124075:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011212407f:   jmpq   0x000000011212407f           ;   {runtime_call const_jargs+-96006241}
  0x0000000112124084:   nop
  0x0000000112124085:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011212408f:   jmpq   0x000000011212408f           ;   {runtime_call const_jargs+-96006241}
  0x0000000112124094:   nop
  0x0000000112124095:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011212409f:   jmpq   0x000000011212409f           ;   {runtime_call const_jargs+-96006241}
  0x00000001121240a4:   nop
  0x00000001121240a5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001121240af:   jmpq   0x00000001121240af           ;   {runtime_call const_jargs+-96006241}
  0x00000001121240b4:   nop
  0x00000001121240b5:   movabs $0x800005620,%rbx            ;   {static_stub}
  0x00000001121240bf:   jmpq   0x0000000111b3331c           ;   {runtime_call I2C/C2I adapters}
  0x00000001121240c4:   nop
  0x00000001121240c5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001121240cf:   jmpq   0x00000001121240cf           ;   {runtime_call const_jargs+-96006241}
  0x00000001121240d4:   nop
  0x00000001121240d5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001121240df:   jmpq   0x00000001121240df           ;   {runtime_call const_jargs+-96006241}
  0x00000001121240e4:   nop
  0x00000001121240e5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001121240ef:   jmpq   0x00000001121240ef           ;   {runtime_call const_jargs+-96006241}
  0x00000001121240f4:   nop
  0x00000001121240f5:   movabs $0x0,%rbx                    ;   {static_stub}
  0x00000001121240ff:   jmpq   0x00000001121240ff           ;   {runtime_call const_jargs+-96006241}
  0x0000000112124104:   nop
  0x0000000112124105:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011212410f:   jmpq   0x000000011212410f           ;   {runtime_call const_jargs+-96006241}
  0x0000000112124114:   nop
  0x0000000112124115:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011212411f:   jmpq   0x000000011212411f           ;   {runtime_call const_jargs+-96006241}
  0x0000000112124124:   nop
  0x0000000112124125:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011212412f:   jmpq   0x000000011212412f           ;   {runtime_call const_jargs+-96006241}
[Exception Handler]
  0x0000000112124134:   callq  0x0000000111b0f600           ;   {runtime_call handle_exception_from_callee Runtime1 stub}
  0x0000000112124139:   movabs $0x10827e512,%rdi            ;   {external_word}
  0x0000000112124143:   and    $0xfffffffffffffff0,%rsp
  0x0000000112124147:   callq  0x0000000107f20790           ;   {runtime_call _ZN14MacroAssembler7debug64EPcxPx}
  0x000000011212414c:   hlt
[Deopt Handler Code]
  0x000000011212414d:   movabs $0x11212414d,%r10            ;   {section_word}
  0x0000000112124157:   push   %r10
  0x0000000112124159:   jmpq   0x0000000111a6c020           ;   {runtime_call DeoptimizationBlob}
  0x000000011212415e:   hlt
  0x000000011212415f:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

=========================== JVMCI-compiled nmethod =============================
----------------------------------- Assembly -----------------------------------

Compiled method (JVMCI) 1028       4       ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd (55 bytes)
 total in heap  [0x000000011955a390,0x000000011955b8d0] = 5440
 relocation     [0x000000011955a4f0,0x000000011955a580] = 144
 main code      [0x000000011955a580,0x000000011955afe0] = 2656
 stub code      [0x000000011955afe0,0x000000011955b000] = 32
 oops           [0x000000011955b000,0x000000011955b038] = 56
 metadata       [0x000000011955b038,0x000000011955b180] = 328
 scopes data    [0x000000011955b180,0x000000011955b430] = 688
 scopes pcs     [0x000000011955b430,0x000000011955b630] = 512
 dependencies   [0x000000011955b630,0x000000011955b648] = 24
 nul chk table  [0x000000011955b648,0x000000011955b6a0] = 88
 speculations   [0x000000011955b6a0,0x000000011955b8c0] = 544
 JVMCI data     [0x000000011955b8c0,0x000000011955b8d0] = 16

[Disassembly]
--------------------------------------------------------------------------------
[Constant Pool (empty)]

--------------------------------------------------------------------------------

[Verified Entry Point]
  # {method} {0x00000001350419c8} 'tryToParseEightDigitsSimd' '([CI)J' in 'ch/randelshofer/fastdoubleparser/FastDoubleParserFromCharArray'
  # parm0:    rsi:rsi   = '[C'
  # parm1:    rdx       = int
  #           [sp+0x70]  (sp of caller)
  0x000000011955a580:   mov    %eax,-0x14000(%rsp)
  0x000000011955a587:   sub    $0x68,%rsp
  0x000000011955a58b:   mov    %rbp,0x60(%rsp)              ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
  0x000000011955a590:   mov    0xc(%rsi),%ecx               ; implicit exception: dispatches to 0x000000011955ae8a
  0x000000011955a593:   cmp    $0x7,%ecx
  0x000000011955a596:   jb     0x000000011955ae3c
  0x000000011955a59c:   lea    -0x7(%rcx),%ecx
  0x000000011955a59f:   nop
  0x000000011955a5a0:   cmp    %edx,%ecx
  0x000000011955a5a2:   jbe    0x000000011955ae3c
  0x000000011955a5a8:   movabs $0x61f2c5308,%rcx            ;   {oop(a 'java/lang/Class'{0x000000061f2c5308} = 'jdk/incubator/vector/Short128Vector')}
  0x000000011955a5b2:   movabs $0x7ffb00230,%r8             ;   {oop(a 'java/lang/Class'{0x00000007ffb00230} = short)}
  0x000000011955a5bc:   mov    %edx,%r9d
  0x000000011955a5bf:   shl    %r9
  0x000000011955a5c2:   lea    0x10(%r9),%r9
  0x000000011955a5c6:   movabs $0x61f2c52c0,%r10            ;   {oop(a 'jdk/incubator/vector/ShortVector$ShortSpecies'{0x000000061f2c52c0})}
  0x000000011955a5d0:   movabs $0x61f2d1978,%r11            ;   {oop(a 'jdk/incubator/vector/ShortVector$$Lambda$82+0x0000000800c23ae8'{0x000000061f2d1978})}
  0x000000011955a5da:   mov    %rsi,%rbx
  0x000000011955a5dd:   mov    %rcx,%rsi
  0x000000011955a5e0:   mov    %edx,%eax
  0x000000011955a5e2:   mov    %r8,%rdx
  0x000000011955a5e5:   mov    $0x8,%ecx
  0x000000011955a5ea:   mov    %rbx,%r8
  0x000000011955a5ed:   mov    %rbx,%rdi
  0x000000011955a5f0:   mov    %eax,(%rsp)
  0x000000011955a5f3:   mov    %r10,0x8(%rsp)
  0x000000011955a5f8:   mov    %r11,0x10(%rsp)
  0x000000011955a5fd:   mov    %rbx,0x30(%rsp)
  0x000000011955a602:   mov    %eax,0x54(%rsp)
  0x000000011955a606:   nop
  0x000000011955a607:   callq  0x000000011954a2a0           ; ImmutableOopMap {[48]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray0Template@31 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {static_call}
  0x000000011955a60c:   nop
  0x000000011955a60d:   mov    %rax,%r10                    ; ImmutableOopMap {r10=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
  0x000000011955a610:   cmpl   $0xc20b60,0x8(%r10)          ; implicit exception: dispatches to 0x000000011955aea6
                                                            ;   {metadata('jdk/incubator/vector/Short128Vector')}
  0x000000011955a618:   jne    0x000000011955ae2d
  0x000000011955a61e:   mov    0xc(%r10),%esi
  0x000000011955a622:   test   %esi,%esi
  0x000000011955a624:   je     0x000000011955a92a
  0x000000011955a62a:   mov    0x8(,%rsi,8),%edx
  0x000000011955a631:   movabs $0x800000000,%rax
  0x000000011955a63b:   lea    (%rax,%rdx,1),%rdx
  0x000000011955a63f:   nop
  0x000000011955a640:   test   %esi,%esi
  0x000000011955a642:   je     0x000000011955a65b
  0x000000011955a648:   movabs $0x800006520,%rax            ;   {metadata({type array short})}
  0x000000011955a652:   cmp    %rdx,%rax
  0x000000011955a655:   jne    0x000000011955adc9
  0x000000011955a65b:   nopl   0x0(%rax,%rax,1)             ; ImmutableOopMap {rsi=NarrowOop r10=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
  0x000000011955a660:   cmpl   $0x8,0xc(,%rsi,8)            ; implicit exception: dispatches to 0x000000011955aec6
  0x000000011955a668:   jb     0x000000011955ae66
  0x000000011955a66e:   movswl 0x1e(,%rsi,8),%ecx
  0x000000011955a676:   movswl 0x1c(,%rsi,8),%r8d
  0x000000011955a67f:   movswl 0x1a(,%rsi,8),%r9d
  0x000000011955a688:   movswl 0x18(,%rsi,8),%edi
  0x000000011955a690:   movswl 0x16(,%rsi,8),%r11d
  0x000000011955a699:   movswl 0x14(,%rsi,8),%ebx
  0x000000011955a6a1:   movswl 0x12(,%rsi,8),%ebp
  0x000000011955a6a9:   movswl 0x10(,%rsi,8),%r13d
  0x000000011955a6b2:   mov    0x108(%r15),%rsi
  0x000000011955a6b9:   lea    0x18(%rsi),%rdx
  0x000000011955a6bd:   data16 xchg %ax,%ax
  0x000000011955a6c0:   cmp    0x118(%r15),%rdx
  0x000000011955a6c7:   ja     0x000000011955a997
  0x000000011955a6cd:   mov    %rdx,0x108(%r15)
  0x000000011955a6d4:   prefetchw 0xd8(%rsi)
  0x000000011955a6db:   prefetchw 0x118(%rsi)
  0x000000011955a6e2:   prefetchw 0x158(%rsi)
  0x000000011955a6e9:   prefetchw 0x198(%rsi)
  0x000000011955a6f0:   movl   $0x8,0xc(%rsi)
  0x000000011955a6f7:   movq   $0x1,(%rsi)
  0x000000011955a6fe:   movl   $0x960,0x8(%rsi)             ;   {metadata({type array bool})}
  0x000000011955a705:   movq   $0x0,0x10(%rsi)
  0x000000011955a70d:   lea    -0x30(%rcx),%ecx
  0x000000011955a710:   cmp    $0xa,%cx
  0x000000011955a714:   setae  %dl
  0x000000011955a717:   movzbl %dl,%edx
  0x000000011955a71a:   mov    %dl,0x17(%rsi)
  0x000000011955a71d:   lea    -0x30(%r8),%r8d
  0x000000011955a721:   cmp    $0xa,%r8w
  0x000000011955a726:   setae  %dl
  0x000000011955a729:   movzbl %dl,%edx
  0x000000011955a72c:   mov    %dl,0x16(%rsi)
  0x000000011955a72f:   lea    -0x30(%r9),%r9d
  0x000000011955a733:   cmp    $0xa,%r9w
  0x000000011955a738:   setae  %dl
  0x000000011955a73b:   movzbl %dl,%edx
  0x000000011955a73e:   mov    %dl,0x15(%rsi)
  0x000000011955a741:   lea    -0x30(%rdi),%edi
  0x000000011955a744:   cmp    $0xa,%di
  0x000000011955a748:   setae  %dl
  0x000000011955a74b:   movzbl %dl,%edx
  0x000000011955a74e:   mov    %dl,0x14(%rsi)
  0x000000011955a751:   lea    -0x30(%r11),%r10d
  0x000000011955a755:   cmp    $0xa,%r10w
  0x000000011955a75a:   setae  %dl
  0x000000011955a75d:   movzbl %dl,%edx
  0x000000011955a760:   mov    %dl,0x13(%rsi)
  0x000000011955a763:   lea    -0x30(%rbx),%r11d
  0x000000011955a767:   cmp    $0xa,%r11w
  0x000000011955a76c:   setae  %dl
  0x000000011955a76f:   movzbl %dl,%edx
  0x000000011955a772:   mov    %dl,0x12(%rsi)
  0x000000011955a775:   lea    -0x30(%rbp),%ebx
  0x000000011955a778:   cmp    $0xa,%bx
  0x000000011955a77c:   setae  %dl
  0x000000011955a77f:   movzbl %dl,%edx
  0x000000011955a782:   mov    %dl,0x11(%rsi)
  0x000000011955a785:   lea    -0x30(%r13),%ebp
  0x000000011955a789:   cmp    $0xa,%bp
  0x000000011955a78d:   setae  %dl
  0x000000011955a790:   movzbl %dl,%edx
  0x000000011955a793:   mov    %dl,0x10(%rsi)
  0x000000011955a796:   data16 nopw 0x0(%rax,%rax,1)
  0x000000011955a7a0:   cmp    $0xa,%bp
  0x000000011955a7a4:   jae    0x000000011955ad2a
  0x000000011955a7aa:   mov    $0x1,%edx
  0x000000011955a7af:   jmpq   0x000000011955a7cd
  0x000000011955a7b4:   nopl   0x0(%rax,%rax,1)
  0x000000011955a7bc:   data16 data16 xchg %ax,%ax
  0x000000011955a7c0:   cmpb   $0x0,0x10(%rsi,%rdx,1)
  0x000000011955a7c5:   jne    0x000000011955ad2a
  0x000000011955a7cb:   inc    %edx
  0x000000011955a7cd:   cmp    $0x8,%edx
  0x000000011955a7d0:   jl     0x000000011955a7c0
  0x000000011955a7d2:   mov    0x108(%r15),%rsi
  0x000000011955a7d9:   lea    0x20(%rsi),%rdx
  0x000000011955a7dd:   movzwl %bp,%r13d
  0x000000011955a7e1:   movswl %bx,%r14d
  0x000000011955a7e5:   movswl %r11w,%eax
  0x000000011955a7e9:   mov    %r13d,0x50(%rsp)
  0x000000011955a7ee:   movswl %r10w,%r13d
  0x000000011955a7f2:   mov    %r13d,0x4c(%rsp)
  0x000000011955a7f7:   movswl %di,%r13d
  0x000000011955a7fb:   mov    %r13d,0x48(%rsp)
  0x000000011955a800:   movswl %r9w,%r13d
  0x000000011955a804:   mov    %r13d,0x44(%rsp)
  0x000000011955a809:   movswl %r8w,%r13d
  0x000000011955a80d:   mov    %r13d,0x40(%rsp)
  0x000000011955a812:   movswl %cx,%r13d
  0x000000011955a816:   data16 nopw 0x0(%rax,%rax,1)
  0x000000011955a820:   cmp    0x118(%r15),%rdx
  0x000000011955a827:   ja     0x000000011955aa05
  0x000000011955a82d:   mov    %rdx,0x108(%r15)
  0x000000011955a834:   prefetchw 0xe0(%rsi)
  0x000000011955a83b:   prefetchw 0x120(%rsi)
  0x000000011955a842:   prefetchw 0x160(%rsi)
  0x000000011955a849:   prefetchw 0x1a0(%rsi)
  0x000000011955a850:   movl   $0x8,0xc(%rsi)
  0x000000011955a857:   movq   $0x1,(%rsi)
  0x000000011955a85e:   movl   $0x6520,0x8(%rsi)            ;   {metadata({type array short})}
  0x000000011955a865:   movq   $0x0,0x10(%rsi)
  0x000000011955a86d:   movq   $0x0,0x18(%rsi)
  0x000000011955a875:   mov    %cx,0x1e(%rsi)
  0x000000011955a879:   mov    %r8w,0x1c(%rsi)
  0x000000011955a87e:   mov    %r9w,0x1a(%rsi)
  0x000000011955a883:   mov    %di,0x18(%rsi)
  0x000000011955a887:   mov    %r10w,0x16(%rsi)
  0x000000011955a88c:   mov    %r11w,0x14(%rsi)
  0x000000011955a891:   mov    %bx,0x12(%rsi)
  0x000000011955a895:   mov    %bp,0x10(%rsi)
  0x000000011955a899:   mov    0x108(%r15),%rdx
  0x000000011955a8a0:   lea    0x20(%rdx),%rcx
  0x000000011955a8a4:   cmp    0x118(%r15),%rcx
  0x000000011955a8ab:   ja     0x000000011955a9b6
  0x000000011955a8b1:   mov    %rcx,0x108(%r15)
  0x000000011955a8b8:   prefetchw 0xe0(%rdx)
  0x000000011955a8bf:   prefetchw 0x120(%rdx)
  0x000000011955a8c6:   prefetchw 0x160(%rdx)
  0x000000011955a8cd:   prefetchw 0x1a0(%rdx)
  0x000000011955a8d4:   movl   $0x8,0xc(%rdx)
  0x000000011955a8db:   movq   $0x1,(%rdx)
  0x000000011955a8e2:   movl   $0x6520,0x8(%rdx)            ;   {metadata({type array short})}
  0x000000011955a8e9:   movq   $0x0,0x10(%rdx)
  0x000000011955a8f1:   movq   $0x0,0x18(%rdx)
  0x000000011955a8f9:   mov    %rdx,%r10
  0x000000011955a8fc:   mov    %bp,0x10(%r10)
  0x000000011955a901:   mov    $0x1,%edx
  0x000000011955a906:   jmpq   0x000000011955a91d
  0x000000011955a90b:   nopl   0x0(%rax,%rax,1)
  0x000000011955a910:   movswl 0x10(%rsi,%rdx,2),%eax
  0x000000011955a915:   mov    %ax,0x10(%r10,%rdx,2)
  0x000000011955a91b:   inc    %edx
  0x000000011955a91d:   data16 xchg %ax,%ax
  0x000000011955a920:   cmp    $0x2,%edx
  0x000000011955a923:   jl     0x000000011955a910
  0x000000011955a925:   jmpq   0x000000011955a972
  0x000000011955a92a:   mov    $0x0,%rdx
  0x000000011955a931:   jmpq   0x000000011955a63f
  0x000000011955a936:   data16 nopw 0x0(%rax,%rax,1)
  0x000000011955a940:   movswl 0x10(%rsi,%rdx,2),%eax
  0x000000011955a945:   mov    %ax,0x10(%r10,%rdx,2)
  0x000000011955a94b:   movslq %edx,%rax
  0x000000011955a94e:   movswl 0x12(%rsi,%rax,2),%ecx
  0x000000011955a953:   mov    %cx,0x12(%r10,%rax,2)
  0x000000011955a959:   movswl 0x14(%rsi,%rax,2),%ecx
  0x000000011955a95e:   mov    %cx,0x14(%r10,%rax,2)
  0x000000011955a964:   movswl 0x16(%rsi,%rax,2),%ecx
  0x000000011955a969:   mov    %cx,0x16(%r10,%rax,2)
  0x000000011955a96f:   lea    0x4(%rdx),%edx
  0x000000011955a972:   cmp    $0x4,%edx
  0x000000011955a975:   jl     0x000000011955a940
  0x000000011955a977:   jmpq   0x000000011955a98d
  0x000000011955a97c:   nopl   0x0(%rax)
  0x000000011955a980:   movswl 0x10(%rsi,%rdx,2),%eax
  0x000000011955a985:   mov    %ax,0x10(%r10,%rdx,2)
  0x000000011955a98b:   inc    %edx
  0x000000011955a98d:   cmp    $0x8,%edx
  0x000000011955a990:   jl     0x000000011955a980
  0x000000011955a992:   jmpq   0x000000011955aa30
  0x000000011955a997:   movabs $0x800000960,%rsi            ;   {metadata({type array bool})}
  0x000000011955a9a1:   mov    $0x8,%edx
  0x000000011955a9a6:   callq  0x0000000111b36a80           ; ImmutableOopMap {r10=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x000000011955a9ab:   nop                                 ; ImmutableOopMap {rax=Oop r10=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
  0x000000011955a9ac:   test   %eax,(%rax)                  ; implicit exception: dispatches to 0x000000011955aee6
  0x000000011955a9ae:   mov    %rax,%rsi
  0x000000011955a9b1:   jmpq   0x000000011955a70d
  0x000000011955a9b6:   mov    %rsi,0x28(%rsp)
  0x000000011955a9bb:   mov    0x40(%rsp),%r8d
  0x000000011955a9c0:   mov    0x44(%rsp),%r9d
  0x000000011955a9c5:   mov    0x48(%rsp),%edi
  0x000000011955a9c9:   mov    0x4c(%rsp),%r10d
  0x000000011955a9ce:   mov    %eax,%ecx
  0x000000011955a9d0:   mov    0x50(%rsp),%r11d
  0x000000011955a9d5:   mov    %ebp,0x3c(%rsp)
  0x000000011955a9d9:   movabs $0x800006520,%rdx            ;   {metadata({type array short})}
  0x000000011955a9e3:   mov    %rdx,%rsi
  0x000000011955a9e6:   mov    $0x8,%edx
  0x000000011955a9eb:   callq  0x0000000111b36a80           ; ImmutableOopMap {[40]=Oop }
                                                            ;*iconst_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::anyTrueHelper@30 (line 128)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::lambda$anyTrue$9@7 (line 689)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask$$Lambda$92/0x0000000800c29c30::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::test@30 (line 377)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x000000011955a9f0:   nop                                 ; ImmutableOopMap {rax=Oop [40]=Oop }
                                                            ;*iconst_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::anyTrueHelper@30 (line 128)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::lambda$anyTrue$9@7 (line 689)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask$$Lambda$92/0x0000000800c29c30::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::test@30 (line 377)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
  0x000000011955a9f1:   test   %eax,(%rax)                  ; implicit exception: dispatches to 0x000000011955af06
  0x000000011955a9f3:   mov    %rax,%r10
  0x000000011955a9f6:   mov    0x28(%rsp),%rsi
  0x000000011955a9fb:   nopl   0x0(%rax,%rax,1)
  0x000000011955aa00:   jmpq   0x000000011955a8fc
  0x000000011955aa05:   mov    %ebp,0x3c(%rsp)
  0x000000011955aa09:   movabs $0x800006520,%rsi            ;   {metadata({type array short})}
  0x000000011955aa13:   mov    $0x8,%edx
  0x000000011955aa18:   mov    %eax,%ebp
  0x000000011955aa1a:   callq  0x0000000111b36a80           ; ImmutableOopMap {}
                                                            ;*iconst_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::anyTrueHelper@30 (line 128)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::lambda$anyTrue$9@7 (line 689)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask$$Lambda$92/0x0000000800c29c30::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::test@30 (line 377)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x000000011955aa1f:   nop                                 ; ImmutableOopMap {rax=Oop }
                                                            ;*iconst_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::anyTrueHelper@30 (line 128)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::lambda$anyTrue$9@7 (line 689)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask$$Lambda$92/0x0000000800c29c30::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::test@30 (line 377)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
  0x000000011955aa20:   test   %eax,(%rax)                  ; implicit exception: dispatches to 0x000000011955af26
  0x000000011955aa22:   mov    %rax,%rsi
  0x000000011955aa25:   mov    %ebp,%eax
  0x000000011955aa27:   mov    0x3c(%rsp),%ebp
  0x000000011955aa2b:   jmpq   0x000000011955a875
  0x000000011955aa30:   mov    %rsi,0x28(%rsp)
  0x000000011955aa35:   mov    0x108(%r15),%rsi
  0x000000011955aa3c:   lea    0x30(%rsi),%rdx
  0x000000011955aa40:   movabs $0x6005090d0,%r11            ;   {oop(a 'jdk/incubator/vector/IntVector$IntSpecies'{0x00000006005090d0})}
  0x000000011955aa4a:   cmp    0x118(%r15),%rdx
  0x000000011955aa51:   ja     0x000000011955ad90
  0x000000011955aa57:   mov    %rdx,0x108(%r15)
  0x000000011955aa5e:   prefetchw 0xf0(%rsi)
  0x000000011955aa65:   prefetchw 0x130(%rsi)
  0x000000011955aa6c:   prefetchw 0x170(%rsi)
  0x000000011955aa73:   prefetchw 0x1b0(%rsi)
  0x000000011955aa7a:   movl   $0x8,0xc(%rsi)
  0x000000011955aa81:   movq   $0x1,(%rsi)
  0x000000011955aa88:   movl   $0x6718,0x8(%rsi)            ;   {metadata({type array int})}
  0x000000011955aa8f:   movq   $0x0,0x10(%rsi)
  0x000000011955aa97:   movq   $0x0,0x18(%rsi)
  0x000000011955aa9f:   movq   $0x0,0x20(%rsi)
  0x000000011955aaa7:   movq   $0x0,0x28(%rsi)
  0x000000011955aaaf:   movswl 0x1e(%r10),%edx
  0x000000011955aab4:   mov    %edx,0x2c(%rsi)
  0x000000011955aab7:   movswl 0x1c(%r10),%edx
  0x000000011955aabc:   mov    %edx,0x28(%rsi)
  0x000000011955aabf:   movswl 0x1a(%r10),%edx
  0x000000011955aac4:   mov    %edx,0x24(%rsi)
  0x000000011955aac7:   movswl 0x18(%r10),%edx
  0x000000011955aacc:   mov    %edx,0x20(%rsi)
  0x000000011955aacf:   movswl 0x16(%r10),%edx
  0x000000011955aad4:   mov    %edx,0x1c(%rsi)
  0x000000011955aad7:   movswl 0x14(%r10),%edx
  0x000000011955aadc:   mov    %edx,0x18(%rsi)
  0x000000011955aadf:   movswl 0x12(%r10),%edx
  0x000000011955aae4:   mov    %edx,0x14(%rsi)
  0x000000011955aae7:   movswl 0x10(%r10),%edx
  0x000000011955aaec:   mov    %edx,0x10(%rsi)
  0x000000011955aaef:   movabs $0x600509200,%rdx            ;   {oop(a 'java/lang/Class'{0x0000000600509200} = 'jdk/incubator/vector/Int256Vector')}
  0x000000011955aaf9:   movabs $0x7ffb002a0,%rcx            ;   {oop(a 'java/lang/Class'{0x00000007ffb002a0} = int)}
  0x000000011955ab03:   movabs $0x600510dd0,%r10            ;   {oop(a 'jdk/incubator/vector/IntVector$$Lambda$56+0x0000000800c79950'{0x0000000600510dd0})}
  0x000000011955ab0d:   mov    %rsi,%rax
  0x000000011955ab10:   mov    %rdx,%rsi
  0x000000011955ab13:   mov    %rcx,%rdx
  0x000000011955ab16:   mov    $0x8,%ecx
  0x000000011955ab1b:   mov    %rax,%r8
  0x000000011955ab1e:   mov    $0x10,%r9
  0x000000011955ab25:   mov    %rax,%rdi
  0x000000011955ab28:   movl   $0x0,(%rsp)
  0x000000011955ab2f:   mov    %r11,0x8(%rsp)
  0x000000011955ab34:   mov    %r10,0x10(%rsp)
  0x000000011955ab39:   mov    %rax,0x20(%rsp)
  0x000000011955ab3e:   nop
  0x000000011955ab3f:   nop
  0x000000011955ab40:   nopl   0x0(%rax)
  0x000000011955ab47:   callq  0x000000011954a2a0           ; ImmutableOopMap {[32]=Oop [40]=Oop }
                                                            ;*invokestatic load {reexecute=0 rethrow=0 return_oop=1}
                                                            ; - jdk.incubator.vector.IntVector::fromArray0Template@31 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {static_call}
  0x000000011955ab4c:   nop
  0x000000011955ab4d:   mov    %rax,%r10                    ; ImmutableOopMap {r10=Oop [32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
  0x000000011955ab50:   cmpl   $0xc645b8,0x8(%r10)          ; implicit exception: dispatches to 0x000000011955af46
                                                            ;   {metadata('jdk/incubator/vector/Int256Vector')}
  0x000000011955ab58:   jne    0x000000011955ae78
  0x000000011955ab5e:   mov    0xc(%r10),%esi
  0x000000011955ab62:   test   %esi,%esi
  0x000000011955ab64:   je     0x000000011955ace5
  0x000000011955ab6a:   mov    0x8(,%rsi,8),%edx
  0x000000011955ab71:   movabs $0x800000000,%rax
  0x000000011955ab7b:   lea    (%rax,%rdx,1),%rdx
  0x000000011955ab7f:   nop
  0x000000011955ab80:   test   %esi,%esi
  0x000000011955ab82:   je     0x000000011955ab9b
  0x000000011955ab88:   movabs $0x800006718,%rax            ;   {metadata({type array int})}
  0x000000011955ab92:   cmp    %rdx,%rax
  0x000000011955ab95:   jne    0x000000011955ae1e
  0x000000011955ab9b:   nopl   0x0(%rax,%rax,1)             ; ImmutableOopMap {rsi=NarrowOop r10=Oop [32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
  0x000000011955aba0:   cmpl   $0x8,0xc(,%rsi,8)            ; implicit exception: dispatches to 0x000000011955af66
  0x000000011955aba8:   jb     0x000000011955adf3
  0x000000011955abae:   movabs $0x61f2b63d8,%rdx            ;   {oop([I{0x000000061f2b63d8})}
  0x000000011955abb8:   mov    0x2c(%rdx),%eax
  0x000000011955abbb:   mov    %eax,%r11d
  0x000000011955abbe:   imul   0x2c(,%rsi,8),%r11d
  0x000000011955abc7:   mov    0x28(%rdx),%eax
  0x000000011955abca:   mov    %eax,%r8d
  0x000000011955abcd:   imul   0x28(,%rsi,8),%r8d
  0x000000011955abd6:   mov    0x24(%rdx),%eax
  0x000000011955abd9:   mov    %eax,%r9d
  0x000000011955abdc:   imul   0x24(,%rsi,8),%r9d
  0x000000011955abe5:   mov    0x20(%rdx),%eax
  0x000000011955abe8:   mov    %eax,%ecx
  0x000000011955abea:   imul   0x20(,%rsi,8),%ecx
  0x000000011955abf2:   mov    0x1c(%rdx),%eax
  0x000000011955abf5:   mov    %eax,%ebx
  0x000000011955abf7:   imul   0x1c(,%rsi,8),%ebx
  0x000000011955abff:   mov    0x18(%rdx),%eax
  0x000000011955ac02:   mov    %eax,%edi
  0x000000011955ac04:   imul   0x18(,%rsi,8),%edi
  0x000000011955ac0c:   mov    0x14(%rdx),%eax
  0x000000011955ac0f:   mov    %eax,%ebp
  0x000000011955ac11:   imul   0x14(,%rsi,8),%ebp
  0x000000011955ac19:   mov    0x10(%rdx),%edx
  0x000000011955ac1c:   mov    %edx,%r13d
  0x000000011955ac1f:   imul   0x10(,%rsi,8),%r13d
  0x000000011955ac28:   mov    0x108(%r15),%rsi
  0x000000011955ac2f:   lea    0x30(%rsi),%rdx
  0x000000011955ac33:   nopw   0x0(%rax,%rax,1)
  0x000000011955ac3c:   data16 data16 xchg %ax,%ax
  0x000000011955ac40:   cmp    0x118(%r15),%rdx
  0x000000011955ac47:   ja     0x000000011955ad71
  0x000000011955ac4d:   mov    %rdx,0x108(%r15)
  0x000000011955ac54:   prefetchw 0xf0(%rsi)
  0x000000011955ac5b:   prefetchw 0x130(%rsi)
  0x000000011955ac62:   prefetchw 0x170(%rsi)
  0x000000011955ac69:   prefetchw 0x1b0(%rsi)
  0x000000011955ac70:   movl   $0x8,0xc(%rsi)
  0x000000011955ac77:   movq   $0x1,(%rsi)
  0x000000011955ac7e:   movl   $0x6718,0x8(%rsi)            ;   {metadata({type array int})}
  0x000000011955ac85:   movq   $0x0,0x10(%rsi)
  0x000000011955ac8d:   movq   $0x0,0x18(%rsi)
  0x000000011955ac95:   movq   $0x0,0x20(%rsi)
  0x000000011955ac9d:   movq   $0x0,0x28(%rsi)
  0x000000011955aca5:   mov    %r11d,0x2c(%rsi)
  0x000000011955aca9:   mov    %r8d,0x28(%rsi)
  0x000000011955acad:   mov    %r9d,0x24(%rsi)
  0x000000011955acb1:   mov    %ecx,0x20(%rsi)
  0x000000011955acb4:   mov    %ebx,0x1c(%rsi)
  0x000000011955acb7:   mov    %edi,0x18(%rsi)
  0x000000011955acba:   mov    %ebp,0x14(%rsi)
  0x000000011955acbd:   mov    %r13d,0x10(%rsi)
  0x000000011955acc1:   mov    $0x1,%edx
  0x000000011955acc6:   jmpq   0x000000011955acd7
  0x000000011955accb:   nopl   0x0(%rax,%rax,1)
  0x000000011955acd0:   add    0x10(%rsi,%rdx,4),%r13d
  0x000000011955acd5:   inc    %edx
  0x000000011955acd7:   cmp    $0x2,%edx
  0x000000011955acda:   jl     0x000000011955acd0
  0x000000011955acdc:   nopl   0x0(%rax)
  0x000000011955ace0:   jmpq   0x000000011955acf1
  0x000000011955ace5:   mov    $0x0,%rdx
  0x000000011955acec:   jmpq   0x000000011955ab7f
  0x000000011955acf1:   mov    %edx,%eax
  0x000000011955acf3:   mov    %r13d,%edx
  0x000000011955acf6:   jmpq   0x000000011955ad1f
  0x000000011955acfb:   nopl   0x0(%rax,%rax,1)
  0x000000011955ad00:   add    0x10(%rsi,%rax,4),%edx
  0x000000011955ad04:   movslq %eax,%r10
  0x000000011955ad07:   mov    0x14(%rsi,%r10,4),%r11d
  0x000000011955ad0c:   mov    0x18(%rsi,%r10,4),%r8d
  0x000000011955ad11:   add    %r11d,%edx
  0x000000011955ad14:   add    %r8d,%edx
  0x000000011955ad17:   add    0x1c(%rsi,%r10,4),%edx
  0x000000011955ad1c:   lea    0x4(%rax),%eax
  0x000000011955ad1f:   nop
  0x000000011955ad20:   cmp    $0x4,%eax
  0x000000011955ad23:   jl     0x000000011955ad00
  0x000000011955ad25:   jmpq   0x000000011955ad47
  0x000000011955ad2a:   mov    $0xffffffffffffffff,%rax
  0x000000011955ad31:   mov    0x60(%rsp),%rbp
  0x000000011955ad36:   add    $0x68,%rsp
  0x000000011955ad3a:   mov    0x348(%r15),%rcx
  0x000000011955ad41:   test   %eax,(%rcx)                  ;   {poll_return}
  0x000000011955ad43:   vzeroupper
  0x000000011955ad46:   retq
  0x000000011955ad47:   mov    %edx,%r10d
  0x000000011955ad4a:   mov    %eax,%edx
  0x000000011955ad4c:   jmpq   0x000000011955ad67
  0x000000011955ad51:   data16 data16 nopw 0x0(%rax,%rax,1)
  0x000000011955ad5c:   data16 data16 xchg %ax,%ax
  0x000000011955ad60:   add    0x10(%rsi,%rdx,4),%r10d
  0x000000011955ad65:   inc    %edx
  0x000000011955ad67:   cmp    $0x8,%edx
  0x000000011955ad6a:   jl     0x000000011955ad60
  0x000000011955ad6c:   jmpq   0x000000011955adb0
  0x000000011955ad71:   movabs $0x800006718,%rsi            ;   {metadata({type array int})}
  0x000000011955ad7b:   mov    $0x8,%edx
  0x000000011955ad80:   callq  0x0000000111b36a80           ; ImmutableOopMap {r10=Oop [32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x000000011955ad85:   nop                                 ; ImmutableOopMap {rax=Oop r10=Oop [32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
  0x000000011955ad86:   test   %eax,(%rax)                  ; implicit exception: dispatches to 0x000000011955af86
  0x000000011955ad88:   mov    %rax,%rsi
  0x000000011955ad8b:   jmpq   0x000000011955aca5
  0x000000011955ad90:   movabs $0x800006718,%rsi            ;   {metadata({type array int})}
  0x000000011955ad9a:   mov    $0x8,%edx
  0x000000011955ad9f:   nop
  0x000000011955ada0:   callq  0x0000000111b36a80           ; ImmutableOopMap {r10=Oop r11=Oop [40]=Oop }
                                                            ;*return {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::stOp@38 (line 344)
                                                            ; - jdk.incubator.vector.ShortVector::lambda$intoArray$83@8 (line 3131)
                                                            ; - jdk.incubator.vector.ShortVector$$Lambda$94/0x0000000800c2a480::store@9
                                                            ; - jdk.internal.vm.vector.VectorSupport::store@32 (line 347)
                                                            ; - jdk.incubator.vector.ShortVector::intoArray@42 (line 3125)
                                                            ; - jdk.incubator.vector.ShortVector::toArray@13 (line 2557)
                                                            ; - jdk.incubator.vector.ShortVector::toLongArray@1 (line 2592)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@379 (line 590)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call Stub<new_array_or_null(KlassPointer,int)Object>}
  0x000000011955ada5:   nop                                 ; ImmutableOopMap {rax=Oop r10=Oop r11=Oop [40]=Oop }
                                                            ;*return {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::stOp@38 (line 344)
                                                            ; - jdk.incubator.vector.ShortVector::lambda$intoArray$83@8 (line 3131)
                                                            ; - jdk.incubator.vector.ShortVector$$Lambda$94/0x0000000800c2a480::store@9
                                                            ; - jdk.internal.vm.vector.VectorSupport::store@32 (line 347)
                                                            ; - jdk.incubator.vector.ShortVector::intoArray@42 (line 3125)
                                                            ; - jdk.incubator.vector.ShortVector::toArray@13 (line 2557)
                                                            ; - jdk.incubator.vector.ShortVector::toLongArray@1 (line 2592)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@379 (line 590)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
  0x000000011955ada6:   test   %eax,(%rax)                  ; implicit exception: dispatches to 0x000000011955afa6
  0x000000011955ada8:   mov    %rax,%rsi
  0x000000011955adab:   jmpq   0x000000011955aaaf
  0x000000011955adb0:   movslq %r10d,%rax
  0x000000011955adb3:   mov    0x60(%rsp),%rbp
  0x000000011955adb8:   add    $0x68,%rsp
  0x000000011955adbc:   mov    0x348(%r15),%rcx
  0x000000011955adc3:   test   %eax,(%rcx)                  ;   {poll_return}
  0x000000011955adc5:   vzeroupper
  0x000000011955adc8:   retq
  0x000000011955adc9:   mov    $0x0,%r8
  0x000000011955add0:   mov    $0xffffffdd,%r11d
  0x000000011955add6:   mov    0x54(%rsp),%edx
  0x000000011955adda:   mov    0x30(%rsp),%rsi
  0x000000011955addf:   mov    %r11d,0x370(%r15)
  0x000000011955ade6:   mov    %r8,0x378(%r15)
  0x000000011955aded:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=Oop r10=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955adf2:   nop
  0x000000011955adf3:   mov    $0x0,%r8
  0x000000011955adfa:   mov    $0xffffffe5,%r11d
  0x000000011955ae00:   mov    0x20(%rsp),%r9
  0x000000011955ae05:   mov    0x28(%rsp),%rsi
  0x000000011955ae0a:   mov    %r11d,0x370(%r15)
  0x000000011955ae11:   mov    %r8,0x378(%r15)
  0x000000011955ae18:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=Oop r9=Oop r10=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955ae1d:   nop
  0x000000011955ae1e:   mov    $0x0,%r8
  0x000000011955ae25:   mov    $0xffffffdd,%r11d
  0x000000011955ae2b:   jmp    0x000000011955ae00
  0x000000011955ae2d:   mov    $0x410,%r8
  0x000000011955ae34:   mov    $0xffffffcd,%r11d
  0x000000011955ae3a:   jmp    0x000000011955add6
  0x000000011955ae3c:   mov    %edx,0x54(%rsp)
  0x000000011955ae40:   mov    %rsi,0x30(%rsp)
  0x000000011955ae45:   movl   $0xffffffe4,0x370(%r15)
  0x000000011955ae50:   movq   $0x0,0x378(%r15)
  0x000000011955ae5b:   nopl   0x0(%rax,%rax,1)
  0x000000011955ae60:   callq  0x0000000111a6c27a           ; ImmutableOopMap {[48]=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955ae65:   nop
  0x000000011955ae66:   mov    $0x0,%r8
  0x000000011955ae6d:   mov    $0xffffffe5,%r11d
  0x000000011955ae73:   jmpq   0x000000011955add6
  0x000000011955ae78:   mov    $0x3410,%r8
  0x000000011955ae7f:   mov    $0xffffffcd,%r11d
  0x000000011955ae85:   jmpq   0x000000011955ae00
  0x000000011955ae8a:   movl   $0xfffffff5,0x370(%r15)
  0x000000011955ae95:   movq   $0x0,0x378(%r15)
  0x000000011955aea0:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=Oop }
                                                            ;*getstatic SPECIES_128 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@0 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955aea5:   nop
  0x000000011955aea6:   movl   $0xfffffff5,0x370(%r15)
  0x000000011955aeb1:   movq   $0x0,0x378(%r15)
  0x000000011955aebc:   nopl   0x0(%rax)
  0x000000011955aec0:   callq  0x0000000111a6c27a           ; ImmutableOopMap {r10=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955aec5:   nop
  0x000000011955aec6:   movl   $0xfffffff5,0x370(%r15)
  0x000000011955aed1:   movq   $0x0,0x378(%r15)
  0x000000011955aedc:   nopl   0x0(%rax)
  0x000000011955aee0:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=NarrowOop r10=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955aee5:   nop
  0x000000011955aee6:   movl   $0xffffff8f,0x370(%r15)
  0x000000011955aef1:   movq   $0x0,0x378(%r15)
  0x000000011955aefc:   nopl   0x0(%rax)
  0x000000011955af00:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rax=Oop r10=Oop [48]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::fromCharArray0Template@34 (line 3520)
                                                            ; - jdk.incubator.vector.Short128Vector::fromCharArray0@3 (line 794)
                                                            ; - jdk.incubator.vector.ShortVector::fromCharArray@24 (line 2873)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@5 (line 600)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955af05:   nop
  0x000000011955af06:   movl   $0xffffff8f,0x370(%r15)
  0x000000011955af11:   movq   $0x0,0x378(%r15)
  0x000000011955af1c:   nopl   0x0(%rax)
  0x000000011955af20:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rax=Oop [40]=Oop }
                                                            ;*iconst_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::anyTrueHelper@30 (line 128)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::lambda$anyTrue$9@7 (line 689)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask$$Lambda$92/0x0000000800c29c30::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::test@30 (line 377)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955af25:   nop
  0x000000011955af26:   movl   $0xffffff8f,0x370(%r15)
  0x000000011955af31:   movq   $0x0,0x378(%r15)
  0x000000011955af3c:   nopl   0x0(%rax)
  0x000000011955af40:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rax=Oop }
                                                            ;*iconst_0 {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.AbstractMask::anyTrueHelper@30 (line 128)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::lambda$anyTrue$9@7 (line 689)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask$$Lambda$92/0x0000000800c29c30::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::test@30 (line 377)
                                                            ; - jdk.incubator.vector.Short128Vector$Short128Mask::anyTrue@23 (line 687)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@24 (line 603)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955af45:   nop
  0x000000011955af46:   movl   $0xfffffff5,0x370(%r15)
  0x000000011955af51:   movq   $0x0,0x378(%r15)
  0x000000011955af5c:   nopl   0x0(%rax)
  0x000000011955af60:   callq  0x0000000111a6c27a           ; ImmutableOopMap {r10=Oop [32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955af65:   nop
  0x000000011955af66:   movl   $0xfffffff5,0x370(%r15)
  0x000000011955af71:   movq   $0x0,0x378(%r15)
  0x000000011955af7c:   nopl   0x0(%rax)
  0x000000011955af80:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rsi=NarrowOop r10=Oop [32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955af85:   nop
  0x000000011955af86:   movl   $0xffffff8f,0x370(%r15)
  0x000000011955af91:   movq   $0x0,0x378(%r15)
  0x000000011955af9c:   nopl   0x0(%rax)
  0x000000011955afa0:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rax=Oop r10=Oop [32]=Oop [40]=Oop }
                                                            ;*checkcast {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.IntVector::fromArray0Template@34 (line 3239)
                                                            ; - jdk.incubator.vector.Int256Vector::fromArray0@3 (line 787)
                                                            ; - jdk.incubator.vector.IntVector::fromArray@24 (line 2717)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@577 (line 613)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955afa5:   nop
  0x000000011955afa6:   movl   $0xffffff8f,0x370(%r15)
  0x000000011955afb1:   movq   $0x0,0x378(%r15)
  0x000000011955afbc:   nopl   0x0(%rax)
  0x000000011955afc0:   callq  0x0000000111a6c27a           ; ImmutableOopMap {rax=Oop r10=Oop r11=Oop [40]=Oop }
                                                            ;*return {reexecute=1 rethrow=0 return_oop=0}
                                                            ; - (reexecute) jdk.incubator.vector.ShortVector::stOp@38 (line 344)
                                                            ; - jdk.incubator.vector.ShortVector::lambda$intoArray$83@8 (line 3131)
                                                            ; - jdk.incubator.vector.ShortVector$$Lambda$94/0x0000000800c2a480::store@9
                                                            ; - jdk.internal.vm.vector.VectorSupport::store@32 (line 347)
                                                            ; - jdk.incubator.vector.ShortVector::intoArray@42 (line 3125)
                                                            ; - jdk.incubator.vector.ShortVector::toArray@13 (line 2557)
                                                            ; - jdk.incubator.vector.ShortVector::toLongArray@1 (line 2592)
                                                            ; - jdk.incubator.vector.AbstractVector::defaultCast@379 (line 590)
                                                            ; - jdk.incubator.vector.AbstractVector$$Lambda$93/0x0000000800c2a060::apply@8
                                                            ; - jdk.internal.vm.vector.VectorSupport::convert@30 (line 473)
                                                            ; - jdk.incubator.vector.AbstractVector::convert0@128 (line 678)
                                                            ; - jdk.incubator.vector.AbstractVector::convertShapeTemplate@212 (line 366)
                                                            ; - jdk.incubator.vector.Short128Vector::convertShape@4 (line 248)
                                                            ; - jdk.incubator.vector.AbstractVector::castShape@31 (line 287)
                                                            ; - ch.randelshofer.fastdoubleparser.FastDoubleParserFromCharArray::tryToParseEightDigitsSimd@39 (line 607)
                                                            ;   {runtime_call DeoptimizationBlob}
  0x000000011955afc5:   nop
[Exception Handler]
  0x000000011955afc6:   callq  0x0000000111b2d380           ;   {runtime_call Stub<ExceptionHandlerStub.exceptionHandler>}
  0x000000011955afcb:   nop
[Deopt Handler Code]
  0x000000011955afcc:   callq  0x0000000111a6c020           ;   {runtime_call DeoptimizationBlob}
  0x000000011955afd1:   nop
  0x000000011955afd2:   hlt
  0x000000011955afd3:   hlt
  0x000000011955afd4:   hlt
  0x000000011955afd5:   hlt
  0x000000011955afd6:   hlt
  0x000000011955afd7:   hlt
  0x000000011955afd8:   hlt
  0x000000011955afd9:   hlt
  0x000000011955afda:   hlt
  0x000000011955afdb:   hlt
  0x000000011955afdc:   hlt
  0x000000011955afdd:   hlt
  0x000000011955afde:   hlt
  0x000000011955afdf:   hlt
[Stub Code]
  0x000000011955afe0:   movabs $0x0,%rbx                    ;   {no_reloc}
  0x000000011955afea:   jmpq   0x000000011955afea           ;   {runtime_call const_jargs+-96006241}
  0x000000011955afef:   movabs $0x0,%rbx                    ;   {static_stub}
  0x000000011955aff9:   jmpq   0x000000011955aff9           ;   {runtime_call const_jargs+-96006241}
  0x000000011955affe:   hlt
  0x000000011955afff:   hlt
--------------------------------------------------------------------------------
[/Disassembly]

FastDoubleParser               :    537.03 MB/s (+/- 2.1 %)    30.81 Mfloat/s      32.45 ns/f
FastDoubleParserFromCharArray  :    191.99 MB/s (+/- 6.9 %)    10.94 Mfloat/s      91.42 ns/f
FastDoubleParserFromByteArray  :    595.30 MB/s (+/- 5.0 %)    34.06 Mfloat/s      29.36 ns/f
Double                         :    112.10 MB/s (+/- 4.1 %)     6.42 Mfloat/s     155.70 ns/f

Speedup FastDoubleParser              vs Double: 4.79
Speedup FastDoubleParserFromCharArray vs Double: 1.71
Speedup FastDoubleParserFromByteArray vs Double: 5.31


You can also provide a filename: it should contain one string per line corresponding to a number.

Process finished with exit code 0
